
STU3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e4c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800400c  0800400c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000007c  08004090  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004090  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a436  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001850  00000000  00000000  0002a4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0002bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001596c  00000000  00000000  0002cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009015  00000000  00000000  0004243c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000862a5  00000000  00000000  0004b451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d16f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dac  00000000  00000000  000d174c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003fcc 	.word	0x08003fcc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08003fcc 	.word	0x08003fcc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fec5 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f837 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8f3 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 f8c9 	bl	8000678 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f89b 	bl	8000620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART2.huart = &huart2;
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <main+0x6c>)
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <main+0x70>)
 80004ee:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <main+0x6c>)
 80004f2:	22ff      	movs	r2, #255	; 0xff
 80004f4:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <main+0x6c>)
 80004f8:	22ff      	movs	r2, #255	; 0xff
 80004fa:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 80004fc:	480f      	ldr	r0, [pc, #60]	; (800053c <main+0x6c>)
 80004fe:	f000 f951 	bl	80007a4 <UARTInit>
  UARTResetStart(&UART2);
 8000502:	480e      	ldr	r0, [pc, #56]	; (800053c <main+0x6c>)
 8000504:	f000 f976 	bl	80007f4 <UARTResetStart>
  HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 9 ,1000);
 8000508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050c:	2209      	movs	r2, #9
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <main+0x74>)
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <main+0x70>)
 8000512:	f002 fab0 	bl	8002a76 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int16_t inputChar = UARTReadChar(&UART2);
 8000516:	4809      	ldr	r0, [pc, #36]	; (800053c <main+0x6c>)
 8000518:	f000 f990 	bl	800083c <UARTReadChar>
 800051c:	4603      	mov	r3, r0
 800051e:	80fb      	strh	r3, [r7, #6]
	  		//if input char == -1 ==> No New data
	  		if (inputChar != -1)
 8000520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000528:	d0f5      	beq.n	8000516 <main+0x46>
	  		sprintf(temp, "Recived [%d]\r\n", inputChar);
	  		//UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
#else
	  		//DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
	  		//dataFN += 1;
	  		All_mode(MainMemory, 1, inputChar, &UART2);
 800052a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800052e:	4b03      	ldr	r3, [pc, #12]	; (800053c <main+0x6c>)
 8000530:	2101      	movs	r1, #1
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <main+0x78>)
 8000534:	f000 f9ac 	bl	8000890 <All_mode>
  {
 8000538:	e7ed      	b.n	8000516 <main+0x46>
 800053a:	bf00      	nop
 800053c:	200000a0 	.word	0x200000a0
 8000540:	2000029c 	.word	0x2000029c
 8000544:	20000004 	.word	0x20000004
 8000548:	200000b8 	.word	0x200000b8

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fca6 	bl	8003eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a27      	ldr	r2, [pc, #156]	; (8000618 <SystemClock_Config+0xcc>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <SystemClock_Config+0xd0>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005bc:	2310      	movs	r3, #16
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fd8e 	bl	80020f4 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005de:	f000 fca5 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fff0 	bl	80025e4 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060a:	f000 fc8f 	bl	8000f2c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_USART2_UART_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x50>)
 800062c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000638:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_USART2_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x50>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x50>)
 800065c:	f002 f9be 	bl	80029dc <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000666:	f000 fc61 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000029c 	.word	0x2000029c
 8000674:	40004400 	.word	0x40004400

08000678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_DMA_Init+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <MX_DMA_Init+0x4c>)
 8000688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_DMA_Init+0x4c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2010      	movs	r0, #16
 80006a0:	f000 ff51 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f000 ff6a 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2011      	movs	r0, #17
 80006b0:	f000 ff49 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006b4:	2011      	movs	r0, #17
 80006b6:	f000 ff62 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <MX_GPIO_Init+0xd4>)
 8000754:	f001 fcb4 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_GPIO_Init+0xd8>)
 8000770:	f001 fb22 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000774:	2320      	movs	r3, #32
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0xd4>)
 800078c:	f001 fb14 	bl	8001db8 <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020800 	.word	0x40020800

080007a4 <UARTInit>:

/* USER CODE BEGIN 4 */
void UARTInit(UARTStucrture *uart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <UARTInit+0x4c>)
 80007ae:	88db      	ldrh	r3, [r3, #6]
 80007b0:	4619      	mov	r1, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	f003 fb48 	bl	8003e48 <calloc>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <UARTInit+0x4c>)
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2001      	movs	r0, #1
 80007c8:	f003 fb3e 	bl	8003e48 <calloc>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	81da      	strh	r2, [r3, #14]

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000a0 	.word	0x200000a0

080007f4 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6919      	ldr	r1, [r3, #16]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	88db      	ldrh	r3, [r3, #6]
 8000808:	461a      	mov	r2, r3
 800080a:	f002 fa45 	bl	8002c98 <HAL_UART_Receive_DMA>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	88db      	ldrh	r3, [r3, #6]
 8000822:	461a      	mov	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	1ad3      	subs	r3, r2, r3
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000848:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8a9b      	ldrh	r3, [r3, #20]
 800084e:	461c      	mov	r4, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ffe0 	bl	8000816 <UARTGetRxHead>
 8000856:	4603      	mov	r3, r0
 8000858:	429c      	cmp	r4, r3
 800085a:	d013      	beq.n	8000884 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	8a92      	ldrh	r2, [r2, #20]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	8a9b      	ldrh	r3, [r3, #20]
 800086e:	3301      	adds	r3, #1
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	88d2      	ldrh	r2, [r2, #6]
 8000874:	fb93 f1f2 	sdiv	r1, r3, r2
 8000878:	fb02 f201 	mul.w	r2, r2, r1
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	b29a      	uxth	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000884:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bd90      	pop	{r4, r7, pc}

08000890 <All_mode>:
void All_mode(uint8_t *Memory, uint8_t MotorID, int16_t DataIn, UARTStucrture *uart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	72fb      	strb	r3, [r7, #11]
 800089e:	4613      	mov	r3, r2
 80008a0:	813b      	strh	r3, [r7, #8]
	N_state = uart->RxBuffer[uart->RxTail-1];
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691a      	ldr	r2, [r3, #16]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8a9b      	ldrh	r3, [r3, #20]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b8b      	ldr	r3, [pc, #556]	; (8000ae0 <All_mode+0x250>)
 80008b2:	701a      	strb	r2, [r3, #0]
	//rxlen = uart->RxLen;
	switch (chkM){
 80008b4:	4b8b      	ldr	r3, [pc, #556]	; (8000ae4 <All_mode+0x254>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d035      	beq.n	8000928 <All_mode+0x98>
 80008bc:	2b02      	cmp	r3, #2
 80008be:	f300 8317 	bgt.w	8000ef0 <All_mode+0x660>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <All_mode+0x3c>
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d017      	beq.n	80008fa <All_mode+0x6a>
					}
					break;
			}
	}

}
 80008ca:	e311      	b.n	8000ef0 <All_mode+0x660>
			StartM = DataIn;
 80008cc:	893b      	ldrh	r3, [r7, #8]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b85      	ldr	r3, [pc, #532]	; (8000ae8 <All_mode+0x258>)
 80008d2:	701a      	strb	r2, [r3, #0]
			chkStart = DataIn >> 4;
 80008d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80008d8:	111b      	asrs	r3, r3, #4
 80008da:	b21b      	sxth	r3, r3
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b83      	ldr	r3, [pc, #524]	; (8000aec <All_mode+0x25c>)
 80008e0:	701a      	strb	r2, [r3, #0]
			if (chkStart == 9){
 80008e2:	4b82      	ldr	r3, [pc, #520]	; (8000aec <All_mode+0x25c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b09      	cmp	r3, #9
 80008e8:	d103      	bne.n	80008f2 <All_mode+0x62>
				chkM = 1;
 80008ea:	4b7e      	ldr	r3, [pc, #504]	; (8000ae4 <All_mode+0x254>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
			break;
 80008f0:	e2fe      	b.n	8000ef0 <All_mode+0x660>
				chkM = 0;
 80008f2:	4b7c      	ldr	r3, [pc, #496]	; (8000ae4 <All_mode+0x254>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
			break;
 80008f8:	e2fa      	b.n	8000ef0 <All_mode+0x660>
			NameM = (DataIn & 15);
 80008fa:	893b      	ldrh	r3, [r7, #8]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <All_mode+0x260>)
 8000906:	701a      	strb	r2, [r3, #0]
			if (NameM >= 1 && NameM <= 14){
 8000908:	4b79      	ldr	r3, [pc, #484]	; (8000af0 <All_mode+0x260>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d007      	beq.n	8000920 <All_mode+0x90>
 8000910:	4b77      	ldr	r3, [pc, #476]	; (8000af0 <All_mode+0x260>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b0e      	cmp	r3, #14
 8000916:	d803      	bhi.n	8000920 <All_mode+0x90>
				chkM = 2;
 8000918:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <All_mode+0x254>)
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
			break;
 800091e:	e2e7      	b.n	8000ef0 <All_mode+0x660>
				chkM = 0;
 8000920:	4b70      	ldr	r3, [pc, #448]	; (8000ae4 <All_mode+0x254>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
			break;
 8000926:	e2e3      	b.n	8000ef0 <All_mode+0x660>
			switch (NameM){
 8000928:	4b71      	ldr	r3, [pc, #452]	; (8000af0 <All_mode+0x260>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	3b01      	subs	r3, #1
 800092e:	2b0d      	cmp	r3, #13
 8000930:	f200 82de 	bhi.w	8000ef0 <All_mode+0x660>
 8000934:	a201      	add	r2, pc, #4	; (adr r2, 800093c <All_mode+0xac>)
 8000936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093a:	bf00      	nop
 800093c:	08000975 	.word	0x08000975
 8000940:	080009e9 	.word	0x080009e9
 8000944:	08000a2d 	.word	0x08000a2d
 8000948:	08000a71 	.word	0x08000a71
 800094c:	08000b19 	.word	0x08000b19
 8000950:	08000b89 	.word	0x08000b89
 8000954:	08000bf9 	.word	0x08000bf9
 8000958:	08000c99 	.word	0x08000c99
 800095c:	08000ceb 	.word	0x08000ceb
 8000960:	08000d3d 	.word	0x08000d3d
 8000964:	08000dc1 	.word	0x08000dc1
 8000968:	08000dfd 	.word	0x08000dfd
 800096c:	08000e3f 	.word	0x08000e3f
 8000970:	08000e81 	.word	0x08000e81
					if (dataFN == 2){
 8000974:	4b5f      	ldr	r3, [pc, #380]	; (8000af4 <All_mode+0x264>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d103      	bne.n	8000984 <All_mode+0xf4>
						dataF1 = DataIn;
 800097c:	893b      	ldrh	r3, [r7, #8]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b5d      	ldr	r3, [pc, #372]	; (8000af8 <All_mode+0x268>)
 8000982:	701a      	strb	r2, [r3, #0]
					if(dataFN == 3){
 8000984:	4b5b      	ldr	r3, [pc, #364]	; (8000af4 <All_mode+0x264>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d103      	bne.n	8000994 <All_mode+0x104>
						dataF2 = DataIn;
 800098c:	893b      	ldrh	r3, [r7, #8]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b5a      	ldr	r3, [pc, #360]	; (8000afc <All_mode+0x26c>)
 8000992:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000994:	893b      	ldrh	r3, [r7, #8]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b59      	ldr	r3, [pc, #356]	; (8000b00 <All_mode+0x270>)
 800099a:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800099c:	4b52      	ldr	r3, [pc, #328]	; (8000ae8 <All_mode+0x258>)
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <All_mode+0x268>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b54      	ldr	r3, [pc, #336]	; (8000afc <All_mode+0x26c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <All_mode+0x274>)
 80009b6:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80009b8:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <All_mode+0x270>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <All_mode+0x274>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	f040 827c 	bne.w	8000ebe <All_mode+0x62e>
						M_state = 1;
 80009c6:	4b50      	ldr	r3, [pc, #320]	; (8000b08 <All_mode+0x278>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2, 1000);
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	2202      	movs	r2, #2
 80009d2:	494e      	ldr	r1, [pc, #312]	; (8000b0c <All_mode+0x27c>)
 80009d4:	484e      	ldr	r0, [pc, #312]	; (8000b10 <All_mode+0x280>)
 80009d6:	f002 f84e 	bl	8002a76 <HAL_UART_Transmit>
						chkM = 0;
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <All_mode+0x254>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <All_mode+0x264>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
					break;
 80009e6:	e26a      	b.n	8000ebe <All_mode+0x62e>
					chksum = DataIn;
 80009e8:	893b      	ldrh	r3, [r7, #8]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <All_mode+0x270>)
 80009ee:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80009f0:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <All_mode+0x258>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	43db      	mvns	r3, r3
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <All_mode+0x284>)
 80009fa:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80009fc:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <All_mode+0x270>)
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <All_mode+0x284>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	f040 825c 	bne.w	8000ec2 <All_mode+0x632>
						M_state = 2;
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <All_mode+0x278>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2, 1000);
 8000a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a14:	2202      	movs	r2, #2
 8000a16:	493d      	ldr	r1, [pc, #244]	; (8000b0c <All_mode+0x27c>)
 8000a18:	483d      	ldr	r0, [pc, #244]	; (8000b10 <All_mode+0x280>)
 8000a1a:	f002 f82c 	bl	8002a76 <HAL_UART_Transmit>
						chkM = 0;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <All_mode+0x254>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <All_mode+0x264>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
					break;
 8000a2a:	e24a      	b.n	8000ec2 <All_mode+0x632>
					chksum = DataIn;
 8000a2c:	893b      	ldrh	r3, [r7, #8]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <All_mode+0x270>)
 8000a32:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <All_mode+0x258>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <All_mode+0x284>)
 8000a3e:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <All_mode+0x270>)
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <All_mode+0x284>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	f040 823c 	bne.w	8000ec6 <All_mode+0x636>
						M_state = 3;
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <All_mode+0x278>)
 8000a50:	2203      	movs	r2, #3
 8000a52:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2, 1000);
 8000a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a58:	2202      	movs	r2, #2
 8000a5a:	492c      	ldr	r1, [pc, #176]	; (8000b0c <All_mode+0x27c>)
 8000a5c:	482c      	ldr	r0, [pc, #176]	; (8000b10 <All_mode+0x280>)
 8000a5e:	f002 f80a 	bl	8002a76 <HAL_UART_Transmit>
						chkM = 0;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <All_mode+0x254>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <All_mode+0x264>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
					break;
 8000a6e:	e22a      	b.n	8000ec6 <All_mode+0x636>
					if (dataFN == 2){
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <All_mode+0x264>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d103      	bne.n	8000a80 <All_mode+0x1f0>
						dataF1 = DataIn;
 8000a78:	893b      	ldrh	r3, [r7, #8]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <All_mode+0x268>)
 8000a7e:	701a      	strb	r2, [r3, #0]
					if(dataFN == 3){
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <All_mode+0x264>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d103      	bne.n	8000a90 <All_mode+0x200>
						dataF2 = DataIn;
 8000a88:	893b      	ldrh	r3, [r7, #8]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <All_mode+0x26c>)
 8000a8e:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000a90:	893b      	ldrh	r3, [r7, #8]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <All_mode+0x270>)
 8000a96:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <All_mode+0x258>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <All_mode+0x268>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <All_mode+0x26c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <All_mode+0x274>)
 8000ab2:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <All_mode+0x270>)
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <All_mode+0x274>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 8204 	bne.w	8000eca <All_mode+0x63a>
						M_state = 4;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <All_mode+0x278>)
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000ac8:	2202      	movs	r2, #2
 8000aca:	4910      	ldr	r1, [pc, #64]	; (8000b0c <All_mode+0x27c>)
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <All_mode+0x280>)
 8000ace:	f002 f865 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <All_mode+0x254>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <All_mode+0x264>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
					break;
 8000ade:	e1f4      	b.n	8000eca <All_mode+0x63a>
 8000ae0:	20000099 	.word	0x20000099
 8000ae4:	2000009a 	.word	0x2000009a
 8000ae8:	20000228 	.word	0x20000228
 8000aec:	200001c4 	.word	0x200001c4
 8000af0:	20000231 	.word	0x20000231
 8000af4:	2000009b 	.word	0x2000009b
 8000af8:	20000297 	.word	0x20000297
 8000afc:	200002e0 	.word	0x200002e0
 8000b00:	2000029a 	.word	0x2000029a
 8000b04:	20000295 	.word	0x20000295
 8000b08:	20000098 	.word	0x20000098
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	2000029c 	.word	0x2000029c
 8000b14:	20000298 	.word	0x20000298
					if (dataFN == 2){
 8000b18:	4b98      	ldr	r3, [pc, #608]	; (8000d7c <All_mode+0x4ec>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d103      	bne.n	8000b28 <All_mode+0x298>
						dataF1 = DataIn;
 8000b20:	893b      	ldrh	r3, [r7, #8]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b96      	ldr	r3, [pc, #600]	; (8000d80 <All_mode+0x4f0>)
 8000b26:	701a      	strb	r2, [r3, #0]
					if(dataFN == 3){
 8000b28:	4b94      	ldr	r3, [pc, #592]	; (8000d7c <All_mode+0x4ec>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d103      	bne.n	8000b38 <All_mode+0x2a8>
						dataF2 = DataIn;
 8000b30:	893b      	ldrh	r3, [r7, #8]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b93      	ldr	r3, [pc, #588]	; (8000d84 <All_mode+0x4f4>)
 8000b36:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000b38:	893b      	ldrh	r3, [r7, #8]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b92      	ldr	r3, [pc, #584]	; (8000d88 <All_mode+0x4f8>)
 8000b3e:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000b40:	4b92      	ldr	r3, [pc, #584]	; (8000d8c <All_mode+0x4fc>)
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <All_mode+0x4f0>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b8d      	ldr	r3, [pc, #564]	; (8000d84 <All_mode+0x4f4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b8d      	ldr	r3, [pc, #564]	; (8000d90 <All_mode+0x500>)
 8000b5a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000b5c:	4b8a      	ldr	r3, [pc, #552]	; (8000d88 <All_mode+0x4f8>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b8b      	ldr	r3, [pc, #556]	; (8000d90 <All_mode+0x500>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 81b2 	bne.w	8000ece <All_mode+0x63e>
						M_state = 5;
 8000b6a:	4b8a      	ldr	r3, [pc, #552]	; (8000d94 <All_mode+0x504>)
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000b70:	2202      	movs	r2, #2
 8000b72:	4989      	ldr	r1, [pc, #548]	; (8000d98 <All_mode+0x508>)
 8000b74:	4889      	ldr	r0, [pc, #548]	; (8000d9c <All_mode+0x50c>)
 8000b76:	f002 f811 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000b7a:	4b89      	ldr	r3, [pc, #548]	; (8000da0 <All_mode+0x510>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000b80:	4b7e      	ldr	r3, [pc, #504]	; (8000d7c <All_mode+0x4ec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
					break;
 8000b86:	e1a2      	b.n	8000ece <All_mode+0x63e>
					if (dataFN == 2){
 8000b88:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <All_mode+0x4ec>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d103      	bne.n	8000b98 <All_mode+0x308>
						dataF1 = DataIn;
 8000b90:	893b      	ldrh	r3, [r7, #8]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b7a      	ldr	r3, [pc, #488]	; (8000d80 <All_mode+0x4f0>)
 8000b96:	701a      	strb	r2, [r3, #0]
					if(dataFN == 3){
 8000b98:	4b78      	ldr	r3, [pc, #480]	; (8000d7c <All_mode+0x4ec>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d103      	bne.n	8000ba8 <All_mode+0x318>
						dataF2 = DataIn;
 8000ba0:	893b      	ldrh	r3, [r7, #8]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <All_mode+0x4f4>)
 8000ba6:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000ba8:	893b      	ldrh	r3, [r7, #8]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b76      	ldr	r3, [pc, #472]	; (8000d88 <All_mode+0x4f8>)
 8000bae:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000bb0:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <All_mode+0x4fc>)
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	4b72      	ldr	r3, [pc, #456]	; (8000d80 <All_mode+0x4f0>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b71      	ldr	r3, [pc, #452]	; (8000d84 <All_mode+0x4f4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b71      	ldr	r3, [pc, #452]	; (8000d90 <All_mode+0x500>)
 8000bca:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000bcc:	4b6e      	ldr	r3, [pc, #440]	; (8000d88 <All_mode+0x4f8>)
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	4b6f      	ldr	r3, [pc, #444]	; (8000d90 <All_mode+0x500>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f040 817c 	bne.w	8000ed2 <All_mode+0x642>
						M_state = 6;
 8000bda:	4b6e      	ldr	r3, [pc, #440]	; (8000d94 <All_mode+0x504>)
 8000bdc:	2206      	movs	r2, #6
 8000bde:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000be0:	2202      	movs	r2, #2
 8000be2:	496d      	ldr	r1, [pc, #436]	; (8000d98 <All_mode+0x508>)
 8000be4:	486d      	ldr	r0, [pc, #436]	; (8000d9c <All_mode+0x50c>)
 8000be6:	f001 ffd9 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000bea:	4b6d      	ldr	r3, [pc, #436]	; (8000da0 <All_mode+0x510>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000bf0:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <All_mode+0x4ec>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
					break;
 8000bf6:	e16c      	b.n	8000ed2 <All_mode+0x642>
					if (dataFN == 2){
 8000bf8:	4b60      	ldr	r3, [pc, #384]	; (8000d7c <All_mode+0x4ec>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d103      	bne.n	8000c08 <All_mode+0x378>
						Nstation = DataIn;
 8000c00:	893b      	ldrh	r3, [r7, #8]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b67      	ldr	r3, [pc, #412]	; (8000da4 <All_mode+0x514>)
 8000c06:	701a      	strb	r2, [r3, #0]
					if (dataFN < Nstation + 3){
 8000c08:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <All_mode+0x514>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	4a5b      	ldr	r2, [pc, #364]	; (8000d7c <All_mode+0x4ec>)
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	4293      	cmp	r3, r2
 8000c14:	db15      	blt.n	8000c42 <All_mode+0x3b2>
						if (dataFN == countN + 3){
 8000c16:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <All_mode+0x4ec>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b62      	ldr	r3, [pc, #392]	; (8000da8 <All_mode+0x518>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3303      	adds	r3, #3
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d10d      	bne.n	8000c42 <All_mode+0x3b2>
							dataFSum += DataIn;
 8000c26:	893b      	ldrh	r3, [r7, #8]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b60      	ldr	r3, [pc, #384]	; (8000dac <All_mode+0x51c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <All_mode+0x51c>)
 8000c34:	701a      	strb	r2, [r3, #0]
							countN += 1;
 8000c36:	4b5c      	ldr	r3, [pc, #368]	; (8000da8 <All_mode+0x518>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b5a      	ldr	r3, [pc, #360]	; (8000da8 <All_mode+0x518>)
 8000c40:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000c42:	893b      	ldrh	r3, [r7, #8]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <All_mode+0x4f8>)
 8000c48:	701a      	strb	r2, [r3, #0]
					chksum3 = ~(StartM + Nstation + dataFSum);
 8000c4a:	4b50      	ldr	r3, [pc, #320]	; (8000d8c <All_mode+0x4fc>)
 8000c4c:	781a      	ldrb	r2, [r3, #0]
 8000c4e:	4b55      	ldr	r3, [pc, #340]	; (8000da4 <All_mode+0x514>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b55      	ldr	r3, [pc, #340]	; (8000dac <All_mode+0x51c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <All_mode+0x520>)
 8000c64:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum3){
 8000c66:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <All_mode+0x4f8>)
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	4b51      	ldr	r3, [pc, #324]	; (8000db0 <All_mode+0x520>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	f040 8131 	bne.w	8000ed6 <All_mode+0x646>
						M_state = 7;
 8000c74:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <All_mode+0x504>)
 8000c76:	2207      	movs	r2, #7
 8000c78:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4946      	ldr	r1, [pc, #280]	; (8000d98 <All_mode+0x508>)
 8000c7e:	4847      	ldr	r0, [pc, #284]	; (8000d9c <All_mode+0x50c>)
 8000c80:	f001 ff8c 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000c84:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <All_mode+0x510>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <All_mode+0x4ec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
						countN = 0;
 8000c90:	4b45      	ldr	r3, [pc, #276]	; (8000da8 <All_mode+0x518>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
					break;
 8000c96:	e11e      	b.n	8000ed6 <All_mode+0x646>
					chksum = DataIn;
 8000c98:	893b      	ldrh	r3, [r7, #8]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <All_mode+0x4f8>)
 8000c9e:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000ca0:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <All_mode+0x4fc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <All_mode+0x524>)
 8000caa:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <All_mode+0x4f8>)
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <All_mode+0x524>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8110 	bne.w	8000eda <All_mode+0x64a>
						M_state = 8;
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <All_mode+0x504>)
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	4935      	ldr	r1, [pc, #212]	; (8000d98 <All_mode+0x508>)
 8000cc4:	4835      	ldr	r0, [pc, #212]	; (8000d9c <All_mode+0x50c>)
 8000cc6:	f001 ff69 	bl	8002b9c <HAL_UART_Transmit_DMA>
						HAL_Delay(1000);
 8000cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cce:	f000 fb3b 	bl	8001348 <HAL_Delay>
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_f, 2);//Fn
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	4938      	ldr	r1, [pc, #224]	; (8000db8 <All_mode+0x528>)
 8000cd6:	4831      	ldr	r0, [pc, #196]	; (8000d9c <All_mode+0x50c>)
 8000cd8:	f001 ff60 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <All_mode+0x510>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <All_mode+0x4ec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
					break;
 8000ce8:	e0f7      	b.n	8000eda <All_mode+0x64a>
					chksum = DataIn;
 8000cea:	893b      	ldrh	r3, [r7, #8]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <All_mode+0x4f8>)
 8000cf0:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <All_mode+0x4fc>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <All_mode+0x524>)
 8000cfc:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <All_mode+0x4f8>)
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <All_mode+0x524>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	f040 80e9 	bne.w	8000ede <All_mode+0x64e>
						M_state = 9;
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <All_mode+0x504>)
 8000d0e:	2209      	movs	r2, #9
 8000d10:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000d12:	2202      	movs	r2, #2
 8000d14:	4920      	ldr	r1, [pc, #128]	; (8000d98 <All_mode+0x508>)
 8000d16:	4821      	ldr	r0, [pc, #132]	; (8000d9c <All_mode+0x50c>)
 8000d18:	f001 ff40 	bl	8002b9c <HAL_UART_Transmit_DMA>
						HAL_Delay(1000);
 8000d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d20:	f000 fb12 	bl	8001348 <HAL_Delay>
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)DataTran, 4);
 8000d24:	2204      	movs	r2, #4
 8000d26:	4925      	ldr	r1, [pc, #148]	; (8000dbc <All_mode+0x52c>)
 8000d28:	481c      	ldr	r0, [pc, #112]	; (8000d9c <All_mode+0x50c>)
 8000d2a:	f001 ff37 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <All_mode+0x510>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <All_mode+0x4ec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
					break;
 8000d3a:	e0d0      	b.n	8000ede <All_mode+0x64e>
					chksum = DataIn;
 8000d3c:	893b      	ldrh	r3, [r7, #8]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <All_mode+0x4f8>)
 8000d42:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <All_mode+0x4fc>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <All_mode+0x524>)
 8000d4e:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <All_mode+0x4f8>)
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <All_mode+0x524>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 80c2 	bne.w	8000ee2 <All_mode+0x652>
						M_state = 10;
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <All_mode+0x504>)
 8000d60:	220a      	movs	r2, #10
 8000d62:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000d64:	2202      	movs	r2, #2
 8000d66:	490c      	ldr	r1, [pc, #48]	; (8000d98 <All_mode+0x508>)
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <All_mode+0x50c>)
 8000d6a:	f001 ff17 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <All_mode+0x510>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <All_mode+0x4ec>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
					break;
 8000d7a:	e0b2      	b.n	8000ee2 <All_mode+0x652>
 8000d7c:	2000009b 	.word	0x2000009b
 8000d80:	20000297 	.word	0x20000297
 8000d84:	200002e0 	.word	0x200002e0
 8000d88:	2000029a 	.word	0x2000029a
 8000d8c:	20000228 	.word	0x20000228
 8000d90:	20000295 	.word	0x20000295
 8000d94:	20000098 	.word	0x20000098
 8000d98:	20000004 	.word	0x20000004
 8000d9c:	2000029c 	.word	0x2000029c
 8000da0:	2000009a 	.word	0x2000009a
 8000da4:	20000294 	.word	0x20000294
 8000da8:	2000009c 	.word	0x2000009c
 8000dac:	20000299 	.word	0x20000299
 8000db0:	20000230 	.word	0x20000230
 8000db4:	20000298 	.word	0x20000298
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
					chksum = DataIn;
 8000dc0:	893b      	ldrh	r3, [r7, #8]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <All_mode+0x668>)
 8000dc6:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000dc8:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <All_mode+0x66c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <All_mode+0x670>)
 8000dd2:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000dd4:	4b48      	ldr	r3, [pc, #288]	; (8000ef8 <All_mode+0x668>)
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <All_mode+0x670>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d10d      	bne.n	8000dfc <All_mode+0x56c>
						M_state = 11;
 8000de0:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <All_mode+0x674>)
 8000de2:	220b      	movs	r2, #11
 8000de4:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000de6:	2202      	movs	r2, #2
 8000de8:	4947      	ldr	r1, [pc, #284]	; (8000f08 <All_mode+0x678>)
 8000dea:	4848      	ldr	r0, [pc, #288]	; (8000f0c <All_mode+0x67c>)
 8000dec:	f001 fed6 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000df0:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <All_mode+0x680>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000df6:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <All_mode+0x684>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000dfc:	893b      	ldrh	r3, [r7, #8]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <All_mode+0x668>)
 8000e02:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000e04:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <All_mode+0x66c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <All_mode+0x670>)
 8000e0e:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <All_mode+0x668>)
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <All_mode+0x670>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d164      	bne.n	8000ee6 <All_mode+0x656>
						M_state = 12;
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <All_mode+0x674>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2, 1000);
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	2202      	movs	r2, #2
 8000e28:	4937      	ldr	r1, [pc, #220]	; (8000f08 <All_mode+0x678>)
 8000e2a:	4838      	ldr	r0, [pc, #224]	; (8000f0c <All_mode+0x67c>)
 8000e2c:	f001 fe23 	bl	8002a76 <HAL_UART_Transmit>
						chkM = 0;
 8000e30:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <All_mode+0x680>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000e36:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <All_mode+0x684>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
					break;
 8000e3c:	e053      	b.n	8000ee6 <All_mode+0x656>
					chksum = DataIn;
 8000e3e:	893b      	ldrh	r3, [r7, #8]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <All_mode+0x668>)
 8000e44:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <All_mode+0x66c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <All_mode+0x670>)
 8000e50:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <All_mode+0x668>)
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <All_mode+0x670>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d145      	bne.n	8000eea <All_mode+0x65a>
						M_state = 13;
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <All_mode+0x674>)
 8000e60:	220d      	movs	r2, #13
 8000e62:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2, 1000);
 8000e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4927      	ldr	r1, [pc, #156]	; (8000f08 <All_mode+0x678>)
 8000e6c:	4827      	ldr	r0, [pc, #156]	; (8000f0c <All_mode+0x67c>)
 8000e6e:	f001 fe02 	bl	8002a76 <HAL_UART_Transmit>
						chkM = 0;
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <All_mode+0x680>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000e78:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <All_mode+0x684>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
					break;
 8000e7e:	e034      	b.n	8000eea <All_mode+0x65a>
					chksum = DataIn;
 8000e80:	893b      	ldrh	r3, [r7, #8]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <All_mode+0x668>)
 8000e86:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <All_mode+0x66c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <All_mode+0x670>)
 8000e92:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <All_mode+0x668>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <All_mode+0x670>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d126      	bne.n	8000eee <All_mode+0x65e>
						M_state = 14;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <All_mode+0x674>)
 8000ea2:	220e      	movs	r2, #14
 8000ea4:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4917      	ldr	r1, [pc, #92]	; (8000f08 <All_mode+0x678>)
 8000eaa:	4818      	ldr	r0, [pc, #96]	; (8000f0c <All_mode+0x67c>)
 8000eac:	f001 fe76 	bl	8002b9c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <All_mode+0x680>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <All_mode+0x684>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
					break;
 8000ebc:	e017      	b.n	8000eee <All_mode+0x65e>
					break;
 8000ebe:	bf00      	nop
 8000ec0:	e016      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000ec2:	bf00      	nop
 8000ec4:	e014      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000ec6:	bf00      	nop
 8000ec8:	e012      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000eca:	bf00      	nop
 8000ecc:	e010      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000ece:	bf00      	nop
 8000ed0:	e00e      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000ed2:	bf00      	nop
 8000ed4:	e00c      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000ed6:	bf00      	nop
 8000ed8:	e00a      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000eda:	bf00      	nop
 8000edc:	e008      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000ede:	bf00      	nop
 8000ee0:	e006      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000ee2:	bf00      	nop
 8000ee4:	e004      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000ee6:	bf00      	nop
 8000ee8:	e002      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <All_mode+0x660>
					break;
 8000eee:	bf00      	nop
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000029a 	.word	0x2000029a
 8000efc:	20000228 	.word	0x20000228
 8000f00:	20000298 	.word	0x20000298
 8000f04:	20000098 	.word	0x20000098
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	2000029c 	.word	0x2000029c
 8000f10:	2000009a 	.word	0x2000009a
 8000f14:	2000009b 	.word	0x2000009b

08000f18 <HAL_UART_RxCpltCallback>:
//	N_state = R
//	All_mode();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);//s
	//HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f76:	2007      	movs	r0, #7
 8000f78:	f000 fada 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_UART_MspInit+0x14c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	f040 8090 	bne.w	80010cc <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_UART_MspInit+0x150>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <HAL_UART_MspInit+0x150>)
 8000fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <HAL_UART_MspInit+0x150>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <HAL_UART_MspInit+0x150>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a41      	ldr	r2, [pc, #260]	; (80010d8 <HAL_UART_MspInit+0x150>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <HAL_UART_MspInit+0x150>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4837      	ldr	r0, [pc, #220]	; (80010dc <HAL_UART_MspInit+0x154>)
 8001000:	f000 feda 	bl	8001db8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_UART_MspInit+0x158>)
 8001006:	4a37      	ldr	r2, [pc, #220]	; (80010e4 <HAL_UART_MspInit+0x15c>)
 8001008:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <HAL_UART_MspInit+0x158>)
 800100c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001010:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <HAL_UART_MspInit+0x158>)
 8001014:	2240      	movs	r2, #64	; 0x40
 8001016:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_UART_MspInit+0x158>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_UART_MspInit+0x158>)
 8001020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001024:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_UART_MspInit+0x158>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_UART_MspInit+0x158>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_UART_MspInit+0x158>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_UART_MspInit+0x158>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <HAL_UART_MspInit+0x158>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001044:	4826      	ldr	r0, [pc, #152]	; (80010e0 <HAL_UART_MspInit+0x158>)
 8001046:	f000 fab5 	bl	80015b4 <HAL_DMA_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001050:	f7ff ff6c 	bl	8000f2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_UART_MspInit+0x158>)
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
 800105a:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_UART_MspInit+0x158>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <HAL_UART_MspInit+0x160>)
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <HAL_UART_MspInit+0x164>)
 8001064:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_UART_MspInit+0x160>)
 8001068:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <HAL_UART_MspInit+0x160>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_UART_MspInit+0x160>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_UART_MspInit+0x160>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_UART_MspInit+0x160>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_UART_MspInit+0x160>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_UART_MspInit+0x160>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_UART_MspInit+0x160>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_UART_MspInit+0x160>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010a0:	4811      	ldr	r0, [pc, #68]	; (80010e8 <HAL_UART_MspInit+0x160>)
 80010a2:	f000 fa87 	bl	80015b4 <HAL_DMA_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80010ac:	f7ff ff3e 	bl	8000f2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_UART_MspInit+0x160>)
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <HAL_UART_MspInit+0x160>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f000 fa40 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c6:	2026      	movs	r0, #38	; 0x26
 80010c8:	f000 fa59 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	20000234 	.word	0x20000234
 80010e4:	400260a0 	.word	0x400260a0
 80010e8:	200001c8 	.word	0x200001c8
 80010ec:	40026088 	.word	0x40026088

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 f8e4 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <DMA1_Stream5_IRQHandler+0x10>)
 800114a:	f000 fbcb 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001c8 	.word	0x200001c8

08001158 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <DMA1_Stream6_IRQHandler+0x10>)
 800115e:	f000 fbc1 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000234 	.word	0x20000234

0800116c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <USART2_IRQHandler+0x10>)
 8001172:	f001 fdc1 	bl	8002cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000029c 	.word	0x2000029c

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f002 fe52 	bl	8003e58 <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20020000 	.word	0x20020000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	200001b8 	.word	0x200001b8
 80011e8:	200002f8 	.word	0x200002f8

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001216:	490e      	ldr	r1, [pc, #56]	; (8001250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800122c:	4c0b      	ldr	r4, [pc, #44]	; (800125c <LoopFillZerobss+0x26>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800123a:	f7ff ffd7 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123e:	f002 fe11 	bl	8003e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001242:	f7ff f945 	bl	80004d0 <main>
  bx  lr    
 8001246:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001248:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001254:	08004014 	.word	0x08004014
  ldr r2, =_sbss
 8001258:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800125c:	200002f8 	.word	0x200002f8

08001260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_Init+0x40>)
 800126e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_Init+0x40>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_Init+0x40>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f94f 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fe4e 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f967 	bl	800159a <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 f92f 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	20000014 	.word	0x20000014
 8001304:	20000010 	.word	0x20000010

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000014 	.word	0x20000014
 800132c:	200002e4 	.word	0x200002e4

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200002e4 	.word	0x200002e4

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000014 	.word	0x20000014

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff feb6 	bl	8001330 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e099      	b.n	8001704 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f0:	e00f      	b.n	8001612 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f2:	f7ff fe9d 	bl	8001330 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d908      	bls.n	8001612 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e078      	b.n	8001704 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e8      	bne.n	80015f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_DMA_Init+0x158>)
 800162c:	4013      	ands	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4313      	orrs	r3, r2
 8001662:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	2b04      	cmp	r3, #4
 800166a:	d107      	bne.n	800167c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	4313      	orrs	r3, r2
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f023 0307 	bic.w	r3, r3, #7
 8001692:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d117      	bne.n	80016d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00e      	beq.n	80016d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fb01 	bl	8001cc0 <DMA_CheckFifoParam>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016d2:	2301      	movs	r3, #1
 80016d4:	e016      	b.n	8001704 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 fab8 	bl	8001c54 <DMA_CalcBaseAndBitshift>
 80016e4:	4603      	mov	r3, r0
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	223f      	movs	r2, #63	; 0x3f
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	f010803f 	.word	0xf010803f

08001710 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_DMA_Start_IT+0x26>
 8001732:	2302      	movs	r3, #2
 8001734:	e040      	b.n	80017b8 <HAL_DMA_Start_IT+0xa8>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d12f      	bne.n	80017aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2202      	movs	r2, #2
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 fa4a 	bl	8001bf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001768:	223f      	movs	r2, #63	; 0x3f
 800176a:	409a      	lsls	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0216 	orr.w	r2, r2, #22
 800177e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0208 	orr.w	r2, r2, #8
 8001796:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e005      	b.n	80017b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017b2:	2302      	movs	r3, #2
 80017b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017ce:	f7ff fdaf 	bl	8001330 <HAL_GetTick>
 80017d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d008      	beq.n	80017f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e052      	b.n	8001898 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0216 	bic.w	r2, r2, #22
 8001800:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001810:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <HAL_DMA_Abort+0x62>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0208 	bic.w	r2, r2, #8
 8001830:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001842:	e013      	b.n	800186c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001844:	f7ff fd74 	bl	8001330 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b05      	cmp	r3, #5
 8001850:	d90c      	bls.n	800186c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2220      	movs	r2, #32
 8001856:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e015      	b.n	8001898 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e4      	bne.n	8001844 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187e:	223f      	movs	r2, #63	; 0x3f
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d004      	beq.n	80018be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00c      	b.n	80018d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2205      	movs	r2, #5
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018f0:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <HAL_DMA_IRQHandler+0x258>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a92      	ldr	r2, [pc, #584]	; (8001b40 <HAL_DMA_IRQHandler+0x25c>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2208      	movs	r2, #8
 8001910:	409a      	lsls	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01a      	beq.n	8001950 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0204 	bic.w	r2, r2, #4
 8001936:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2208      	movs	r2, #8
 800193e:	409a      	lsls	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2201      	movs	r2, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2201      	movs	r2, #1
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2204      	movs	r2, #4
 800198c:	409a      	lsls	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d012      	beq.n	80019bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2204      	movs	r2, #4
 80019aa:	409a      	lsls	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f043 0204 	orr.w	r2, r3, #4
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2210      	movs	r2, #16
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d043      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d03c      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2210      	movs	r2, #16
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d018      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d024      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
 8001a12:	e01f      	b.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01b      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
 8001a24:	e016      	b.n	8001a54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d107      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0208 	bic.w	r2, r2, #8
 8001a42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2220      	movs	r2, #32
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 808e 	beq.w	8001b82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8086 	beq.w	8001b82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d136      	bne.n	8001afc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0216 	bic.w	r2, r2, #22
 8001a9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_DMA_IRQHandler+0x1da>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0208 	bic.w	r2, r2, #8
 8001acc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	223f      	movs	r2, #63	; 0x3f
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d07d      	beq.n	8001bee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
        }
        return;
 8001afa:	e078      	b.n	8001bee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01c      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d030      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
 8001b28:	e02b      	b.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d027      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
 8001b3a:	e022      	b.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0210 	bic.w	r2, r2, #16
 8001b60:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d032      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2205      	movs	r2, #5
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d307      	bcc.n	8001bca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f2      	bne.n	8001bae <HAL_DMA_IRQHandler+0x2ca>
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
 8001bec:	e000      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bee:	bf00      	nop
    }
  }
}
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop

08001bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d108      	bne.n	8001c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c36:	e007      	b.n	8001c48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3b10      	subs	r3, #16
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <DMA_CalcBaseAndBitshift+0x68>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d909      	bls.n	8001c96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c8a:	f023 0303 	bic.w	r3, r3, #3
 8001c8e:	1d1a      	adds	r2, r3, #4
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	659a      	str	r2, [r3, #88]	; 0x58
 8001c94:	e007      	b.n	8001ca6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	aaaaaaab 	.word	0xaaaaaaab
 8001cbc:	08003ffc 	.word	0x08003ffc

08001cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d11f      	bne.n	8001d1a <DMA_CheckFifoParam+0x5a>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d856      	bhi.n	8001d8e <DMA_CheckFifoParam+0xce>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <DMA_CheckFifoParam+0x28>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001cf9 	.word	0x08001cf9
 8001cec:	08001d0b 	.word	0x08001d0b
 8001cf0:	08001cf9 	.word	0x08001cf9
 8001cf4:	08001d8f 	.word	0x08001d8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d046      	beq.n	8001d92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d08:	e043      	b.n	8001d92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d12:	d140      	bne.n	8001d96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d18:	e03d      	b.n	8001d96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d22:	d121      	bne.n	8001d68 <DMA_CheckFifoParam+0xa8>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d837      	bhi.n	8001d9a <DMA_CheckFifoParam+0xda>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <DMA_CheckFifoParam+0x70>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001d41 	.word	0x08001d41
 8001d34:	08001d47 	.word	0x08001d47
 8001d38:	08001d41 	.word	0x08001d41
 8001d3c:	08001d59 	.word	0x08001d59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      break;
 8001d44:	e030      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d025      	beq.n	8001d9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d56:	e022      	b.n	8001d9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d60:	d11f      	bne.n	8001da2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d66:	e01c      	b.n	8001da2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d903      	bls.n	8001d76 <DMA_CheckFifoParam+0xb6>
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d003      	beq.n	8001d7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d74:	e018      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
      break;
 8001d7a:	e015      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d8c:	e00b      	b.n	8001da6 <DMA_CheckFifoParam+0xe6>
      break;
 8001d8e:	bf00      	nop
 8001d90:	e00a      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
      break;
 8001d92:	bf00      	nop
 8001d94:	e008      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
      break;
 8001d96:	bf00      	nop
 8001d98:	e006      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9a:	bf00      	nop
 8001d9c:	e004      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e002      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001da2:	bf00      	nop
 8001da4:	e000      	b.n	8001da8 <DMA_CheckFifoParam+0xe8>
      break;
 8001da6:	bf00      	nop
    }
  } 
  
  return status; 
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e159      	b.n	8002088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 8148 	bne.w	8002082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d130      	bne.n	8001e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 0201 	and.w	r2, r3, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d017      	beq.n	8001ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d123      	bne.n	8001efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	69b9      	ldr	r1, [r7, #24]
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a2 	beq.w	8002082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a56      	ldr	r2, [pc, #344]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5a:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d019      	beq.n	8001fba <HAL_GPIO_Init+0x202>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2f4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0x1fe>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_GPIO_Init+0x2f8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00d      	beq.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a46      	ldr	r2, [pc, #280]	; (80020b4 <HAL_GPIO_Init+0x2fc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <HAL_GPIO_Init+0x1f6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a45      	ldr	r2, [pc, #276]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_GPIO_Init+0x1f2>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e008      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001faa:	2307      	movs	r3, #7
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e004      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f002 0203 	and.w	r2, r2, #3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fcc:	4935      	ldr	r1, [pc, #212]	; (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_GPIO_Init+0x304>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_GPIO_Init+0x304>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_GPIO_Init+0x304>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_GPIO_Init+0x304>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b0f      	cmp	r3, #15
 800208c:	f67f aea2 	bls.w	8001dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020c00 	.word	0x40020c00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40013c00 	.word	0x40013c00

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	041a      	lsls	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	619a      	str	r2, [r3, #24]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e264      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d075      	beq.n	80021fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002112:	4ba3      	ldr	r3, [pc, #652]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b04      	cmp	r3, #4
 800211c:	d00c      	beq.n	8002138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4ba0      	ldr	r3, [pc, #640]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002126:	2b08      	cmp	r3, #8
 8002128:	d112      	bne.n	8002150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4b9d      	ldr	r3, [pc, #628]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002136:	d10b      	bne.n	8002150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d05b      	beq.n	80021fc <HAL_RCC_OscConfig+0x108>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d157      	bne.n	80021fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e23f      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x74>
 800215a:	4b91      	ldr	r3, [pc, #580]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a90      	ldr	r2, [pc, #576]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xb0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x98>
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a8a      	ldr	r2, [pc, #552]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a87      	ldr	r2, [pc, #540]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xb0>
 800218c:	4b84      	ldr	r3, [pc, #528]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a83      	ldr	r2, [pc, #524]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a80      	ldr	r2, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff f8c0 	bl	8001330 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff f8bc 	bl	8001330 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e204      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b76      	ldr	r3, [pc, #472]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xc0>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff f8ac 	bl	8001330 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff f8a8 	bl	8001330 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1f0      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b6c      	ldr	r3, [pc, #432]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0xe8>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b5c      	ldr	r3, [pc, #368]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x152>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1c4      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4952      	ldr	r1, [pc, #328]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b4f      	ldr	r3, [pc, #316]	; (80023a4 <HAL_RCC_OscConfig+0x2b0>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7ff f861 	bl	8001330 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002272:	f7ff f85d 	bl	8001330 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1a5      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4940      	ldr	r1, [pc, #256]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_OscConfig+0x2b0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff f840 	bl	8001330 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff f83c 	bl	8001330 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e184      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d030      	beq.n	8002340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x2b4>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff f820 	bl	8001330 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff f81c 	bl	8001330 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e164      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x200>
 8002312:	e015      	b.n	8002340 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCC_OscConfig+0x2b4>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7ff f809 	bl	8001330 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002322:	f7ff f805 	bl	8001330 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e14d      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a0 	beq.w	800248e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x2b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d121      	bne.n	80023ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCC_OscConfig+0x2b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_RCC_OscConfig+0x2b8>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7fe ffcb 	bl	8001330 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e011      	b.n	80023c2 <HAL_RCC_OscConfig+0x2ce>
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470000 	.word	0x42470000
 80023a8:	42470e80 	.word	0x42470e80
 80023ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b0:	f7fe ffbe 	bl	8001330 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e106      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_RCC_OscConfig+0x4e4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
 80023d6:	4b81      	ldr	r3, [pc, #516]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a80      	ldr	r2, [pc, #512]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
 80023e2:	e01c      	b.n	800241e <HAL_RCC_OscConfig+0x32a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_OscConfig+0x312>
 80023ec:	4b7b      	ldr	r3, [pc, #492]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a7a      	ldr	r2, [pc, #488]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	4b78      	ldr	r3, [pc, #480]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a77      	ldr	r2, [pc, #476]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0x32a>
 8002406:	4b75      	ldr	r3, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a74      	ldr	r2, [pc, #464]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	4b72      	ldr	r3, [pc, #456]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a71      	ldr	r2, [pc, #452]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7fe ff83 	bl	8001330 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe ff7f 	bl	8001330 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0c5      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCC_OscConfig+0x33a>
 8002450:	e014      	b.n	800247c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe ff6d 	bl	8001330 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe ff69 	bl	8001330 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0af      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a55      	ldr	r2, [pc, #340]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 809b 	beq.w	80025ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d05c      	beq.n	800255e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d141      	bne.n	8002530 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <HAL_RCC_OscConfig+0x4ec>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe ff3d 	bl	8001330 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe ff39 	bl	8001330 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e081      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	019b      	lsls	r3, r3, #6
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	3b01      	subs	r3, #1
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	4937      	ldr	r1, [pc, #220]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_RCC_OscConfig+0x4ec>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe ff12 	bl	8001330 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe ff0e 	bl	8001330 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e056      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x41c>
 800252e:	e04e      	b.n	80025ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x4ec>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe fefb 	bl	8001330 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fef7 	bl	8001330 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e03f      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x44a>
 800255c:	e037      	b.n	80025ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e032      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d028      	beq.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d121      	bne.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d11a      	bne.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d111      	bne.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	3b01      	subs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40007000 	.word	0x40007000
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470060 	.word	0x42470060

080025e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0cc      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b68      	ldr	r3, [pc, #416]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d90c      	bls.n	8002620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b65      	ldr	r3, [pc, #404]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b63      	ldr	r3, [pc, #396]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0b8      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002638:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002650:	4b53      	ldr	r3, [pc, #332]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a52      	ldr	r2, [pc, #328]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800265a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	494d      	ldr	r1, [pc, #308]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d044      	beq.n	8002704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d119      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e07f      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06f      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e067      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4934      	ldr	r1, [pc, #208]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fe2c 	bl	8001330 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7fe fe28 	bl	8001330 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e04f      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 020c 	and.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1eb      	bne.n	80026dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d20c      	bcs.n	800272c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e032      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4916      	ldr	r1, [pc, #88]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	490e      	ldr	r1, [pc, #56]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800276a:	f000 f821 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800276e:	4602      	mov	r2, r0
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	490a      	ldr	r1, [pc, #40]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	5ccb      	ldrb	r3, [r1, r3]
 800277e:	fa22 f303 	lsr.w	r3, r2, r3
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fd8c 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023c00 	.word	0x40023c00
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08003fe4 	.word	0x08003fe4
 80027a8:	2000000c 	.word	0x2000000c
 80027ac:	20000010 	.word	0x20000010

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	2300      	movs	r3, #0
 80027c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027c8:	4b67      	ldr	r3, [pc, #412]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d00d      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x40>
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	f200 80bd 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x34>
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x3a>
 80027e2:	e0b7      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027e6:	60bb      	str	r3, [r7, #8]
       break;
 80027e8:	e0b7      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ea:	4b61      	ldr	r3, [pc, #388]	; (8002970 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027ec:	60bb      	str	r3, [r7, #8]
      break;
 80027ee:	e0b4      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f0:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027fa:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d04d      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002806:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	461a      	mov	r2, r3
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	ea02 0800 	and.w	r8, r2, r0
 800281e:	ea03 0901 	and.w	r9, r3, r1
 8002822:	4640      	mov	r0, r8
 8002824:	4649      	mov	r1, r9
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	014b      	lsls	r3, r1, #5
 8002830:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002834:	0142      	lsls	r2, r0, #5
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	ebb0 0008 	subs.w	r0, r0, r8
 800283e:	eb61 0109 	sbc.w	r1, r1, r9
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	018b      	lsls	r3, r1, #6
 800284c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002850:	0182      	lsls	r2, r0, #6
 8002852:	1a12      	subs	r2, r2, r0
 8002854:	eb63 0301 	sbc.w	r3, r3, r1
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	00d9      	lsls	r1, r3, #3
 8002862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002866:	00d0      	lsls	r0, r2, #3
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	eb12 0208 	adds.w	r2, r2, r8
 8002870:	eb43 0309 	adc.w	r3, r3, r9
 8002874:	f04f 0000 	mov.w	r0, #0
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	0259      	lsls	r1, r3, #9
 800287e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002882:	0250      	lsls	r0, r2, #9
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	461a      	mov	r2, r3
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	f7fd fca0 	bl	80001d8 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4613      	mov	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e04a      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	461a      	mov	r2, r3
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	ea02 0400 	and.w	r4, r2, r0
 80028ba:	ea03 0501 	and.w	r5, r3, r1
 80028be:	4620      	mov	r0, r4
 80028c0:	4629      	mov	r1, r5
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	014b      	lsls	r3, r1, #5
 80028cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028d0:	0142      	lsls	r2, r0, #5
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	1b00      	subs	r0, r0, r4
 80028d8:	eb61 0105 	sbc.w	r1, r1, r5
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	018b      	lsls	r3, r1, #6
 80028e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028ea:	0182      	lsls	r2, r0, #6
 80028ec:	1a12      	subs	r2, r2, r0
 80028ee:	eb63 0301 	sbc.w	r3, r3, r1
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	00d9      	lsls	r1, r3, #3
 80028fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002900:	00d0      	lsls	r0, r2, #3
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	1912      	adds	r2, r2, r4
 8002908:	eb45 0303 	adc.w	r3, r5, r3
 800290c:	f04f 0000 	mov.w	r0, #0
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	0299      	lsls	r1, r3, #10
 8002916:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800291a:	0290      	lsls	r0, r2, #10
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	461a      	mov	r2, r3
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	f7fd fc54 	bl	80001d8 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	60bb      	str	r3, [r7, #8]
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002956:	60bb      	str	r3, [r7, #8]
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	68bb      	ldr	r3, [r7, #8]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400
 8002970:	007a1200 	.word	0x007a1200

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	2000000c 	.word	0x2000000c

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff fff0 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0a9b      	lsrs	r3, r3, #10
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08003ff4 	.word	0x08003ff4

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff ffdc 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	0b5b      	lsrs	r3, r3, #13
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	08003ff4 	.word	0x08003ff4

080029dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e03f      	b.n	8002a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe fac0 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f001 f849 	bl	8003ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08a      	sub	sp, #40	; 0x28
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d17c      	bne.n	8002b90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Transmit+0x2c>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e075      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Transmit+0x3e>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e06e      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aca:	f7fe fc31 	bl	8001330 <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae4:	d108      	bne.n	8002af8 <HAL_UART_Transmit+0x82>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e003      	b.n	8002b00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b08:	e02a      	b.n	8002b60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fd04 	bl	8003522 <UART_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e036      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e007      	b.n	8002b52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1cf      	bne.n	8002b0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fcd4 	bl	8003522 <UART_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d165      	bne.n	8002c82 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_UART_Transmit_DMA+0x26>
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e05e      	b.n	8002c84 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_UART_Transmit_DMA+0x38>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e057      	b.n	8002c84 <HAL_UART_Transmit_DMA+0xe8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2221      	movs	r2, #33	; 0x21
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <HAL_UART_Transmit_DMA+0xf0>)
 8002c02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	4a21      	ldr	r2, [pc, #132]	; (8002c90 <HAL_UART_Transmit_DMA+0xf4>)
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	4a20      	ldr	r2, [pc, #128]	; (8002c94 <HAL_UART_Transmit_DMA+0xf8>)
 8002c12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	2200      	movs	r2, #0
 8002c1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002c1c:	f107 0308 	add.w	r3, r7, #8
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	461a      	mov	r2, r3
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	f7fe fd6c 	bl	8001710 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c40:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	617b      	str	r3, [r7, #20]
   return(result);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3314      	adds	r3, #20
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	627a      	str	r2, [r7, #36]	; 0x24
 8002c6c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6a39      	ldr	r1, [r7, #32]
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e5      	bne.n	8002c4a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3730      	adds	r7, #48	; 0x30
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	0800327d 	.word	0x0800327d
 8002c90:	08003317 	.word	0x08003317
 8002c94:	0800348f 	.word	0x0800348f

08002c98 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d11d      	bne.n	8002cee <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_UART_Receive_DMA+0x26>
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e016      	b.n	8002cf0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_UART_Receive_DMA+0x38>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e00f      	b.n	8002cf0 <HAL_UART_Receive_DMA+0x58>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fc8b 	bl	8003600 <UART_Start_Receive_DMA>
 8002cea:	4603      	mov	r3, r0
 8002cec:	e000      	b.n	8002cf0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0ba      	sub	sp, #232	; 0xe8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10f      	bne.n	8002d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_UART_IRQHandler+0x66>
 8002d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fdf3 	bl	8003942 <UART_Receive_IT>
      return;
 8002d5c:	e256      	b.n	800320c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80de 	beq.w	8002f24 <HAL_UART_IRQHandler+0x22c>
 8002d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d106      	bne.n	8002d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80d1 	beq.w	8002f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_UART_IRQHandler+0xae>
 8002d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_UART_IRQHandler+0xd2>
 8002db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_UART_IRQHandler+0xf6>
 8002dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0204 	orr.w	r2, r3, #4
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d011      	beq.n	8002e1e <HAL_UART_IRQHandler+0x126>
 8002dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0208 	orr.w	r2, r3, #8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 81ed 	beq.w	8003202 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_UART_IRQHandler+0x14e>
 8002e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fd7e 	bl	8003942 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_UART_IRQHandler+0x17a>
 8002e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d04f      	beq.n	8002f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fc86 	bl	8003784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d141      	bne.n	8002f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3314      	adds	r3, #20
 8002eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1d9      	bne.n	8002e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d013      	beq.n	8002f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	4a7d      	ldr	r2, [pc, #500]	; (80030d4 <HAL_UART_IRQHandler+0x3dc>)
 8002ee0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fcda 	bl	80018a0 <HAL_DMA_Abort_IT>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002efc:	4610      	mov	r0, r2
 8002efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	e00e      	b.n	8002f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9a4 	bl	8003250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f08:	e00a      	b.n	8002f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9a0 	bl	8003250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	e006      	b.n	8002f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f99c 	bl	8003250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f1e:	e170      	b.n	8003202 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	bf00      	nop
    return;
 8002f22:	e16e      	b.n	8003202 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	f040 814a 	bne.w	80031c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8143 	beq.w	80031c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 813c 	beq.w	80031c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	f040 80b4 	bne.w	80030d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8140 	beq.w	8003206 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	f080 8139 	bcs.w	8003206 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa6:	f000 8088 	beq.w	80030ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1d9      	bne.n	8002faa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3314      	adds	r3, #20
 8003016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800301a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800301e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800302c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e1      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3314      	adds	r3, #20
 8003038:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3314      	adds	r3, #20
 8003052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003058:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800305c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e3      	bne.n	8003032 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308a:	f023 0310 	bic.w	r3, r3, #16
 800308e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	330c      	adds	r3, #12
 8003098:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800309c:	65ba      	str	r2, [r7, #88]	; 0x58
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e3      	bne.n	8003078 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fb83 	bl	80017c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f8ca 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030d0:	e099      	b.n	8003206 <HAL_UART_IRQHandler+0x50e>
 80030d2:	bf00      	nop
 80030d4:	0800384b 	.word	0x0800384b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 808b 	beq.w	800320a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80030f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8086 	beq.w	800320a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003122:	647a      	str	r2, [r7, #68]	; 0x44
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e3      	bne.n	80030fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3314      	adds	r3, #20
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	623b      	str	r3, [r7, #32]
   return(result);
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3314      	adds	r3, #20
 8003156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800315a:	633a      	str	r2, [r7, #48]	; 0x30
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e3      	bne.n	8003136 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	60fb      	str	r3, [r7, #12]
   return(result);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0310 	bic.w	r3, r3, #16
 8003192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031a0:	61fa      	str	r2, [r7, #28]
 80031a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	69b9      	ldr	r1, [r7, #24]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	617b      	str	r3, [r7, #20]
   return(result);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e3      	bne.n	800317c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f852 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031c0:	e023      	b.n	800320a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_UART_IRQHandler+0x4ea>
 80031ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fb49 	bl	8003872 <UART_Transmit_IT>
    return;
 80031e0:	e014      	b.n	800320c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00e      	beq.n	800320c <HAL_UART_IRQHandler+0x514>
 80031ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fb89 	bl	8003912 <UART_EndTransmit_IT>
    return;
 8003200:	e004      	b.n	800320c <HAL_UART_IRQHandler+0x514>
    return;
 8003202:	bf00      	nop
 8003204:	e002      	b.n	800320c <HAL_UART_IRQHandler+0x514>
      return;
 8003206:	bf00      	nop
 8003208:	e000      	b.n	800320c <HAL_UART_IRQHandler+0x514>
      return;
 800320a:	bf00      	nop
  }
}
 800320c:	37e8      	adds	r7, #232	; 0xe8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop

08003214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b090      	sub	sp, #64	; 0x40
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d137      	bne.n	8003308 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329a:	2200      	movs	r2, #0
 800329c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3314      	adds	r3, #20
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	623b      	str	r3, [r7, #32]
   return(result);
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3314      	adds	r3, #20
 80032bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032be:	633a      	str	r2, [r7, #48]	; 0x30
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e5      	bne.n	800329e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
 80032ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f2:	61fa      	str	r2, [r7, #28]
 80032f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f6:	69b9      	ldr	r1, [r7, #24]
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	e841 2300 	strex	r3, r2, [r1]
 80032fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e5      	bne.n	80032d2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003306:	e002      	b.n	800330e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003308:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800330a:	f7ff ff83 	bl	8003214 <HAL_UART_TxCpltCallback>
}
 800330e:	bf00      	nop
 8003310:	3740      	adds	r7, #64	; 0x40
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff ff7f 	bl	8003228 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b09c      	sub	sp, #112	; 0x70
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d172      	bne.n	8003434 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800334e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003350:	2200      	movs	r2, #0
 8003352:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336a:	66bb      	str	r3, [r7, #104]	; 0x68
 800336c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003374:	65ba      	str	r2, [r7, #88]	; 0x58
 8003376:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800337a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e5      	bne.n	8003354 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3314      	adds	r3, #20
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	667b      	str	r3, [r7, #100]	; 0x64
 80033a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3314      	adds	r3, #20
 80033a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80033a8:	647a      	str	r2, [r7, #68]	; 0x44
 80033aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e5      	bne.n	8003388 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3314      	adds	r3, #20
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	623b      	str	r3, [r7, #32]
   return(result);
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d2:	663b      	str	r3, [r7, #96]	; 0x60
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3314      	adds	r3, #20
 80033da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033dc:	633a      	str	r2, [r7, #48]	; 0x30
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d119      	bne.n	8003434 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0310 	bic.w	r3, r3, #16
 8003416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003420:	61fa      	str	r2, [r7, #28]
 8003422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	69b9      	ldr	r1, [r7, #24]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	617b      	str	r3, [r7, #20]
   return(result);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e5      	bne.n	8003400 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003440:	4619      	mov	r1, r3
 8003442:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003444:	f7ff ff0e 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003448:	e002      	b.n	8003450 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800344a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800344c:	f7fd fd64 	bl	8000f18 <HAL_UART_RxCpltCallback>
}
 8003450:	bf00      	nop
 8003452:	3770      	adds	r7, #112	; 0x70
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	2b01      	cmp	r3, #1
 800346c:	d108      	bne.n	8003480 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	b29b      	uxth	r3, r3
 8003476:	4619      	mov	r1, r3
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff fef3 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800347e:	e002      	b.n	8003486 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fedb 	bl	800323c <HAL_UART_RxHalfCpltCallback>
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b21      	cmp	r3, #33	; 0x21
 80034c0:	d108      	bne.n	80034d4 <UART_DMAError+0x46>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2200      	movs	r2, #0
 80034cc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80034ce:	68b8      	ldr	r0, [r7, #8]
 80034d0:	f000 f930 	bl	8003734 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	bf0c      	ite	eq
 80034e2:	2301      	moveq	r3, #1
 80034e4:	2300      	movne	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b22      	cmp	r3, #34	; 0x22
 80034f4:	d108      	bne.n	8003508 <UART_DMAError+0x7a>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003502:	68b8      	ldr	r0, [r7, #8]
 8003504:	f000 f93e 	bl	8003784 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f043 0210 	orr.w	r2, r3, #16
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003514:	68b8      	ldr	r0, [r7, #8]
 8003516:	f7ff fe9b 	bl	8003250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b090      	sub	sp, #64	; 0x40
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003532:	e050      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d04c      	beq.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800353c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x30>
 8003542:	f7fd fef5 	bl	8001330 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354e:	429a      	cmp	r2, r3
 8003550:	d241      	bcs.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003572:	637a      	str	r2, [r7, #52]	; 0x34
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e5      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3314      	adds	r3, #20
 800358c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	613b      	str	r3, [r7, #16]
   return(result);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a6:	623a      	str	r2, [r7, #32]
 80035a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	69f9      	ldr	r1, [r7, #28]
 80035ac:	6a3a      	ldr	r2, [r7, #32]
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e5      	bne.n	8003586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e00f      	b.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d09f      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3740      	adds	r7, #64	; 0x40
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b098      	sub	sp, #96	; 0x60
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	88fa      	ldrh	r2, [r7, #6]
 8003618:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2222      	movs	r2, #34	; 0x22
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <UART_Start_Receive_DMA+0x128>)
 800362e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	4a3d      	ldr	r2, [pc, #244]	; (800372c <UART_Start_Receive_DMA+0x12c>)
 8003636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	4a3c      	ldr	r2, [pc, #240]	; (8003730 <UART_Start_Receive_DMA+0x130>)
 800363e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	2200      	movs	r2, #0
 8003646:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	f7fe f856 	bl	8001710 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	65bb      	str	r3, [r7, #88]	; 0x58
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80036a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80036b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	657b      	str	r3, [r7, #84]	; 0x54
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e5      	bne.n	80036b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3314      	adds	r3, #20
 80036f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	617b      	str	r3, [r7, #20]
   return(result);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003700:	653b      	str	r3, [r7, #80]	; 0x50
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3314      	adds	r3, #20
 8003708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800370a:	627a      	str	r2, [r7, #36]	; 0x24
 800370c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6a39      	ldr	r1, [r7, #32]
 8003710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	61fb      	str	r3, [r7, #28]
   return(result);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e5      	bne.n	80036ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3760      	adds	r7, #96	; 0x60
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	08003333 	.word	0x08003333
 800372c:	08003459 	.word	0x08003459
 8003730:	0800348f 	.word	0x0800348f

08003734 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	60bb      	str	r3, [r7, #8]
   return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	61ba      	str	r2, [r7, #24]
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6979      	ldr	r1, [r7, #20]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	613b      	str	r3, [r7, #16]
   return(result);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003778:	bf00      	nop
 800377a:	3724      	adds	r7, #36	; 0x24
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b095      	sub	sp, #84	; 0x54
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ac:	643a      	str	r2, [r7, #64]	; 0x40
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e5      	bne.n	800378c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3314      	adds	r3, #20
 80037de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d119      	bne.n	8003830 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	60bb      	str	r3, [r7, #8]
   return(result);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 0310 	bic.w	r3, r3, #16
 8003812:	647b      	str	r3, [r7, #68]	; 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800381c:	61ba      	str	r2, [r7, #24]
 800381e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6979      	ldr	r1, [r7, #20]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	613b      	str	r3, [r7, #16]
   return(result);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800383e:	bf00      	nop
 8003840:	3754      	adds	r7, #84	; 0x54
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff fcf3 	bl	8003250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b21      	cmp	r3, #33	; 0x21
 8003884:	d13e      	bne.n	8003904 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d114      	bne.n	80038ba <UART_Transmit_IT+0x48>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d110      	bne.n	80038ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	1c9a      	adds	r2, r3, #2
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]
 80038b8:	e008      	b.n	80038cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	1c59      	adds	r1, r3, #1
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6211      	str	r1, [r2, #32]
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4619      	mov	r1, r3
 80038da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10f      	bne.n	8003900 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003928:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fc6e 	bl	8003214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b08c      	sub	sp, #48	; 0x30
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b22      	cmp	r3, #34	; 0x22
 8003954:	f040 80ab 	bne.w	8003aae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d117      	bne.n	8003992 <UART_Receive_IT+0x50>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003980:	b29a      	uxth	r2, r3
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	1c9a      	adds	r2, r3, #2
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
 8003990:	e026      	b.n	80039e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a4:	d007      	beq.n	80039b6 <UART_Receive_IT+0x74>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <UART_Receive_IT+0x82>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e008      	b.n	80039d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4619      	mov	r1, r3
 80039ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d15a      	bne.n	8003aaa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0220 	bic.w	r2, r2, #32
 8003a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d135      	bne.n	8003aa0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	330c      	adds	r3, #12
 8003a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	613b      	str	r3, [r7, #16]
   return(result);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f023 0310 	bic.w	r3, r3, #16
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	623a      	str	r2, [r7, #32]
 8003a5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	69f9      	ldr	r1, [r7, #28]
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e5      	bne.n	8003a3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d10a      	bne.n	8003a92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fbe3 	bl	8003264 <HAL_UARTEx_RxEventCallback>
 8003a9e:	e002      	b.n	8003aa6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fd fa39 	bl	8000f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e002      	b.n	8003ab0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3730      	adds	r7, #48	; 0x30
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003abc:	b09f      	sub	sp, #124	; 0x7c
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ace:	68d9      	ldr	r1, [r3, #12]
 8003ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	ea40 0301 	orr.w	r3, r0, r1
 8003ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003afc:	f021 010c 	bic.w	r1, r1, #12
 8003b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b06:	430b      	orrs	r3, r1
 8003b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b16:	6999      	ldr	r1, [r3, #24]
 8003b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	ea40 0301 	orr.w	r3, r0, r1
 8003b20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4bc5      	ldr	r3, [pc, #788]	; (8003e3c <UART_SetConfig+0x384>)
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d004      	beq.n	8003b36 <UART_SetConfig+0x7e>
 8003b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4bc3      	ldr	r3, [pc, #780]	; (8003e40 <UART_SetConfig+0x388>)
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d103      	bne.n	8003b3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b36:	f7fe ff3d 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8003b3a:	6778      	str	r0, [r7, #116]	; 0x74
 8003b3c:	e002      	b.n	8003b44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b3e:	f7fe ff25 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8003b42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4c:	f040 80b6 	bne.w	8003cbc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b52:	461c      	mov	r4, r3
 8003b54:	f04f 0500 	mov.w	r5, #0
 8003b58:	4622      	mov	r2, r4
 8003b5a:	462b      	mov	r3, r5
 8003b5c:	1891      	adds	r1, r2, r2
 8003b5e:	6439      	str	r1, [r7, #64]	; 0x40
 8003b60:	415b      	adcs	r3, r3
 8003b62:	647b      	str	r3, [r7, #68]	; 0x44
 8003b64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b68:	1912      	adds	r2, r2, r4
 8003b6a:	eb45 0303 	adc.w	r3, r5, r3
 8003b6e:	f04f 0000 	mov.w	r0, #0
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	00d9      	lsls	r1, r3, #3
 8003b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b7c:	00d0      	lsls	r0, r2, #3
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	1911      	adds	r1, r2, r4
 8003b84:	6639      	str	r1, [r7, #96]	; 0x60
 8003b86:	416b      	adcs	r3, r5
 8003b88:	667b      	str	r3, [r7, #100]	; 0x64
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ba0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ba4:	f7fc fb18 	bl	80001d8 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4ba5      	ldr	r3, [pc, #660]	; (8003e44 <UART_SetConfig+0x38c>)
 8003bae:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	011e      	lsls	r6, r3, #4
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb8:	461c      	mov	r4, r3
 8003bba:	f04f 0500 	mov.w	r5, #0
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	462b      	mov	r3, r5
 8003bc2:	1891      	adds	r1, r2, r2
 8003bc4:	6339      	str	r1, [r7, #48]	; 0x30
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003bce:	1912      	adds	r2, r2, r4
 8003bd0:	eb45 0303 	adc.w	r3, r5, r3
 8003bd4:	f04f 0000 	mov.w	r0, #0
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	00d9      	lsls	r1, r3, #3
 8003bde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be2:	00d0      	lsls	r0, r2, #3
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	1911      	adds	r1, r2, r4
 8003bea:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bec:	416b      	adcs	r3, r5
 8003bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	1891      	adds	r1, r2, r2
 8003bfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bfe:	415b      	adcs	r3, r3
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c0a:	f7fc fae5 	bl	80001d8 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4b8c      	ldr	r3, [pc, #560]	; (8003e44 <UART_SetConfig+0x38c>)
 8003c14:	fba3 1302 	umull	r1, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	2164      	movs	r1, #100	; 0x64
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	4a87      	ldr	r2, [pc, #540]	; (8003e44 <UART_SetConfig+0x38c>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c34:	441e      	add	r6, r3
 8003c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	1894      	adds	r4, r2, r2
 8003c44:	623c      	str	r4, [r7, #32]
 8003c46:	415b      	adcs	r3, r3
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c4e:	1812      	adds	r2, r2, r0
 8003c50:	eb41 0303 	adc.w	r3, r1, r3
 8003c54:	f04f 0400 	mov.w	r4, #0
 8003c58:	f04f 0500 	mov.w	r5, #0
 8003c5c:	00dd      	lsls	r5, r3, #3
 8003c5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c62:	00d4      	lsls	r4, r2, #3
 8003c64:	4622      	mov	r2, r4
 8003c66:	462b      	mov	r3, r5
 8003c68:	1814      	adds	r4, r2, r0
 8003c6a:	653c      	str	r4, [r7, #80]	; 0x50
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	461a      	mov	r2, r3
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	1891      	adds	r1, r2, r2
 8003c7c:	61b9      	str	r1, [r7, #24]
 8003c7e:	415b      	adcs	r3, r3
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c8a:	f7fc faa5 	bl	80001d8 <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <UART_SetConfig+0x38c>)
 8003c94:	fba3 1302 	umull	r1, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	2164      	movs	r1, #100	; 0x64
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	3332      	adds	r3, #50	; 0x32
 8003ca6:	4a67      	ldr	r2, [pc, #412]	; (8003e44 <UART_SetConfig+0x38c>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	f003 0207 	and.w	r2, r3, #7
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4432      	add	r2, r6
 8003cb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cba:	e0b9      	b.n	8003e30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cbe:	461c      	mov	r4, r3
 8003cc0:	f04f 0500 	mov.w	r5, #0
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	6139      	str	r1, [r7, #16]
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cd4:	1912      	adds	r2, r2, r4
 8003cd6:	eb45 0303 	adc.w	r3, r5, r3
 8003cda:	f04f 0000 	mov.w	r0, #0
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	00d9      	lsls	r1, r3, #3
 8003ce4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ce8:	00d0      	lsls	r0, r2, #3
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	eb12 0804 	adds.w	r8, r2, r4
 8003cf2:	eb43 0905 	adc.w	r9, r3, r5
 8003cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f04f 0100 	mov.w	r1, #0
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	008b      	lsls	r3, r1, #2
 8003d0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d0e:	0082      	lsls	r2, r0, #2
 8003d10:	4640      	mov	r0, r8
 8003d12:	4649      	mov	r1, r9
 8003d14:	f7fc fa60 	bl	80001d8 <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <UART_SetConfig+0x38c>)
 8003d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	011e      	lsls	r6, r3, #4
 8003d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	1894      	adds	r4, r2, r2
 8003d34:	60bc      	str	r4, [r7, #8]
 8003d36:	415b      	adcs	r3, r3
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d3e:	1812      	adds	r2, r2, r0
 8003d40:	eb41 0303 	adc.w	r3, r1, r3
 8003d44:	f04f 0400 	mov.w	r4, #0
 8003d48:	f04f 0500 	mov.w	r5, #0
 8003d4c:	00dd      	lsls	r5, r3, #3
 8003d4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d52:	00d4      	lsls	r4, r2, #3
 8003d54:	4622      	mov	r2, r4
 8003d56:	462b      	mov	r3, r5
 8003d58:	1814      	adds	r4, r2, r0
 8003d5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d5c:	414b      	adcs	r3, r1
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	008b      	lsls	r3, r1, #2
 8003d74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d78:	0082      	lsls	r2, r0, #2
 8003d7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d7e:	f7fc fa2b 	bl	80001d8 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <UART_SetConfig+0x38c>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	; 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	3332      	adds	r3, #50	; 0x32
 8003d9a:	4a2a      	ldr	r2, [pc, #168]	; (8003e44 <UART_SetConfig+0x38c>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da6:	441e      	add	r6, r3
 8003da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003daa:	4618      	mov	r0, r3
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	1894      	adds	r4, r2, r2
 8003db6:	603c      	str	r4, [r7, #0]
 8003db8:	415b      	adcs	r3, r3
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dc0:	1812      	adds	r2, r2, r0
 8003dc2:	eb41 0303 	adc.w	r3, r1, r3
 8003dc6:	f04f 0400 	mov.w	r4, #0
 8003dca:	f04f 0500 	mov.w	r5, #0
 8003dce:	00dd      	lsls	r5, r3, #3
 8003dd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dd4:	00d4      	lsls	r4, r2, #3
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	462b      	mov	r3, r5
 8003dda:	eb12 0a00 	adds.w	sl, r2, r0
 8003dde:	eb43 0b01 	adc.w	fp, r3, r1
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f04f 0100 	mov.w	r1, #0
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	008b      	lsls	r3, r1, #2
 8003df6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dfa:	0082      	lsls	r2, r0, #2
 8003dfc:	4650      	mov	r0, sl
 8003dfe:	4659      	mov	r1, fp
 8003e00:	f7fc f9ea 	bl	80001d8 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <UART_SetConfig+0x38c>)
 8003e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2164      	movs	r1, #100	; 0x64
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	3332      	adds	r3, #50	; 0x32
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <UART_SetConfig+0x38c>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	f003 020f 	and.w	r2, r3, #15
 8003e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4432      	add	r2, r6
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	377c      	adds	r7, #124	; 0x7c
 8003e34:	46bd      	mov	sp, r7
 8003e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40011000 	.word	0x40011000
 8003e40:	40011400 	.word	0x40011400
 8003e44:	51eb851f 	.word	0x51eb851f

08003e48 <calloc>:
 8003e48:	4b02      	ldr	r3, [pc, #8]	; (8003e54 <calloc+0xc>)
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	4601      	mov	r1, r0
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	f000 b834 	b.w	8003ebc <_calloc_r>
 8003e54:	20000018 	.word	0x20000018

08003e58 <__errno>:
 8003e58:	4b01      	ldr	r3, [pc, #4]	; (8003e60 <__errno+0x8>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000018 	.word	0x20000018

08003e64 <__libc_init_array>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	4d0d      	ldr	r5, [pc, #52]	; (8003e9c <__libc_init_array+0x38>)
 8003e68:	4c0d      	ldr	r4, [pc, #52]	; (8003ea0 <__libc_init_array+0x3c>)
 8003e6a:	1b64      	subs	r4, r4, r5
 8003e6c:	10a4      	asrs	r4, r4, #2
 8003e6e:	2600      	movs	r6, #0
 8003e70:	42a6      	cmp	r6, r4
 8003e72:	d109      	bne.n	8003e88 <__libc_init_array+0x24>
 8003e74:	4d0b      	ldr	r5, [pc, #44]	; (8003ea4 <__libc_init_array+0x40>)
 8003e76:	4c0c      	ldr	r4, [pc, #48]	; (8003ea8 <__libc_init_array+0x44>)
 8003e78:	f000 f8a8 	bl	8003fcc <_init>
 8003e7c:	1b64      	subs	r4, r4, r5
 8003e7e:	10a4      	asrs	r4, r4, #2
 8003e80:	2600      	movs	r6, #0
 8003e82:	42a6      	cmp	r6, r4
 8003e84:	d105      	bne.n	8003e92 <__libc_init_array+0x2e>
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8c:	4798      	blx	r3
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7ee      	b.n	8003e70 <__libc_init_array+0xc>
 8003e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e96:	4798      	blx	r3
 8003e98:	3601      	adds	r6, #1
 8003e9a:	e7f2      	b.n	8003e82 <__libc_init_array+0x1e>
 8003e9c:	0800400c 	.word	0x0800400c
 8003ea0:	0800400c 	.word	0x0800400c
 8003ea4:	0800400c 	.word	0x0800400c
 8003ea8:	08004010 	.word	0x08004010

08003eac <memset>:
 8003eac:	4402      	add	r2, r0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <_calloc_r>:
 8003ebc:	b513      	push	{r0, r1, r4, lr}
 8003ebe:	434a      	muls	r2, r1
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	9201      	str	r2, [sp, #4]
 8003ec4:	f000 f80a 	bl	8003edc <_malloc_r>
 8003ec8:	4604      	mov	r4, r0
 8003eca:	b118      	cbz	r0, 8003ed4 <_calloc_r+0x18>
 8003ecc:	9a01      	ldr	r2, [sp, #4]
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f7ff ffec 	bl	8003eac <memset>
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	b002      	add	sp, #8
 8003ed8:	bd10      	pop	{r4, pc}
	...

08003edc <_malloc_r>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	1ccd      	adds	r5, r1, #3
 8003ee0:	f025 0503 	bic.w	r5, r5, #3
 8003ee4:	3508      	adds	r5, #8
 8003ee6:	2d0c      	cmp	r5, #12
 8003ee8:	bf38      	it	cc
 8003eea:	250c      	movcc	r5, #12
 8003eec:	2d00      	cmp	r5, #0
 8003eee:	4606      	mov	r6, r0
 8003ef0:	db01      	blt.n	8003ef6 <_malloc_r+0x1a>
 8003ef2:	42a9      	cmp	r1, r5
 8003ef4:	d903      	bls.n	8003efe <_malloc_r+0x22>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	2000      	movs	r0, #0
 8003efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efe:	f000 f857 	bl	8003fb0 <__malloc_lock>
 8003f02:	4921      	ldr	r1, [pc, #132]	; (8003f88 <_malloc_r+0xac>)
 8003f04:	680a      	ldr	r2, [r1, #0]
 8003f06:	4614      	mov	r4, r2
 8003f08:	b99c      	cbnz	r4, 8003f32 <_malloc_r+0x56>
 8003f0a:	4f20      	ldr	r7, [pc, #128]	; (8003f8c <_malloc_r+0xb0>)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	b923      	cbnz	r3, 8003f1a <_malloc_r+0x3e>
 8003f10:	4621      	mov	r1, r4
 8003f12:	4630      	mov	r0, r6
 8003f14:	f000 f83c 	bl	8003f90 <_sbrk_r>
 8003f18:	6038      	str	r0, [r7, #0]
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 f837 	bl	8003f90 <_sbrk_r>
 8003f22:	1c43      	adds	r3, r0, #1
 8003f24:	d123      	bne.n	8003f6e <_malloc_r+0x92>
 8003f26:	230c      	movs	r3, #12
 8003f28:	6033      	str	r3, [r6, #0]
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f000 f846 	bl	8003fbc <__malloc_unlock>
 8003f30:	e7e3      	b.n	8003efa <_malloc_r+0x1e>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	1b5b      	subs	r3, r3, r5
 8003f36:	d417      	bmi.n	8003f68 <_malloc_r+0x8c>
 8003f38:	2b0b      	cmp	r3, #11
 8003f3a:	d903      	bls.n	8003f44 <_malloc_r+0x68>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	441c      	add	r4, r3
 8003f40:	6025      	str	r5, [r4, #0]
 8003f42:	e004      	b.n	8003f4e <_malloc_r+0x72>
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	42a2      	cmp	r2, r4
 8003f48:	bf0c      	ite	eq
 8003f4a:	600b      	streq	r3, [r1, #0]
 8003f4c:	6053      	strne	r3, [r2, #4]
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f000 f834 	bl	8003fbc <__malloc_unlock>
 8003f54:	f104 000b 	add.w	r0, r4, #11
 8003f58:	1d23      	adds	r3, r4, #4
 8003f5a:	f020 0007 	bic.w	r0, r0, #7
 8003f5e:	1ac2      	subs	r2, r0, r3
 8003f60:	d0cc      	beq.n	8003efc <_malloc_r+0x20>
 8003f62:	1a1b      	subs	r3, r3, r0
 8003f64:	50a3      	str	r3, [r4, r2]
 8003f66:	e7c9      	b.n	8003efc <_malloc_r+0x20>
 8003f68:	4622      	mov	r2, r4
 8003f6a:	6864      	ldr	r4, [r4, #4]
 8003f6c:	e7cc      	b.n	8003f08 <_malloc_r+0x2c>
 8003f6e:	1cc4      	adds	r4, r0, #3
 8003f70:	f024 0403 	bic.w	r4, r4, #3
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d0e3      	beq.n	8003f40 <_malloc_r+0x64>
 8003f78:	1a21      	subs	r1, r4, r0
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f000 f808 	bl	8003f90 <_sbrk_r>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d1dd      	bne.n	8003f40 <_malloc_r+0x64>
 8003f84:	e7cf      	b.n	8003f26 <_malloc_r+0x4a>
 8003f86:	bf00      	nop
 8003f88:	200001bc 	.word	0x200001bc
 8003f8c:	200001c0 	.word	0x200001c0

08003f90 <_sbrk_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4d06      	ldr	r5, [pc, #24]	; (8003fac <_sbrk_r+0x1c>)
 8003f94:	2300      	movs	r3, #0
 8003f96:	4604      	mov	r4, r0
 8003f98:	4608      	mov	r0, r1
 8003f9a:	602b      	str	r3, [r5, #0]
 8003f9c:	f7fd f8f0 	bl	8001180 <_sbrk>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_sbrk_r+0x1a>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_sbrk_r+0x1a>
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	200002e8 	.word	0x200002e8

08003fb0 <__malloc_lock>:
 8003fb0:	4801      	ldr	r0, [pc, #4]	; (8003fb8 <__malloc_lock+0x8>)
 8003fb2:	f000 b809 	b.w	8003fc8 <__retarget_lock_acquire_recursive>
 8003fb6:	bf00      	nop
 8003fb8:	200002f0 	.word	0x200002f0

08003fbc <__malloc_unlock>:
 8003fbc:	4801      	ldr	r0, [pc, #4]	; (8003fc4 <__malloc_unlock+0x8>)
 8003fbe:	f000 b804 	b.w	8003fca <__retarget_lock_release_recursive>
 8003fc2:	bf00      	nop
 8003fc4:	200002f0 	.word	0x200002f0

08003fc8 <__retarget_lock_acquire_recursive>:
 8003fc8:	4770      	bx	lr

08003fca <__retarget_lock_release_recursive>:
 8003fca:	4770      	bx	lr

08003fcc <_init>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr

08003fd8 <_fini>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	bf00      	nop
 8003fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fde:	bc08      	pop	{r3}
 8003fe0:	469e      	mov	lr, r3
 8003fe2:	4770      	bx	lr
