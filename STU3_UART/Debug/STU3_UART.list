
STU3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c10  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc8  08003dc8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd0  08003dd0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000078  08003e50  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08003e50  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3b2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001861  00000000  00000000  0002a45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0002bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001596c  00000000  00000000  0002ca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000903e  00000000  00000000  000423c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086275  00000000  00000000  0004b402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dac  00000000  00000000  000d16cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d90 	.word	0x08003d90

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08003d90 	.word	0x08003d90

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fea7 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f841 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8fd 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 f8d3 	bl	800068c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f8a5 	bl	8000634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART2.huart = &huart2;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <main+0x84>)
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <main+0x88>)
 80004ee:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <main+0x84>)
 80004f2:	22ff      	movs	r2, #255	; 0xff
 80004f4:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <main+0x84>)
 80004f8:	22ff      	movs	r2, #255	; 0xff
 80004fa:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 80004fc:	4815      	ldr	r0, [pc, #84]	; (8000554 <main+0x84>)
 80004fe:	f000 f95b 	bl	80007b8 <UARTInit>
  UARTResetStart(&UART2);
 8000502:	4814      	ldr	r0, [pc, #80]	; (8000554 <main+0x84>)
 8000504:	f000 f980 	bl	8000808 <UARTResetStart>
  UARTReadChar(&UART2);
 8000508:	4812      	ldr	r0, [pc, #72]	; (8000554 <main+0x84>)
 800050a:	f000 f9a1 	bl	8000850 <UARTReadChar>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int16_t inputChar = UARTReadChar(&UART2);
 800050e:	4811      	ldr	r0, [pc, #68]	; (8000554 <main+0x84>)
 8000510:	f000 f99e 	bl	8000850 <UARTReadChar>
 8000514:	4603      	mov	r3, r0
 8000516:	807b      	strh	r3, [r7, #2]
	  		//if input char == -1 ==> No New data
	  		if (inputChar != -1)
 8000518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800051c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000520:	d0f5      	beq.n	800050e <main+0x3e>
	  		{
	  			dataFN += 1;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <main+0x8c>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x8c>)
 800052c:	701a      	strb	r2, [r3, #0]
	  			for(int i = 0; i < dataFN; i++){
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	e008      	b.n	8000546 <main+0x76>
	  				All_mode(inputChar, &UART2);
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <main+0x84>)
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f9b2 	bl	80008a4 <All_mode>
	  			for(int i = 0; i < dataFN; i++){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3301      	adds	r3, #1
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <main+0x8c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	461a      	mov	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4293      	cmp	r3, r2
 8000550:	dbf0      	blt.n	8000534 <main+0x64>
  {
 8000552:	e7dc      	b.n	800050e <main+0x3e>
 8000554:	2000009c 	.word	0x2000009c
 8000558:	20000198 	.word	0x20000198
 800055c:	20000097 	.word	0x20000097

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fb7e 	bl	8003c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d0:	2310      	movs	r3, #16
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005da:	2304      	movs	r3, #4
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005de:	2304      	movs	r3, #4
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fd66 	bl	80020b8 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f2:	f000 fc7d 	bl	8000ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f001 ffc8 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 fc67 	bl	8000ef0 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_USART2_UART_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART2_UART_Init+0x50>)
 8000640:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART2_UART_Init+0x50>)
 8000648:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800064c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_USART2_UART_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART2_UART_Init+0x50>)
 8000656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART2_UART_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART2_UART_Init+0x50>)
 8000670:	f002 f996 	bl	80029a0 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800067a:	f000 fc39 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000198 	.word	0x20000198
 8000688:	40004400 	.word	0x40004400

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_DMA_Init+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <MX_DMA_Init+0x4c>)
 800069c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_DMA_Init+0x4c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2010      	movs	r0, #16
 80006b4:	f000 ff29 	bl	800150a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006b8:	2010      	movs	r0, #16
 80006ba:	f000 ff42 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2011      	movs	r0, #17
 80006c4:	f000 ff21 	bl	800150a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006c8:	2011      	movs	r0, #17
 80006ca:	f000 ff3a 	bl	8001542 <HAL_NVIC_EnableIRQ>

}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a25      	ldr	r2, [pc, #148]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000768:	f001 fc8c 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000772:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_GPIO_Init+0xd8>)
 8000784:	f001 fafa 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000788:	2320      	movs	r3, #32
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0xd4>)
 80007a0:	f001 faec 	bl	8001d7c <HAL_GPIO_Init>

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020000 	.word	0x40020000
 80007b4:	40020800 	.word	0x40020800

080007b8 <UARTInit>:

/* USER CODE BEGIN 4 */
void UARTInit(UARTStucrture *uart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <UARTInit+0x4c>)
 80007c2:	88db      	ldrh	r3, [r3, #6]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2001      	movs	r0, #1
 80007c8:	f003 fa20 	bl	8003c0c <calloc>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <UARTInit+0x4c>)
 80007d6:	889b      	ldrh	r3, [r3, #4]
 80007d8:	4619      	mov	r1, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	f003 fa16 	bl	8003c0c <calloc>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	81da      	strh	r2, [r3, #14]

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000009c 	.word	0x2000009c

08000808 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6919      	ldr	r1, [r3, #16]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	88db      	ldrh	r3, [r3, #6]
 800081c:	461a      	mov	r2, r3
 800081e:	f002 f98b 	bl	8002b38 <HAL_UART_Receive_DMA>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	88db      	ldrh	r3, [r3, #6]
 8000836:	461a      	mov	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	1ad3      	subs	r3, r2, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	8a9b      	ldrh	r3, [r3, #20]
 8000862:	461c      	mov	r4, r3
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffe0 	bl	800082a <UARTGetRxHead>
 800086a:	4603      	mov	r3, r0
 800086c:	429c      	cmp	r4, r3
 800086e:	d013      	beq.n	8000898 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	8a92      	ldrh	r2, [r2, #20]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	8a9b      	ldrh	r3, [r3, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	88d2      	ldrh	r2, [r2, #6]
 8000888:	fb93 f1f2 	sdiv	r1, r3, r2
 800088c:	fb02 f201 	mul.w	r2, r2, r1
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	b29a      	uxth	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	829a      	strh	r2, [r3, #20]
	}

	return Result;
 8000898:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 800089c:	4618      	mov	r0, r3
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <All_mode>:
void All_mode(uint8_t DataIn, UARTStucrture *uart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
	N_state = uart->RxBuffer[uart->RxTail-1];
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	691a      	ldr	r2, [r3, #16]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	8a9b      	ldrh	r3, [r3, #20]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	4b9e      	ldr	r3, [pc, #632]	; (8000b38 <All_mode+0x294>)
 80008c0:	701a      	strb	r2, [r3, #0]
	switch (chkM){
 80008c2:	4b9e      	ldr	r3, [pc, #632]	; (8000b3c <All_mode+0x298>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d033      	beq.n	8000932 <All_mode+0x8e>
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	f300 82f1 	bgt.w	8000eb2 <All_mode+0x60e>
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <All_mode+0x36>
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d015      	beq.n	8000904 <All_mode+0x60>
					}
					break;
			}
	}

}
 80008d8:	e2eb      	b.n	8000eb2 <All_mode+0x60e>
			StartM = DataIn;
 80008da:	4a99      	ldr	r2, [pc, #612]	; (8000b40 <All_mode+0x29c>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	7013      	strb	r3, [r2, #0]
			chkStart = StartM >> 4;
 80008e0:	4b97      	ldr	r3, [pc, #604]	; (8000b40 <All_mode+0x29c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	091b      	lsrs	r3, r3, #4
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b96      	ldr	r3, [pc, #600]	; (8000b44 <All_mode+0x2a0>)
 80008ea:	701a      	strb	r2, [r3, #0]
			if (chkStart == 9){
 80008ec:	4b95      	ldr	r3, [pc, #596]	; (8000b44 <All_mode+0x2a0>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b09      	cmp	r3, #9
 80008f2:	d103      	bne.n	80008fc <All_mode+0x58>
				chkM = 1;
 80008f4:	4b91      	ldr	r3, [pc, #580]	; (8000b3c <All_mode+0x298>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
			break;
 80008fa:	e2da      	b.n	8000eb2 <All_mode+0x60e>
				chkM = 0;
 80008fc:	4b8f      	ldr	r3, [pc, #572]	; (8000b3c <All_mode+0x298>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
			break;
 8000902:	e2d6      	b.n	8000eb2 <All_mode+0x60e>
			NameM = (StartM & 15);
 8000904:	4b8e      	ldr	r3, [pc, #568]	; (8000b40 <All_mode+0x29c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	f003 030f 	and.w	r3, r3, #15
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b8e      	ldr	r3, [pc, #568]	; (8000b48 <All_mode+0x2a4>)
 8000910:	701a      	strb	r2, [r3, #0]
			if (NameM >= 1 && NameM <= 14){
 8000912:	4b8d      	ldr	r3, [pc, #564]	; (8000b48 <All_mode+0x2a4>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d007      	beq.n	800092a <All_mode+0x86>
 800091a:	4b8b      	ldr	r3, [pc, #556]	; (8000b48 <All_mode+0x2a4>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b0e      	cmp	r3, #14
 8000920:	d803      	bhi.n	800092a <All_mode+0x86>
				chkM = 2;
 8000922:	4b86      	ldr	r3, [pc, #536]	; (8000b3c <All_mode+0x298>)
 8000924:	2202      	movs	r2, #2
 8000926:	701a      	strb	r2, [r3, #0]
			break;
 8000928:	e2c3      	b.n	8000eb2 <All_mode+0x60e>
				chkM = 0;
 800092a:	4b84      	ldr	r3, [pc, #528]	; (8000b3c <All_mode+0x298>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
			break;
 8000930:	e2bf      	b.n	8000eb2 <All_mode+0x60e>
			switch (NameM){
 8000932:	4b85      	ldr	r3, [pc, #532]	; (8000b48 <All_mode+0x2a4>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	3b01      	subs	r3, #1
 8000938:	2b0d      	cmp	r3, #13
 800093a:	f200 82ba 	bhi.w	8000eb2 <All_mode+0x60e>
 800093e:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <All_mode+0xa0>)
 8000940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000944:	0800097d 	.word	0x0800097d
 8000948:	080009e7 	.word	0x080009e7
 800094c:	08000a25 	.word	0x08000a25
 8000950:	08000a63 	.word	0x08000a63
 8000954:	08000acd 	.word	0x08000acd
 8000958:	08000b71 	.word	0x08000b71
 800095c:	08000bdb 	.word	0x08000bdb
 8000960:	08000c7b 	.word	0x08000c7b
 8000964:	08000ccb 	.word	0x08000ccb
 8000968:	08000d09 	.word	0x08000d09
 800096c:	08000d47 	.word	0x08000d47
 8000970:	08000d85 	.word	0x08000d85
 8000974:	08000dc3 	.word	0x08000dc3
 8000978:	08000e41 	.word	0x08000e41
					if (dataFN == 2){
 800097c:	4b73      	ldr	r3, [pc, #460]	; (8000b4c <All_mode+0x2a8>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d102      	bne.n	800098a <All_mode+0xe6>
						dataF1 = DataIn;
 8000984:	4a72      	ldr	r2, [pc, #456]	; (8000b50 <All_mode+0x2ac>)
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	7013      	strb	r3, [r2, #0]
					if(dataFN == 3){
 800098a:	4b70      	ldr	r3, [pc, #448]	; (8000b4c <All_mode+0x2a8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d102      	bne.n	8000998 <All_mode+0xf4>
						dataF2 = DataIn;
 8000992:	4a70      	ldr	r2, [pc, #448]	; (8000b54 <All_mode+0x2b0>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	7013      	strb	r3, [r2, #0]
					chksum = DataIn;
 8000998:	4a6f      	ldr	r2, [pc, #444]	; (8000b58 <All_mode+0x2b4>)
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	7013      	strb	r3, [r2, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800099e:	4b68      	ldr	r3, [pc, #416]	; (8000b40 <All_mode+0x29c>)
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	4b6b      	ldr	r3, [pc, #428]	; (8000b50 <All_mode+0x2ac>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b6a      	ldr	r3, [pc, #424]	; (8000b54 <All_mode+0x2b0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b69      	ldr	r3, [pc, #420]	; (8000b5c <All_mode+0x2b8>)
 80009b8:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80009ba:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <All_mode+0x2b4>)
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <All_mode+0x2b8>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	f040 825a 	bne.w	8000e7c <All_mode+0x5d8>
						M_state = 1;
 80009c8:	4b65      	ldr	r3, [pc, #404]	; (8000b60 <All_mode+0x2bc>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 80009ce:	2202      	movs	r2, #2
 80009d0:	4964      	ldr	r1, [pc, #400]	; (8000b64 <All_mode+0x2c0>)
 80009d2:	4865      	ldr	r0, [pc, #404]	; (8000b68 <All_mode+0x2c4>)
 80009d4:	f002 f832 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 80009d8:	4b58      	ldr	r3, [pc, #352]	; (8000b3c <All_mode+0x298>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80009de:	4b5b      	ldr	r3, [pc, #364]	; (8000b4c <All_mode+0x2a8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
					break;
 80009e4:	e24a      	b.n	8000e7c <All_mode+0x5d8>
					chksum = DataIn;
 80009e6:	4a5c      	ldr	r2, [pc, #368]	; (8000b58 <All_mode+0x2b4>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 80009ec:	4b54      	ldr	r3, [pc, #336]	; (8000b40 <All_mode+0x29c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b5d      	ldr	r3, [pc, #372]	; (8000b6c <All_mode+0x2c8>)
 80009f6:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80009f8:	4b57      	ldr	r3, [pc, #348]	; (8000b58 <All_mode+0x2b4>)
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b5b      	ldr	r3, [pc, #364]	; (8000b6c <All_mode+0x2c8>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	f040 823d 	bne.w	8000e80 <All_mode+0x5dc>
						M_state = 2;
 8000a06:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <All_mode+0x2bc>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	4955      	ldr	r1, [pc, #340]	; (8000b64 <All_mode+0x2c0>)
 8000a10:	4855      	ldr	r0, [pc, #340]	; (8000b68 <All_mode+0x2c4>)
 8000a12:	f002 f813 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <All_mode+0x298>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000a1c:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <All_mode+0x2a8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
					break;
 8000a22:	e22d      	b.n	8000e80 <All_mode+0x5dc>
					chksum = DataIn;
 8000a24:	4a4c      	ldr	r2, [pc, #304]	; (8000b58 <All_mode+0x2b4>)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 8000a2a:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <All_mode+0x29c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <All_mode+0x2c8>)
 8000a34:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000a36:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <All_mode+0x2b4>)
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4b4c      	ldr	r3, [pc, #304]	; (8000b6c <All_mode+0x2c8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	f040 8220 	bne.w	8000e84 <All_mode+0x5e0>
						M_state = 3;
 8000a44:	4b46      	ldr	r3, [pc, #280]	; (8000b60 <All_mode+0x2bc>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	4945      	ldr	r1, [pc, #276]	; (8000b64 <All_mode+0x2c0>)
 8000a4e:	4846      	ldr	r0, [pc, #280]	; (8000b68 <All_mode+0x2c4>)
 8000a50:	f001 fff4 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000a54:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <All_mode+0x298>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <All_mode+0x2a8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
					break;
 8000a60:	e210      	b.n	8000e84 <All_mode+0x5e0>
					if (dataFN == 2){
 8000a62:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <All_mode+0x2a8>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d102      	bne.n	8000a70 <All_mode+0x1cc>
						dataF1 = DataIn;
 8000a6a:	4a39      	ldr	r2, [pc, #228]	; (8000b50 <All_mode+0x2ac>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	7013      	strb	r3, [r2, #0]
					if(dataFN == 3){
 8000a70:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <All_mode+0x2a8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d102      	bne.n	8000a7e <All_mode+0x1da>
						dataF2 = DataIn;
 8000a78:	4a36      	ldr	r2, [pc, #216]	; (8000b54 <All_mode+0x2b0>)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	7013      	strb	r3, [r2, #0]
					chksum = DataIn;
 8000a7e:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <All_mode+0x2b4>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	7013      	strb	r3, [r2, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <All_mode+0x29c>)
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <All_mode+0x2ac>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <All_mode+0x2b0>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <All_mode+0x2b8>)
 8000a9e:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <All_mode+0x2b4>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <All_mode+0x2b8>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	f040 81ed 	bne.w	8000e88 <All_mode+0x5e4>
						M_state = 4;
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <All_mode+0x2bc>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	492b      	ldr	r1, [pc, #172]	; (8000b64 <All_mode+0x2c0>)
 8000ab8:	482b      	ldr	r0, [pc, #172]	; (8000b68 <All_mode+0x2c4>)
 8000aba:	f001 ffbf 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <All_mode+0x298>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <All_mode+0x2a8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
					break;
 8000aca:	e1dd      	b.n	8000e88 <All_mode+0x5e4>
					if (dataFN == 2){
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <All_mode+0x2a8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d102      	bne.n	8000ada <All_mode+0x236>
						dataF1 = DataIn;
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <All_mode+0x2ac>)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	7013      	strb	r3, [r2, #0]
					if(dataFN == 3){
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <All_mode+0x2a8>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d102      	bne.n	8000ae8 <All_mode+0x244>
						dataF2 = DataIn;
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <All_mode+0x2b0>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	7013      	strb	r3, [r2, #0]
					chksum = DataIn;
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <All_mode+0x2b4>)
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	7013      	strb	r3, [r2, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <All_mode+0x29c>)
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <All_mode+0x2ac>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <All_mode+0x2b0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <All_mode+0x2b8>)
 8000b08:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <All_mode+0x2b4>)
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <All_mode+0x2b8>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	f040 81ba 	bne.w	8000e8c <All_mode+0x5e8>
						M_state = 5;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <All_mode+0x2bc>)
 8000b1a:	2205      	movs	r2, #5
 8000b1c:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000b1e:	2202      	movs	r2, #2
 8000b20:	4910      	ldr	r1, [pc, #64]	; (8000b64 <All_mode+0x2c0>)
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <All_mode+0x2c4>)
 8000b24:	f001 ff8a 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <All_mode+0x298>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <All_mode+0x2a8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
					break;
 8000b34:	e1aa      	b.n	8000e8c <All_mode+0x5e8>
 8000b36:	bf00      	nop
 8000b38:	20000095 	.word	0x20000095
 8000b3c:	20000096 	.word	0x20000096
 8000b40:	20000124 	.word	0x20000124
 8000b44:	200000c0 	.word	0x200000c0
 8000b48:	2000012d 	.word	0x2000012d
 8000b4c:	20000097 	.word	0x20000097
 8000b50:	20000193 	.word	0x20000193
 8000b54:	200001dc 	.word	0x200001dc
 8000b58:	20000196 	.word	0x20000196
 8000b5c:	20000191 	.word	0x20000191
 8000b60:	20000094 	.word	0x20000094
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000198 	.word	0x20000198
 8000b6c:	20000194 	.word	0x20000194
					if (dataFN == 2){
 8000b70:	4ba3      	ldr	r3, [pc, #652]	; (8000e00 <All_mode+0x55c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d102      	bne.n	8000b7e <All_mode+0x2da>
						dataF1 = DataIn;
 8000b78:	4aa2      	ldr	r2, [pc, #648]	; (8000e04 <All_mode+0x560>)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	7013      	strb	r3, [r2, #0]
					if(dataFN == 3){
 8000b7e:	4ba0      	ldr	r3, [pc, #640]	; (8000e00 <All_mode+0x55c>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d102      	bne.n	8000b8c <All_mode+0x2e8>
						dataF2 = DataIn;
 8000b86:	4aa0      	ldr	r2, [pc, #640]	; (8000e08 <All_mode+0x564>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	7013      	strb	r3, [r2, #0]
					chksum = DataIn;
 8000b8c:	4a9f      	ldr	r2, [pc, #636]	; (8000e0c <All_mode+0x568>)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	7013      	strb	r3, [r2, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000b92:	4b9f      	ldr	r3, [pc, #636]	; (8000e10 <All_mode+0x56c>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b9b      	ldr	r3, [pc, #620]	; (8000e04 <All_mode+0x560>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b9a      	ldr	r3, [pc, #616]	; (8000e08 <All_mode+0x564>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b9a      	ldr	r3, [pc, #616]	; (8000e14 <All_mode+0x570>)
 8000bac:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000bae:	4b97      	ldr	r3, [pc, #604]	; (8000e0c <All_mode+0x568>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	4b98      	ldr	r3, [pc, #608]	; (8000e14 <All_mode+0x570>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	f040 816a 	bne.w	8000e90 <All_mode+0x5ec>
						M_state = 6;
 8000bbc:	4b96      	ldr	r3, [pc, #600]	; (8000e18 <All_mode+0x574>)
 8000bbe:	2206      	movs	r2, #6
 8000bc0:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4995      	ldr	r1, [pc, #596]	; (8000e1c <All_mode+0x578>)
 8000bc6:	4896      	ldr	r0, [pc, #600]	; (8000e20 <All_mode+0x57c>)
 8000bc8:	f001 ff38 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000bcc:	4b95      	ldr	r3, [pc, #596]	; (8000e24 <All_mode+0x580>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000bd2:	4b8b      	ldr	r3, [pc, #556]	; (8000e00 <All_mode+0x55c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
					break;
 8000bd8:	e15a      	b.n	8000e90 <All_mode+0x5ec>
					if (dataFN == 2){
 8000bda:	4b89      	ldr	r3, [pc, #548]	; (8000e00 <All_mode+0x55c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d102      	bne.n	8000be8 <All_mode+0x344>
						Nstation = DataIn;
 8000be2:	4a91      	ldr	r2, [pc, #580]	; (8000e28 <All_mode+0x584>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	7013      	strb	r3, [r2, #0]
					if (dataFN < Nstation + 3){
 8000be8:	4b8f      	ldr	r3, [pc, #572]	; (8000e28 <All_mode+0x584>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	3302      	adds	r3, #2
 8000bee:	4a84      	ldr	r2, [pc, #528]	; (8000e00 <All_mode+0x55c>)
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	db14      	blt.n	8000c20 <All_mode+0x37c>
						if (dataFN == countN + 3){
 8000bf6:	4b82      	ldr	r3, [pc, #520]	; (8000e00 <All_mode+0x55c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b8b      	ldr	r3, [pc, #556]	; (8000e2c <All_mode+0x588>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3303      	adds	r3, #3
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d10c      	bne.n	8000c20 <All_mode+0x37c>
							dataFSum += DataIn;
 8000c06:	4b8a      	ldr	r3, [pc, #552]	; (8000e30 <All_mode+0x58c>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b87      	ldr	r3, [pc, #540]	; (8000e30 <All_mode+0x58c>)
 8000c12:	701a      	strb	r2, [r3, #0]
							countN += 1;
 8000c14:	4b85      	ldr	r3, [pc, #532]	; (8000e2c <All_mode+0x588>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b83      	ldr	r3, [pc, #524]	; (8000e2c <All_mode+0x588>)
 8000c1e:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000c20:	4a7a      	ldr	r2, [pc, #488]	; (8000e0c <All_mode+0x568>)
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	7013      	strb	r3, [r2, #0]
					chksum3 = ~(StartM + Nstation + dataFSum);
 8000c26:	4b7a      	ldr	r3, [pc, #488]	; (8000e10 <All_mode+0x56c>)
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	4b7f      	ldr	r3, [pc, #508]	; (8000e28 <All_mode+0x584>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b7f      	ldr	r3, [pc, #508]	; (8000e30 <All_mode+0x58c>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b7d      	ldr	r3, [pc, #500]	; (8000e34 <All_mode+0x590>)
 8000c40:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum3){
 8000c42:	4b72      	ldr	r3, [pc, #456]	; (8000e0c <All_mode+0x568>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	4b7b      	ldr	r3, [pc, #492]	; (8000e34 <All_mode+0x590>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	f040 8122 	bne.w	8000e94 <All_mode+0x5f0>
						M_state = 7;
 8000c50:	4b71      	ldr	r3, [pc, #452]	; (8000e18 <All_mode+0x574>)
 8000c52:	2207      	movs	r2, #7
 8000c54:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000c56:	2202      	movs	r2, #2
 8000c58:	4970      	ldr	r1, [pc, #448]	; (8000e1c <All_mode+0x578>)
 8000c5a:	4871      	ldr	r0, [pc, #452]	; (8000e20 <All_mode+0x57c>)
 8000c5c:	f001 feee 	bl	8002a3c <HAL_UART_Transmit_DMA>
						dataFSum = 0;
 8000c60:	4b73      	ldr	r3, [pc, #460]	; (8000e30 <All_mode+0x58c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000c66:	4b66      	ldr	r3, [pc, #408]	; (8000e00 <All_mode+0x55c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
						countN = 0;
 8000c6c:	4b6f      	ldr	r3, [pc, #444]	; (8000e2c <All_mode+0x588>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
						chkM = 0;
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <All_mode+0x580>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
					break;
 8000c78:	e10c      	b.n	8000e94 <All_mode+0x5f0>
					chksum = DataIn;
 8000c7a:	4a64      	ldr	r2, [pc, #400]	; (8000e0c <All_mode+0x568>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 8000c80:	4b63      	ldr	r3, [pc, #396]	; (8000e10 <All_mode+0x56c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b6b      	ldr	r3, [pc, #428]	; (8000e38 <All_mode+0x594>)
 8000c8a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000c8c:	4b5f      	ldr	r3, [pc, #380]	; (8000e0c <All_mode+0x568>)
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b69      	ldr	r3, [pc, #420]	; (8000e38 <All_mode+0x594>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 80ff 	bne.w	8000e98 <All_mode+0x5f4>
						M_state = 8;
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <All_mode+0x574>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	495e      	ldr	r1, [pc, #376]	; (8000e1c <All_mode+0x578>)
 8000ca4:	485e      	ldr	r0, [pc, #376]	; (8000e20 <All_mode+0x57c>)
 8000ca6:	f001 fec9 	bl	8002a3c <HAL_UART_Transmit_DMA>
						HAL_Delay(1000);
 8000caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cae:	f000 fb2d 	bl	800130c <HAL_Delay>
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_f, 2);
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	4961      	ldr	r1, [pc, #388]	; (8000e3c <All_mode+0x598>)
 8000cb6:	485a      	ldr	r0, [pc, #360]	; (8000e20 <All_mode+0x57c>)
 8000cb8:	f001 fec0 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000cbc:	4b59      	ldr	r3, [pc, #356]	; (8000e24 <All_mode+0x580>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000cc2:	4b4f      	ldr	r3, [pc, #316]	; (8000e00 <All_mode+0x55c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
					break;
 8000cc8:	e0e6      	b.n	8000e98 <All_mode+0x5f4>
					chksum = DataIn;
 8000cca:	4a50      	ldr	r2, [pc, #320]	; (8000e0c <All_mode+0x568>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 8000cd0:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <All_mode+0x56c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b57      	ldr	r3, [pc, #348]	; (8000e38 <All_mode+0x594>)
 8000cda:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000cdc:	4b4b      	ldr	r3, [pc, #300]	; (8000e0c <All_mode+0x568>)
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <All_mode+0x594>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 80d9 	bne.w	8000e9c <All_mode+0x5f8>
						M_state = 9;
 8000cea:	4b4b      	ldr	r3, [pc, #300]	; (8000e18 <All_mode+0x574>)
 8000cec:	2209      	movs	r2, #9
 8000cee:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	494a      	ldr	r1, [pc, #296]	; (8000e1c <All_mode+0x578>)
 8000cf4:	484a      	ldr	r0, [pc, #296]	; (8000e20 <All_mode+0x57c>)
 8000cf6:	f001 fea1 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <All_mode+0x580>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000d00:	4b3f      	ldr	r3, [pc, #252]	; (8000e00 <All_mode+0x55c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
					break;
 8000d06:	e0c9      	b.n	8000e9c <All_mode+0x5f8>
					chksum = DataIn;
 8000d08:	4a40      	ldr	r2, [pc, #256]	; (8000e0c <All_mode+0x568>)
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 8000d0e:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <All_mode+0x56c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <All_mode+0x594>)
 8000d18:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000d1a:	4b3c      	ldr	r3, [pc, #240]	; (8000e0c <All_mode+0x568>)
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <All_mode+0x594>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	f040 80bc 	bne.w	8000ea0 <All_mode+0x5fc>
						M_state = 10;
 8000d28:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <All_mode+0x574>)
 8000d2a:	220a      	movs	r2, #10
 8000d2c:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000d2e:	2202      	movs	r2, #2
 8000d30:	493a      	ldr	r1, [pc, #232]	; (8000e1c <All_mode+0x578>)
 8000d32:	483b      	ldr	r0, [pc, #236]	; (8000e20 <All_mode+0x57c>)
 8000d34:	f001 fe82 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <All_mode+0x580>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <All_mode+0x55c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
					break;
 8000d44:	e0ac      	b.n	8000ea0 <All_mode+0x5fc>
					chksum = DataIn;
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <All_mode+0x568>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 8000d4c:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <All_mode+0x56c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <All_mode+0x594>)
 8000d56:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000d58:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <All_mode+0x568>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <All_mode+0x594>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 809f 	bne.w	8000ea4 <All_mode+0x600>
						M_state = 11;
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <All_mode+0x574>)
 8000d68:	220b      	movs	r2, #11
 8000d6a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	492b      	ldr	r1, [pc, #172]	; (8000e1c <All_mode+0x578>)
 8000d70:	482b      	ldr	r0, [pc, #172]	; (8000e20 <All_mode+0x57c>)
 8000d72:	f001 fe63 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <All_mode+0x580>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <All_mode+0x55c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
					break;
 8000d82:	e08f      	b.n	8000ea4 <All_mode+0x600>
					chksum = DataIn;
 8000d84:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <All_mode+0x568>)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <All_mode+0x56c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <All_mode+0x594>)
 8000d94:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <All_mode+0x568>)
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <All_mode+0x594>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f040 8082 	bne.w	8000ea8 <All_mode+0x604>
						M_state = 12;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <All_mode+0x574>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000daa:	2202      	movs	r2, #2
 8000dac:	491b      	ldr	r1, [pc, #108]	; (8000e1c <All_mode+0x578>)
 8000dae:	481c      	ldr	r0, [pc, #112]	; (8000e20 <All_mode+0x57c>)
 8000db0:	f001 fe44 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <All_mode+0x580>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <All_mode+0x55c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
					break;
 8000dc0:	e072      	b.n	8000ea8 <All_mode+0x604>
					chksum = DataIn;
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <All_mode+0x568>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <All_mode+0x56c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <All_mode+0x594>)
 8000dd2:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <All_mode+0x568>)
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <All_mode+0x594>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d165      	bne.n	8000eac <All_mode+0x608>
						M_state = 13;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <All_mode+0x574>)
 8000de2:	220d      	movs	r2, #13
 8000de4:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000de6:	2202      	movs	r2, #2
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <All_mode+0x578>)
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <All_mode+0x57c>)
 8000dec:	f001 fe26 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <All_mode+0x580>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <All_mode+0x55c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
					break;
 8000dfc:	e056      	b.n	8000eac <All_mode+0x608>
 8000dfe:	bf00      	nop
 8000e00:	20000097 	.word	0x20000097
 8000e04:	20000193 	.word	0x20000193
 8000e08:	200001dc 	.word	0x200001dc
 8000e0c:	20000196 	.word	0x20000196
 8000e10:	20000124 	.word	0x20000124
 8000e14:	20000191 	.word	0x20000191
 8000e18:	20000094 	.word	0x20000094
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000198 	.word	0x20000198
 8000e24:	20000096 	.word	0x20000096
 8000e28:	20000190 	.word	0x20000190
 8000e2c:	20000098 	.word	0x20000098
 8000e30:	20000195 	.word	0x20000195
 8000e34:	2000012c 	.word	0x2000012c
 8000e38:	20000194 	.word	0x20000194
 8000e3c:	20000004 	.word	0x20000004
					chksum = DataIn;
 8000e40:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <All_mode+0x618>)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	7013      	strb	r3, [r2, #0]
					chksum1 = ~(StartM);
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <All_mode+0x61c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <All_mode+0x620>)
 8000e50:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <All_mode+0x618>)
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <All_mode+0x620>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d128      	bne.n	8000eb0 <All_mode+0x60c>
						M_state = 14;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <All_mode+0x624>)
 8000e60:	220e      	movs	r2, #14
 8000e62:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000e64:	2202      	movs	r2, #2
 8000e66:	4919      	ldr	r1, [pc, #100]	; (8000ecc <All_mode+0x628>)
 8000e68:	4819      	ldr	r0, [pc, #100]	; (8000ed0 <All_mode+0x62c>)
 8000e6a:	f001 fde7 	bl	8002a3c <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <All_mode+0x630>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <All_mode+0x634>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
					break;
 8000e7a:	e019      	b.n	8000eb0 <All_mode+0x60c>
					break;
 8000e7c:	bf00      	nop
 8000e7e:	e018      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000e80:	bf00      	nop
 8000e82:	e016      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000e84:	bf00      	nop
 8000e86:	e014      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000e88:	bf00      	nop
 8000e8a:	e012      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000e8c:	bf00      	nop
 8000e8e:	e010      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000e90:	bf00      	nop
 8000e92:	e00e      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000e94:	bf00      	nop
 8000e96:	e00c      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000e98:	bf00      	nop
 8000e9a:	e00a      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000e9c:	bf00      	nop
 8000e9e:	e008      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000ea0:	bf00      	nop
 8000ea2:	e006      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000ea4:	bf00      	nop
 8000ea6:	e004      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000ea8:	bf00      	nop
 8000eaa:	e002      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000eac:	bf00      	nop
 8000eae:	e000      	b.n	8000eb2 <All_mode+0x60e>
					break;
 8000eb0:	bf00      	nop
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000196 	.word	0x20000196
 8000ec0:	20000124 	.word	0x20000124
 8000ec4:	20000194 	.word	0x20000194
 8000ec8:	20000094 	.word	0x20000094
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000198 	.word	0x20000198
 8000ed4:	20000096 	.word	0x20000096
 8000ed8:	20000097 	.word	0x20000097

08000edc <HAL_UART_RxCpltCallback>:
//	All_mode();

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);//s
	//HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f3a:	2007      	movs	r0, #7
 8000f3c:	f000 fada 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a4b      	ldr	r2, [pc, #300]	; (8001098 <HAL_UART_MspInit+0x14c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 8090 	bne.w	8001090 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	4b49      	ldr	r3, [pc, #292]	; (800109c <HAL_UART_MspInit+0x150>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_UART_MspInit+0x150>)
 8000f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_UART_MspInit+0x150>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b42      	ldr	r3, [pc, #264]	; (800109c <HAL_UART_MspInit+0x150>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a41      	ldr	r2, [pc, #260]	; (800109c <HAL_UART_MspInit+0x150>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b3f      	ldr	r3, [pc, #252]	; (800109c <HAL_UART_MspInit+0x150>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fa8:	230c      	movs	r3, #12
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4837      	ldr	r0, [pc, #220]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000fc4:	f000 feda 	bl	8001d7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000fc8:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000fca:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fcc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000fd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd6:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001008:	4826      	ldr	r0, [pc, #152]	; (80010a4 <HAL_UART_MspInit+0x158>)
 800100a:	f000 fab5 	bl	8001578 <HAL_DMA_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001014:	f7ff ff6c 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <HAL_UART_MspInit+0x158>)
 800101c:	639a      	str	r2, [r3, #56]	; 0x38
 800101e:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_UART_MspInit+0x160>)
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001028:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_UART_MspInit+0x160>)
 800102c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001030:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_UART_MspInit+0x160>)
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_UART_MspInit+0x160>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_UART_MspInit+0x160>)
 8001040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001044:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_UART_MspInit+0x160>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_UART_MspInit+0x160>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_UART_MspInit+0x160>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_UART_MspInit+0x160>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_UART_MspInit+0x160>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001064:	4811      	ldr	r0, [pc, #68]	; (80010ac <HAL_UART_MspInit+0x160>)
 8001066:	f000 fa87 	bl	8001578 <HAL_DMA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001070:	f7ff ff3e 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_UART_MspInit+0x160>)
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_UART_MspInit+0x160>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2026      	movs	r0, #38	; 0x26
 8001086:	f000 fa40 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800108a:	2026      	movs	r0, #38	; 0x26
 800108c:	f000 fa59 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40004400 	.word	0x40004400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	200000c4 	.word	0x200000c4
 80010a8:	40026088 	.word	0x40026088
 80010ac:	20000130 	.word	0x20000130
 80010b0:	400260a0 	.word	0x400260a0

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f8e4 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <DMA1_Stream5_IRQHandler+0x10>)
 800110e:	f000 fbcb 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000c4 	.word	0x200000c4

0800111c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <DMA1_Stream6_IRQHandler+0x10>)
 8001122:	f000 fbc1 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000130 	.word	0x20000130

08001130 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <USART2_IRQHandler+0x10>)
 8001136:	f001 fd2f 	bl	8002b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000198 	.word	0x20000198

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f002 fd52 	bl	8003c1c <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20020000 	.word	0x20020000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	200000b4 	.word	0x200000b4
 80011ac:	200001f8 	.word	0x200001f8

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f002 fd11 	bl	8003c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f963 	bl	80004d0 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001218:	08003dd8 	.word	0x08003dd8
  ldr r2, =_sbss
 800121c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001220:	200001f4 	.word	0x200001f4

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f94f 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fe4e 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f967 	bl	800155e <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f92f 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000010 	.word	0x20000010
 80012c8:	2000000c 	.word	0x2000000c

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000010 	.word	0x20000010
 80012f0:	200001e0 	.word	0x200001e0

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200001e0 	.word	0x200001e0

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000010 	.word	0x20000010

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff feb6 	bl	80012f4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e099      	b.n	80016c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b4:	e00f      	b.n	80015d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015b6:	f7ff fe9d 	bl	80012f4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d908      	bls.n	80015d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2220      	movs	r2, #32
 80015c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2203      	movs	r2, #3
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e078      	b.n	80016c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e8      	bne.n	80015b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_DMA_Init+0x158>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2b04      	cmp	r3, #4
 800162e:	d107      	bne.n	8001640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4313      	orrs	r3, r2
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f023 0307 	bic.w	r3, r3, #7
 8001656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4313      	orrs	r3, r2
 8001660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	2b04      	cmp	r3, #4
 8001668:	d117      	bne.n	800169a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00e      	beq.n	800169a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fb01 	bl	8001c84 <DMA_CheckFifoParam>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2240      	movs	r2, #64	; 0x40
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001696:	2301      	movs	r3, #1
 8001698:	e016      	b.n	80016c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fab8 	bl	8001c18 <DMA_CalcBaseAndBitshift>
 80016a8:	4603      	mov	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	223f      	movs	r2, #63	; 0x3f
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	f010803f 	.word	0xf010803f

080016d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_DMA_Start_IT+0x26>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e040      	b.n	800177c <HAL_DMA_Start_IT+0xa8>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d12f      	bne.n	800176e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2202      	movs	r2, #2
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fa4a 	bl	8001bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	223f      	movs	r2, #63	; 0x3f
 800172e:	409a      	lsls	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0216 	orr.w	r2, r2, #22
 8001742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0208 	orr.w	r2, r2, #8
 800175a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e005      	b.n	800177a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001792:	f7ff fdaf 	bl	80012f4 <HAL_GetTick>
 8001796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d008      	beq.n	80017b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e052      	b.n	800185c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0216 	bic.w	r2, r2, #22
 80017c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <HAL_DMA_Abort+0x62>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0208 	bic.w	r2, r2, #8
 80017f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001806:	e013      	b.n	8001830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001808:	f7ff fd74 	bl	80012f4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b05      	cmp	r3, #5
 8001814:	d90c      	bls.n	8001830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2220      	movs	r2, #32
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e015      	b.n	800185c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1e4      	bne.n	8001808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	223f      	movs	r2, #63	; 0x3f
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d004      	beq.n	8001882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00c      	b.n	800189c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018b4:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_DMA_IRQHandler+0x258>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a92      	ldr	r2, [pc, #584]	; (8001b04 <HAL_DMA_IRQHandler+0x25c>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0a9b      	lsrs	r3, r3, #10
 80018c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	2208      	movs	r2, #8
 80018d4:	409a      	lsls	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01a      	beq.n	8001914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0204 	bic.w	r2, r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2208      	movs	r2, #8
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2201      	movs	r2, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d012      	beq.n	800194a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2201      	movs	r2, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f043 0202 	orr.w	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	2204      	movs	r2, #4
 8001950:	409a      	lsls	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d012      	beq.n	8001980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00b      	beq.n	8001980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2204      	movs	r2, #4
 800196e:	409a      	lsls	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	f043 0204 	orr.w	r2, r3, #4
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	2210      	movs	r2, #16
 8001986:	409a      	lsls	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d043      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03c      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2210      	movs	r2, #16
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d018      	beq.n	80019ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d024      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
 80019d6:	e01f      	b.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01b      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
 80019e8:	e016      	b.n	8001a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0208 	bic.w	r2, r2, #8
 8001a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 808e 	beq.w	8001b46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8086 	beq.w	8001b46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	2220      	movs	r2, #32
 8001a40:	409a      	lsls	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d136      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0216 	bic.w	r2, r2, #22
 8001a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <HAL_DMA_IRQHandler+0x1da>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0208 	bic.w	r2, r2, #8
 8001a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	223f      	movs	r2, #63	; 0x3f
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d07d      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
        }
        return;
 8001abe:	e078      	b.n	8001bb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01c      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d108      	bne.n	8001aee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d030      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
 8001aec:	e02b      	b.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d027      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e022      	b.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
 8001b00:	20000008 	.word	0x20000008
 8001b04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0210 	bic.w	r2, r2, #16
 8001b24:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d032      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d022      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3301      	adds	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d307      	bcc.n	8001b8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f2      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x2ca>
 8001b8c:	e000      	b.n	8001b90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b8e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bb2:	bf00      	nop
    }
  }
}
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop

08001bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d108      	bne.n	8001bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bfa:	e007      	b.n	8001c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	3b10      	subs	r3, #16
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <DMA_CalcBaseAndBitshift+0x64>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <DMA_CalcBaseAndBitshift+0x68>)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d909      	bls.n	8001c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	1d1a      	adds	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58
 8001c58:	e007      	b.n	8001c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c62:	f023 0303 	bic.w	r3, r3, #3
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	aaaaaaab 	.word	0xaaaaaaab
 8001c80:	08003dc0 	.word	0x08003dc0

08001c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11f      	bne.n	8001cde <DMA_CheckFifoParam+0x5a>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d856      	bhi.n	8001d52 <DMA_CheckFifoParam+0xce>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <DMA_CheckFifoParam+0x28>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001ccf 	.word	0x08001ccf
 8001cb4:	08001cbd 	.word	0x08001cbd
 8001cb8:	08001d53 	.word	0x08001d53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d046      	beq.n	8001d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ccc:	e043      	b.n	8001d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cd6:	d140      	bne.n	8001d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cdc:	e03d      	b.n	8001d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce6:	d121      	bne.n	8001d2c <DMA_CheckFifoParam+0xa8>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d837      	bhi.n	8001d5e <DMA_CheckFifoParam+0xda>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <DMA_CheckFifoParam+0x70>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d0b 	.word	0x08001d0b
 8001cfc:	08001d05 	.word	0x08001d05
 8001d00:	08001d1d 	.word	0x08001d1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
      break;
 8001d08:	e030      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d025      	beq.n	8001d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d1a:	e022      	b.n	8001d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d24:	d11f      	bne.n	8001d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d2a:	e01c      	b.n	8001d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d903      	bls.n	8001d3a <DMA_CheckFifoParam+0xb6>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d003      	beq.n	8001d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d38:	e018      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d3e:	e015      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00e      	beq.n	8001d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d50:	e00b      	b.n	8001d6a <DMA_CheckFifoParam+0xe6>
      break;
 8001d52:	bf00      	nop
 8001d54:	e00a      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d56:	bf00      	nop
 8001d58:	e008      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d5a:	bf00      	nop
 8001d5c:	e006      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d5e:	bf00      	nop
 8001d60:	e004      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d62:	bf00      	nop
 8001d64:	e002      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d66:	bf00      	nop
 8001d68:	e000      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e159      	b.n	800204c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8148 	bne.w	8002046 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a2 	beq.w	8002046 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b57      	ldr	r3, [pc, #348]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a56      	ldr	r2, [pc, #344]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b54      	ldr	r3, [pc, #336]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a49      	ldr	r2, [pc, #292]	; (800206c <HAL_GPIO_Init+0x2f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x202>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_GPIO_Init+0x2f4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x1fe>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a47      	ldr	r2, [pc, #284]	; (8002074 <HAL_GPIO_Init+0x2f8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a46      	ldr	r2, [pc, #280]	; (8002078 <HAL_GPIO_Init+0x2fc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x1f6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a45      	ldr	r2, [pc, #276]	; (800207c <HAL_GPIO_Init+0x300>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x1f2>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f90:	4935      	ldr	r1, [pc, #212]	; (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc2:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002016:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x304>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f67f aea2 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40013800 	.word	0x40013800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020800 	.word	0x40020800
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e264      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d075      	beq.n	80021c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d6:	4ba3      	ldr	r3, [pc, #652]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d00c      	beq.n	80020fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4ba0      	ldr	r3, [pc, #640]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d112      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b9d      	ldr	r3, [pc, #628]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b99      	ldr	r3, [pc, #612]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05b      	beq.n	80021c0 <HAL_RCC_OscConfig+0x108>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d157      	bne.n	80021c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e23f      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x74>
 800211e:	4b91      	ldr	r3, [pc, #580]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a90      	ldr	r2, [pc, #576]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b8b      	ldr	r3, [pc, #556]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a8a      	ldr	r2, [pc, #552]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a87      	ldr	r2, [pc, #540]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 8002150:	4b84      	ldr	r3, [pc, #528]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a83      	ldr	r2, [pc, #524]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b81      	ldr	r3, [pc, #516]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a80      	ldr	r2, [pc, #512]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f8c0 	bl	80012f4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f8bc 	bl	80012f4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e204      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b76      	ldr	r3, [pc, #472]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xc0>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff f8ac 	bl	80012f4 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f8a8 	bl	80012f4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1f0      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b6c      	ldr	r3, [pc, #432]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0xe8>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ce:	4b65      	ldr	r3, [pc, #404]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b62      	ldr	r3, [pc, #392]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1c4      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b56      	ldr	r3, [pc, #344]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4952      	ldr	r1, [pc, #328]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <HAL_RCC_OscConfig+0x2b0>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff f861 	bl	80012f4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff f85d 	bl	80012f4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1a5      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4940      	ldr	r1, [pc, #256]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_RCC_OscConfig+0x2b0>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f840 	bl	80012f4 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002278:	f7ff f83c 	bl	80012f4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e184      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d030      	beq.n	8002304 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_RCC_OscConfig+0x2b4>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff f820 	bl	80012f4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff f81c 	bl	80012f4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e164      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x200>
 80022d6:	e015      	b.n	8002304 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_OscConfig+0x2b4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7ff f809 	bl	80012f4 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e6:	f7ff f805 	bl	80012f4 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e14d      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a0 	beq.w	8002452 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_OscConfig+0x2b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d121      	bne.n	8002392 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_OscConfig+0x2b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a07      	ldr	r2, [pc, #28]	; (8002370 <HAL_RCC_OscConfig+0x2b8>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7fe ffcb 	bl	80012f4 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	e011      	b.n	8002386 <HAL_RCC_OscConfig+0x2ce>
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	42470000 	.word	0x42470000
 800236c:	42470e80 	.word	0x42470e80
 8002370:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002374:	f7fe ffbe 	bl	80012f4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e106      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b85      	ldr	r3, [pc, #532]	; (800259c <HAL_RCC_OscConfig+0x4e4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d106      	bne.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
 800239a:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a80      	ldr	r2, [pc, #512]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
 80023a6:	e01c      	b.n	80023e2 <HAL_RCC_OscConfig+0x32a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d10c      	bne.n	80023ca <HAL_RCC_OscConfig+0x312>
 80023b0:	4b7b      	ldr	r3, [pc, #492]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a7a      	ldr	r2, [pc, #488]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	4b78      	ldr	r3, [pc, #480]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a77      	ldr	r2, [pc, #476]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	e00b      	b.n	80023e2 <HAL_RCC_OscConfig+0x32a>
 80023ca:	4b75      	ldr	r3, [pc, #468]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a74      	ldr	r2, [pc, #464]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
 80023d6:	4b72      	ldr	r3, [pc, #456]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a71      	ldr	r2, [pc, #452]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80023dc:	f023 0304 	bic.w	r3, r3, #4
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d015      	beq.n	8002416 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe ff83 	bl	80012f4 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe ff7f 	bl	80012f4 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0c5      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RCC_OscConfig+0x33a>
 8002414:	e014      	b.n	8002440 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7fe ff6d 	bl	80012f4 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe ff69 	bl	80012f4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0af      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ee      	bne.n	800241e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d105      	bne.n	8002452 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002446:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a55      	ldr	r2, [pc, #340]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 809b 	beq.w	8002592 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d05c      	beq.n	8002522 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d141      	bne.n	80024f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b4c      	ldr	r3, [pc, #304]	; (80025a4 <HAL_RCC_OscConfig+0x4ec>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe ff3d 	bl	80012f4 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7fe ff39 	bl	80012f4 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e081      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002490:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f0      	bne.n	800247e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	019b      	lsls	r3, r3, #6
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	3b01      	subs	r3, #1
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	061b      	lsls	r3, r3, #24
 80024c0:	4937      	ldr	r1, [pc, #220]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <HAL_RCC_OscConfig+0x4ec>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe ff12 	bl	80012f4 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe ff0e 	bl	80012f4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e056      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x41c>
 80024f2:	e04e      	b.n	8002592 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCC_OscConfig+0x4ec>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe fefb 	bl	80012f4 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe fef7 	bl	80012f4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e03f      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002514:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x44a>
 8002520:	e037      	b.n	8002592 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e032      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_RCC_OscConfig+0x4e8>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d028      	beq.n	800258e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d121      	bne.n	800258e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d11a      	bne.n	800258e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002564:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002566:	4293      	cmp	r3, r2
 8002568:	d111      	bne.n	800258e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d107      	bne.n	800258e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40007000 	.word	0x40007000
 80025a0:	40023800 	.word	0x40023800
 80025a4:	42470060 	.word	0x42470060

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe fe2c 	bl	80012f4 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fe28 	bl	80012f4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f821 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fd8c 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	08003da8 	.word	0x08003da8
 800276c:	20000008 	.word	0x20000008
 8002770:	2000000c 	.word	0x2000000c

08002774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	2300      	movs	r3, #0
 8002786:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278c:	4b67      	ldr	r3, [pc, #412]	; (800292c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d00d      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002798:	2b08      	cmp	r3, #8
 800279a:	f200 80bd 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x1a4>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x34>
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x3a>
 80027a6:	e0b7      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b61      	ldr	r3, [pc, #388]	; (8002930 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027aa:	60bb      	str	r3, [r7, #8]
       break;
 80027ac:	e0b7      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ae:	4b61      	ldr	r3, [pc, #388]	; (8002934 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027b0:	60bb      	str	r3, [r7, #8]
      break;
 80027b2:	e0b4      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b4:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027be:	4b5b      	ldr	r3, [pc, #364]	; (800292c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d04d      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ca:	4b58      	ldr	r3, [pc, #352]	; (800292c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	099b      	lsrs	r3, r3, #6
 80027d0:	461a      	mov	r2, r3
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	ea02 0800 	and.w	r8, r2, r0
 80027e2:	ea03 0901 	and.w	r9, r3, r1
 80027e6:	4640      	mov	r0, r8
 80027e8:	4649      	mov	r1, r9
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	014b      	lsls	r3, r1, #5
 80027f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027f8:	0142      	lsls	r2, r0, #5
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	ebb0 0008 	subs.w	r0, r0, r8
 8002802:	eb61 0109 	sbc.w	r1, r1, r9
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	018b      	lsls	r3, r1, #6
 8002810:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002814:	0182      	lsls	r2, r0, #6
 8002816:	1a12      	subs	r2, r2, r0
 8002818:	eb63 0301 	sbc.w	r3, r3, r1
 800281c:	f04f 0000 	mov.w	r0, #0
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	00d9      	lsls	r1, r3, #3
 8002826:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800282a:	00d0      	lsls	r0, r2, #3
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	eb12 0208 	adds.w	r2, r2, r8
 8002834:	eb43 0309 	adc.w	r3, r3, r9
 8002838:	f04f 0000 	mov.w	r0, #0
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	0259      	lsls	r1, r3, #9
 8002842:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002846:	0250      	lsls	r0, r2, #9
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	f7fd fcbe 	bl	80001d8 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e04a      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	461a      	mov	r2, r3
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	ea02 0400 	and.w	r4, r2, r0
 800287e:	ea03 0501 	and.w	r5, r3, r1
 8002882:	4620      	mov	r0, r4
 8002884:	4629      	mov	r1, r5
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	014b      	lsls	r3, r1, #5
 8002890:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002894:	0142      	lsls	r2, r0, #5
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	1b00      	subs	r0, r0, r4
 800289c:	eb61 0105 	sbc.w	r1, r1, r5
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	018b      	lsls	r3, r1, #6
 80028aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028ae:	0182      	lsls	r2, r0, #6
 80028b0:	1a12      	subs	r2, r2, r0
 80028b2:	eb63 0301 	sbc.w	r3, r3, r1
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	00d9      	lsls	r1, r3, #3
 80028c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028c4:	00d0      	lsls	r0, r2, #3
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	1912      	adds	r2, r2, r4
 80028cc:	eb45 0303 	adc.w	r3, r5, r3
 80028d0:	f04f 0000 	mov.w	r0, #0
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	0299      	lsls	r1, r3, #10
 80028da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028de:	0290      	lsls	r0, r2, #10
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f7fd fc72 	bl	80001d8 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	60bb      	str	r3, [r7, #8]
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800291a:	60bb      	str	r3, [r7, #8]
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	68bb      	ldr	r3, [r7, #8]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	00f42400 	.word	0x00f42400
 8002934:	007a1200 	.word	0x007a1200

08002938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_RCC_GetHCLKFreq+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000008 	.word	0x20000008

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002954:	f7ff fff0 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0a9b      	lsrs	r3, r3, #10
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	; (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	08003db8 	.word	0x08003db8

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800297c:	f7ff ffdc 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0b5b      	lsrs	r3, r3, #13
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	; (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	08003db8 	.word	0x08003db8

080029a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e03f      	b.n	8002a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fac0 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 ff49 	bl	800387c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	; 0x30
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d165      	bne.n	8002b22 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_UART_Transmit_DMA+0x26>
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e05e      	b.n	8002b24 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_UART_Transmit_DMA+0x38>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e057      	b.n	8002b24 <HAL_UART_Transmit_DMA+0xe8>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2221      	movs	r2, #33	; 0x21
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <HAL_UART_Transmit_DMA+0xf0>)
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <HAL_UART_Transmit_DMA+0xf4>)
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <HAL_UART_Transmit_DMA+0xf8>)
 8002ab2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab8:	2200      	movs	r2, #0
 8002aba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002abc:	f107 0308 	add.w	r3, r7, #8
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	f7fe fdfe 	bl	80016d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3314      	adds	r3, #20
 8002af0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	617b      	str	r3, [r7, #20]
   return(result);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8002b0c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6a39      	ldr	r1, [r7, #32]
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e5      	bne.n	8002aea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
  }
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3730      	adds	r7, #48	; 0x30
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	0800311d 	.word	0x0800311d
 8002b30:	080031b7 	.word	0x080031b7
 8002b34:	0800332f 	.word	0x0800332f

08002b38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d11d      	bne.n	8002b8e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_UART_Receive_DMA+0x26>
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e016      	b.n	8002b90 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Receive_DMA+0x38>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e00f      	b.n	8002b90 <HAL_UART_Receive_DMA+0x58>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	461a      	mov	r2, r3
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fc1d 	bl	80033c4 <UART_Start_Receive_DMA>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	e000      	b.n	8002b90 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0ba      	sub	sp, #232	; 0xe8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_UART_IRQHandler+0x66>
 8002bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fd85 	bl	8003706 <UART_Receive_IT>
      return;
 8002bfc:	e256      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80de 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x22c>
 8002c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80d1 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_UART_IRQHandler+0xae>
 8002c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_UART_IRQHandler+0xd2>
 8002c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_UART_IRQHandler+0xf6>
 8002c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d011      	beq.n	8002cbe <HAL_UART_IRQHandler+0x126>
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0208 	orr.w	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 81ed 	beq.w	80030a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x14e>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fd10 	bl	8003706 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_UART_IRQHandler+0x17a>
 8002d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d04f      	beq.n	8002db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fc18 	bl	8003548 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b40      	cmp	r3, #64	; 0x40
 8002d24:	d141      	bne.n	8002daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1d9      	bne.n	8002d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d013      	beq.n	8002da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	4a7d      	ldr	r2, [pc, #500]	; (8002f74 <HAL_UART_IRQHandler+0x3dc>)
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fd6c 	bl	8001864 <HAL_DMA_Abort_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	e00e      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9a4 	bl	80030f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	e00a      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f9a0 	bl	80030f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e006      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f99c 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002dbe:	e170      	b.n	80030a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	bf00      	nop
    return;
 8002dc2:	e16e      	b.n	80030a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f040 814a 	bne.w	8003062 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8143 	beq.w	8003062 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 813c 	beq.w	8003062 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	f040 80b4 	bne.w	8002f78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8140 	beq.w	80030a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	f080 8139 	bcs.w	80030a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	f000 8088 	beq.w	8002f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1d9      	bne.n	8002e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e1      	bne.n	8002e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e3      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2a:	f023 0310 	bic.w	r3, r3, #16
 8002f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e3      	bne.n	8002f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fc15 	bl	8001784 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f8ca 	bl	8003104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f70:	e099      	b.n	80030a6 <HAL_UART_IRQHandler+0x50e>
 8002f72:	bf00      	nop
 8002f74:	0800360f 	.word	0x0800360f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 808b 	beq.w	80030aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8086 	beq.w	80030aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e3      	bne.n	8002f9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e3      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	60fb      	str	r3, [r7, #12]
   return(result);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0310 	bic.w	r3, r3, #16
 8003032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003040:	61fa      	str	r2, [r7, #28]
 8003042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	617b      	str	r3, [r7, #20]
   return(result);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e3      	bne.n	800301c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f852 	bl	8003104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003060:	e023      	b.n	80030aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_UART_IRQHandler+0x4ea>
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fadb 	bl	8003636 <UART_Transmit_IT>
    return;
 8003080:	e014      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00e      	beq.n	80030ac <HAL_UART_IRQHandler+0x514>
 800308e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fb1b 	bl	80036d6 <UART_EndTransmit_IT>
    return;
 80030a0:	e004      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
    return;
 80030a2:	bf00      	nop
 80030a4:	e002      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
      return;
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
      return;
 80030aa:	bf00      	nop
  }
}
 80030ac:	37e8      	adds	r7, #232	; 0xe8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b090      	sub	sp, #64	; 0x40
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d137      	bne.n	80031a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	2200      	movs	r2, #0
 800313c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800313e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	623b      	str	r3, [r7, #32]
   return(result);
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003154:	63bb      	str	r3, [r7, #56]	; 0x38
 8003156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800315e:	633a      	str	r2, [r7, #48]	; 0x30
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e5      	bne.n	800313e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	60fb      	str	r3, [r7, #12]
   return(result);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003192:	61fa      	str	r2, [r7, #28]
 8003194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	617b      	str	r3, [r7, #20]
   return(result);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031a6:	e002      	b.n	80031ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80031a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031aa:	f7ff ff83 	bl	80030b4 <HAL_UART_TxCpltCallback>
}
 80031ae:	bf00      	nop
 80031b0:	3740      	adds	r7, #64	; 0x40
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff ff7f 	bl	80030c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b09c      	sub	sp, #112	; 0x70
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d172      	bne.n	80032d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80031ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f0:	2200      	movs	r2, #0
 80031f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003214:	65ba      	str	r2, [r7, #88]	; 0x58
 8003216:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800321a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321c:	e841 2300 	strex	r3, r2, [r1]
 8003220:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e5      	bne.n	80031f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3314      	adds	r3, #20
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	667b      	str	r3, [r7, #100]	; 0x64
 8003240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3314      	adds	r3, #20
 8003246:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003248:	647a      	str	r2, [r7, #68]	; 0x44
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800324e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e5      	bne.n	8003228 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	623b      	str	r3, [r7, #32]
   return(result);
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003272:	663b      	str	r3, [r7, #96]	; 0x60
 8003274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3314      	adds	r3, #20
 800327a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800327c:	633a      	str	r2, [r7, #48]	; 0x30
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	2b01      	cmp	r3, #1
 800329e:	d119      	bne.n	80032d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0310 	bic.w	r3, r3, #16
 80032b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032c0:	61fa      	str	r2, [r7, #28]
 80032c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	617b      	str	r3, [r7, #20]
   return(result);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e5      	bne.n	80032a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d106      	bne.n	80032ea <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032e0:	4619      	mov	r1, r3
 80032e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032e4:	f7ff ff0e 	bl	8003104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032e8:	e002      	b.n	80032f0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80032ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032ec:	f7fd fdf6 	bl	8000edc <HAL_UART_RxCpltCallback>
}
 80032f0:	bf00      	nop
 80032f2:	3770      	adds	r7, #112	; 0x70
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	2b01      	cmp	r3, #1
 800330c:	d108      	bne.n	8003320 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff fef3 	bl	8003104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800331e:	e002      	b.n	8003326 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fedb 	bl	80030dc <HAL_UART_RxHalfCpltCallback>
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	2b80      	cmp	r3, #128	; 0x80
 800334c:	bf0c      	ite	eq
 800334e:	2301      	moveq	r3, #1
 8003350:	2300      	movne	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b21      	cmp	r3, #33	; 0x21
 8003360:	d108      	bne.n	8003374 <UART_DMAError+0x46>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2200      	movs	r2, #0
 800336c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800336e:	68b8      	ldr	r0, [r7, #8]
 8003370:	f000 f8c2 	bl	80034f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b40      	cmp	r3, #64	; 0x40
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b22      	cmp	r3, #34	; 0x22
 8003394:	d108      	bne.n	80033a8 <UART_DMAError+0x7a>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80033a2:	68b8      	ldr	r0, [r7, #8]
 80033a4:	f000 f8d0 	bl	8003548 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f043 0210 	orr.w	r2, r3, #16
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033b4:	68b8      	ldr	r0, [r7, #8]
 80033b6:	f7ff fe9b 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b098      	sub	sp, #96	; 0x60
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2222      	movs	r2, #34	; 0x22
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	4a3e      	ldr	r2, [pc, #248]	; (80034ec <UART_Start_Receive_DMA+0x128>)
 80033f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	4a3d      	ldr	r2, [pc, #244]	; (80034f0 <UART_Start_Receive_DMA+0x12c>)
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	4a3c      	ldr	r2, [pc, #240]	; (80034f4 <UART_Start_Receive_DMA+0x130>)
 8003402:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	2200      	movs	r2, #0
 800340a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	f7fe f956 	bl	80016d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	65bb      	str	r3, [r7, #88]	; 0x58
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	330c      	adds	r3, #12
 8003464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003466:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800346c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e5      	bne.n	8003446 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3314      	adds	r3, #20
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	657b      	str	r3, [r7, #84]	; 0x54
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800349a:	63ba      	str	r2, [r7, #56]	; 0x38
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e5      	bne.n	800347a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3314      	adds	r3, #20
 80034b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	617b      	str	r3, [r7, #20]
   return(result);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c4:	653b      	str	r3, [r7, #80]	; 0x50
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034ce:	627a      	str	r2, [r7, #36]	; 0x24
 80034d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6a39      	ldr	r1, [r7, #32]
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	61fb      	str	r3, [r7, #28]
   return(result);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e5      	bne.n	80034ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3760      	adds	r7, #96	; 0x60
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	080031d3 	.word	0x080031d3
 80034f0:	080032f9 	.word	0x080032f9
 80034f4:	0800332f 	.word	0x0800332f

080034f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	61ba      	str	r2, [r7, #24]
 8003522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6979      	ldr	r1, [r7, #20]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	613b      	str	r3, [r7, #16]
   return(result);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800353c:	bf00      	nop
 800353e:	3724      	adds	r7, #36	; 0x24
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003548:	b480      	push	{r7}
 800354a:	b095      	sub	sp, #84	; 0x54
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003570:	643a      	str	r2, [r7, #64]	; 0x40
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e5      	bne.n	8003550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3314      	adds	r3, #20
 800358a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	61fb      	str	r3, [r7, #28]
   return(result);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e5      	bne.n	8003584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d119      	bne.n	80035f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f023 0310 	bic.w	r3, r3, #16
 80035d6:	647b      	str	r3, [r7, #68]	; 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035e0:	61ba      	str	r2, [r7, #24]
 80035e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6979      	ldr	r1, [r7, #20]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	613b      	str	r3, [r7, #16]
   return(result);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e5      	bne.n	80035c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003602:	bf00      	nop
 8003604:	3754      	adds	r7, #84	; 0x54
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff fd61 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b21      	cmp	r3, #33	; 0x21
 8003648:	d13e      	bne.n	80036c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003652:	d114      	bne.n	800367e <UART_Transmit_IT+0x48>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d110      	bne.n	800367e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003670:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	1c9a      	adds	r2, r3, #2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	621a      	str	r2, [r3, #32]
 800367c:	e008      	b.n	8003690 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	1c59      	adds	r1, r3, #1
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6211      	str	r1, [r2, #32]
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29b      	uxth	r3, r3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4619      	mov	r1, r3
 800369e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10f      	bne.n	80036c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fcdc 	bl	80030b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b08c      	sub	sp, #48	; 0x30
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b22      	cmp	r3, #34	; 0x22
 8003718:	f040 80ab 	bne.w	8003872 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	d117      	bne.n	8003756 <UART_Receive_IT+0x50>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d113      	bne.n	8003756 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	b29a      	uxth	r2, r3
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
 8003754:	e026      	b.n	80037a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800375c:	2300      	movs	r3, #0
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003768:	d007      	beq.n	800377a <UART_Receive_IT+0x74>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <UART_Receive_IT+0x82>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e008      	b.n	800379a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003794:	b2da      	uxtb	r2, r3
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4619      	mov	r1, r3
 80037b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d15a      	bne.n	800386e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0220 	bic.w	r2, r2, #32
 80037c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d135      	bne.n	8003864 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	613b      	str	r3, [r7, #16]
   return(result);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f023 0310 	bic.w	r3, r3, #16
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	623a      	str	r2, [r7, #32]
 8003820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	69f9      	ldr	r1, [r7, #28]
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	61bb      	str	r3, [r7, #24]
   return(result);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e5      	bne.n	80037fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b10      	cmp	r3, #16
 800383e:	d10a      	bne.n	8003856 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800385a:	4619      	mov	r1, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fc51 	bl	8003104 <HAL_UARTEx_RxEventCallback>
 8003862:	e002      	b.n	800386a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7fd fb39 	bl	8000edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e002      	b.n	8003874 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	3730      	adds	r7, #48	; 0x30
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	b09f      	sub	sp, #124	; 0x7c
 8003882:	af00      	add	r7, sp, #0
 8003884:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003892:	68d9      	ldr	r1, [r3, #12]
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	ea40 0301 	orr.w	r3, r0, r1
 800389c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800389e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80038b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c0:	f021 010c 	bic.w	r1, r1, #12
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ca:	430b      	orrs	r3, r1
 80038cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	6999      	ldr	r1, [r3, #24]
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	ea40 0301 	orr.w	r3, r0, r1
 80038e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4bc5      	ldr	r3, [pc, #788]	; (8003c00 <UART_SetConfig+0x384>)
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d004      	beq.n	80038fa <UART_SetConfig+0x7e>
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4bc3      	ldr	r3, [pc, #780]	; (8003c04 <UART_SetConfig+0x388>)
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d103      	bne.n	8003902 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038fa:	f7ff f83d 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 80038fe:	6778      	str	r0, [r7, #116]	; 0x74
 8003900:	e002      	b.n	8003908 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003902:	f7ff f825 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8003906:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	f040 80b6 	bne.w	8003a80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003916:	461c      	mov	r4, r3
 8003918:	f04f 0500 	mov.w	r5, #0
 800391c:	4622      	mov	r2, r4
 800391e:	462b      	mov	r3, r5
 8003920:	1891      	adds	r1, r2, r2
 8003922:	6439      	str	r1, [r7, #64]	; 0x40
 8003924:	415b      	adcs	r3, r3
 8003926:	647b      	str	r3, [r7, #68]	; 0x44
 8003928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800392c:	1912      	adds	r2, r2, r4
 800392e:	eb45 0303 	adc.w	r3, r5, r3
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	00d9      	lsls	r1, r3, #3
 800393c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003940:	00d0      	lsls	r0, r2, #3
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	1911      	adds	r1, r2, r4
 8003948:	6639      	str	r1, [r7, #96]	; 0x60
 800394a:	416b      	adcs	r3, r5
 800394c:	667b      	str	r3, [r7, #100]	; 0x64
 800394e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	461a      	mov	r2, r3
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	1891      	adds	r1, r2, r2
 800395a:	63b9      	str	r1, [r7, #56]	; 0x38
 800395c:	415b      	adcs	r3, r3
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003964:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003968:	f7fc fc36 	bl	80001d8 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4ba5      	ldr	r3, [pc, #660]	; (8003c08 <UART_SetConfig+0x38c>)
 8003972:	fba3 2302 	umull	r2, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	011e      	lsls	r6, r3, #4
 800397a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397c:	461c      	mov	r4, r3
 800397e:	f04f 0500 	mov.w	r5, #0
 8003982:	4622      	mov	r2, r4
 8003984:	462b      	mov	r3, r5
 8003986:	1891      	adds	r1, r2, r2
 8003988:	6339      	str	r1, [r7, #48]	; 0x30
 800398a:	415b      	adcs	r3, r3
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
 800398e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003992:	1912      	adds	r2, r2, r4
 8003994:	eb45 0303 	adc.w	r3, r5, r3
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	00d9      	lsls	r1, r3, #3
 80039a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a6:	00d0      	lsls	r0, r2, #3
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	1911      	adds	r1, r2, r4
 80039ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80039b0:	416b      	adcs	r3, r5
 80039b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	461a      	mov	r2, r3
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80039c2:	415b      	adcs	r3, r3
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039ce:	f7fc fc03 	bl	80001d8 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4b8c      	ldr	r3, [pc, #560]	; (8003c08 <UART_SetConfig+0x38c>)
 80039d8:	fba3 1302 	umull	r1, r3, r3, r2
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	2164      	movs	r1, #100	; 0x64
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	3332      	adds	r3, #50	; 0x32
 80039ea:	4a87      	ldr	r2, [pc, #540]	; (8003c08 <UART_SetConfig+0x38c>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039f8:	441e      	add	r6, r3
 80039fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fc:	4618      	mov	r0, r3
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	1894      	adds	r4, r2, r2
 8003a08:	623c      	str	r4, [r7, #32]
 8003a0a:	415b      	adcs	r3, r3
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a12:	1812      	adds	r2, r2, r0
 8003a14:	eb41 0303 	adc.w	r3, r1, r3
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	f04f 0500 	mov.w	r5, #0
 8003a20:	00dd      	lsls	r5, r3, #3
 8003a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a26:	00d4      	lsls	r4, r2, #3
 8003a28:	4622      	mov	r2, r4
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	1814      	adds	r4, r2, r0
 8003a2e:	653c      	str	r4, [r7, #80]	; 0x50
 8003a30:	414b      	adcs	r3, r1
 8003a32:	657b      	str	r3, [r7, #84]	; 0x54
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	1891      	adds	r1, r2, r2
 8003a40:	61b9      	str	r1, [r7, #24]
 8003a42:	415b      	adcs	r3, r3
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a4e:	f7fc fbc3 	bl	80001d8 <__aeabi_uldivmod>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <UART_SetConfig+0x38c>)
 8003a58:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	2164      	movs	r1, #100	; 0x64
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	3332      	adds	r3, #50	; 0x32
 8003a6a:	4a67      	ldr	r2, [pc, #412]	; (8003c08 <UART_SetConfig+0x38c>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	f003 0207 	and.w	r2, r3, #7
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4432      	add	r2, r6
 8003a7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a7e:	e0b9      	b.n	8003bf4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a82:	461c      	mov	r4, r3
 8003a84:	f04f 0500 	mov.w	r5, #0
 8003a88:	4622      	mov	r2, r4
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	6139      	str	r1, [r7, #16]
 8003a90:	415b      	adcs	r3, r3
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a98:	1912      	adds	r2, r2, r4
 8003a9a:	eb45 0303 	adc.w	r3, r5, r3
 8003a9e:	f04f 0000 	mov.w	r0, #0
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	00d9      	lsls	r1, r3, #3
 8003aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aac:	00d0      	lsls	r0, r2, #3
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	eb12 0804 	adds.w	r8, r2, r4
 8003ab6:	eb43 0905 	adc.w	r9, r3, r5
 8003aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	008b      	lsls	r3, r1, #2
 8003ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ad2:	0082      	lsls	r2, r0, #2
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	f7fc fb7e 	bl	80001d8 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <UART_SetConfig+0x38c>)
 8003ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	011e      	lsls	r6, r3, #4
 8003aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aec:	4618      	mov	r0, r3
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	1894      	adds	r4, r2, r2
 8003af8:	60bc      	str	r4, [r7, #8]
 8003afa:	415b      	adcs	r3, r3
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b02:	1812      	adds	r2, r2, r0
 8003b04:	eb41 0303 	adc.w	r3, r1, r3
 8003b08:	f04f 0400 	mov.w	r4, #0
 8003b0c:	f04f 0500 	mov.w	r5, #0
 8003b10:	00dd      	lsls	r5, r3, #3
 8003b12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b16:	00d4      	lsls	r4, r2, #3
 8003b18:	4622      	mov	r2, r4
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	1814      	adds	r4, r2, r0
 8003b1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b20:	414b      	adcs	r3, r1
 8003b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	008b      	lsls	r3, r1, #2
 8003b38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b3c:	0082      	lsls	r2, r0, #2
 8003b3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b42:	f7fc fb49 	bl	80001d8 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <UART_SetConfig+0x38c>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	; 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	3332      	adds	r3, #50	; 0x32
 8003b5e:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <UART_SetConfig+0x38c>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6a:	441e      	add	r6, r3
 8003b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	1894      	adds	r4, r2, r2
 8003b7a:	603c      	str	r4, [r7, #0]
 8003b7c:	415b      	adcs	r3, r3
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b84:	1812      	adds	r2, r2, r0
 8003b86:	eb41 0303 	adc.w	r3, r1, r3
 8003b8a:	f04f 0400 	mov.w	r4, #0
 8003b8e:	f04f 0500 	mov.w	r5, #0
 8003b92:	00dd      	lsls	r5, r3, #3
 8003b94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b98:	00d4      	lsls	r4, r2, #3
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	eb12 0a00 	adds.w	sl, r2, r0
 8003ba2:	eb43 0b01 	adc.w	fp, r3, r1
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	008b      	lsls	r3, r1, #2
 8003bba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bbe:	0082      	lsls	r2, r0, #2
 8003bc0:	4650      	mov	r0, sl
 8003bc2:	4659      	mov	r1, fp
 8003bc4:	f7fc fb08 	bl	80001d8 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <UART_SetConfig+0x38c>)
 8003bce:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2164      	movs	r1, #100	; 0x64
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <UART_SetConfig+0x38c>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4432      	add	r2, r6
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	377c      	adds	r7, #124	; 0x7c
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfe:	bf00      	nop
 8003c00:	40011000 	.word	0x40011000
 8003c04:	40011400 	.word	0x40011400
 8003c08:	51eb851f 	.word	0x51eb851f

08003c0c <calloc>:
 8003c0c:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <calloc+0xc>)
 8003c0e:	460a      	mov	r2, r1
 8003c10:	4601      	mov	r1, r0
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	f000 b834 	b.w	8003c80 <_calloc_r>
 8003c18:	20000014 	.word	0x20000014

08003c1c <__errno>:
 8003c1c:	4b01      	ldr	r3, [pc, #4]	; (8003c24 <__errno+0x8>)
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000014 	.word	0x20000014

08003c28 <__libc_init_array>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4d0d      	ldr	r5, [pc, #52]	; (8003c60 <__libc_init_array+0x38>)
 8003c2c:	4c0d      	ldr	r4, [pc, #52]	; (8003c64 <__libc_init_array+0x3c>)
 8003c2e:	1b64      	subs	r4, r4, r5
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	2600      	movs	r6, #0
 8003c34:	42a6      	cmp	r6, r4
 8003c36:	d109      	bne.n	8003c4c <__libc_init_array+0x24>
 8003c38:	4d0b      	ldr	r5, [pc, #44]	; (8003c68 <__libc_init_array+0x40>)
 8003c3a:	4c0c      	ldr	r4, [pc, #48]	; (8003c6c <__libc_init_array+0x44>)
 8003c3c:	f000 f8a8 	bl	8003d90 <_init>
 8003c40:	1b64      	subs	r4, r4, r5
 8003c42:	10a4      	asrs	r4, r4, #2
 8003c44:	2600      	movs	r6, #0
 8003c46:	42a6      	cmp	r6, r4
 8003c48:	d105      	bne.n	8003c56 <__libc_init_array+0x2e>
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c50:	4798      	blx	r3
 8003c52:	3601      	adds	r6, #1
 8003c54:	e7ee      	b.n	8003c34 <__libc_init_array+0xc>
 8003c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5a:	4798      	blx	r3
 8003c5c:	3601      	adds	r6, #1
 8003c5e:	e7f2      	b.n	8003c46 <__libc_init_array+0x1e>
 8003c60:	08003dd0 	.word	0x08003dd0
 8003c64:	08003dd0 	.word	0x08003dd0
 8003c68:	08003dd0 	.word	0x08003dd0
 8003c6c:	08003dd4 	.word	0x08003dd4

08003c70 <memset>:
 8003c70:	4402      	add	r2, r0
 8003c72:	4603      	mov	r3, r0
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d100      	bne.n	8003c7a <memset+0xa>
 8003c78:	4770      	bx	lr
 8003c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7e:	e7f9      	b.n	8003c74 <memset+0x4>

08003c80 <_calloc_r>:
 8003c80:	b513      	push	{r0, r1, r4, lr}
 8003c82:	434a      	muls	r2, r1
 8003c84:	4611      	mov	r1, r2
 8003c86:	9201      	str	r2, [sp, #4]
 8003c88:	f000 f80a 	bl	8003ca0 <_malloc_r>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	b118      	cbz	r0, 8003c98 <_calloc_r+0x18>
 8003c90:	9a01      	ldr	r2, [sp, #4]
 8003c92:	2100      	movs	r1, #0
 8003c94:	f7ff ffec 	bl	8003c70 <memset>
 8003c98:	4620      	mov	r0, r4
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bd10      	pop	{r4, pc}
	...

08003ca0 <_malloc_r>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	1ccd      	adds	r5, r1, #3
 8003ca4:	f025 0503 	bic.w	r5, r5, #3
 8003ca8:	3508      	adds	r5, #8
 8003caa:	2d0c      	cmp	r5, #12
 8003cac:	bf38      	it	cc
 8003cae:	250c      	movcc	r5, #12
 8003cb0:	2d00      	cmp	r5, #0
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	db01      	blt.n	8003cba <_malloc_r+0x1a>
 8003cb6:	42a9      	cmp	r1, r5
 8003cb8:	d903      	bls.n	8003cc2 <_malloc_r+0x22>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	6033      	str	r3, [r6, #0]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc2:	f000 f857 	bl	8003d74 <__malloc_lock>
 8003cc6:	4921      	ldr	r1, [pc, #132]	; (8003d4c <_malloc_r+0xac>)
 8003cc8:	680a      	ldr	r2, [r1, #0]
 8003cca:	4614      	mov	r4, r2
 8003ccc:	b99c      	cbnz	r4, 8003cf6 <_malloc_r+0x56>
 8003cce:	4f20      	ldr	r7, [pc, #128]	; (8003d50 <_malloc_r+0xb0>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b923      	cbnz	r3, 8003cde <_malloc_r+0x3e>
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f000 f83c 	bl	8003d54 <_sbrk_r>
 8003cdc:	6038      	str	r0, [r7, #0]
 8003cde:	4629      	mov	r1, r5
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f000 f837 	bl	8003d54 <_sbrk_r>
 8003ce6:	1c43      	adds	r3, r0, #1
 8003ce8:	d123      	bne.n	8003d32 <_malloc_r+0x92>
 8003cea:	230c      	movs	r3, #12
 8003cec:	6033      	str	r3, [r6, #0]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f000 f846 	bl	8003d80 <__malloc_unlock>
 8003cf4:	e7e3      	b.n	8003cbe <_malloc_r+0x1e>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	1b5b      	subs	r3, r3, r5
 8003cfa:	d417      	bmi.n	8003d2c <_malloc_r+0x8c>
 8003cfc:	2b0b      	cmp	r3, #11
 8003cfe:	d903      	bls.n	8003d08 <_malloc_r+0x68>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	441c      	add	r4, r3
 8003d04:	6025      	str	r5, [r4, #0]
 8003d06:	e004      	b.n	8003d12 <_malloc_r+0x72>
 8003d08:	6863      	ldr	r3, [r4, #4]
 8003d0a:	42a2      	cmp	r2, r4
 8003d0c:	bf0c      	ite	eq
 8003d0e:	600b      	streq	r3, [r1, #0]
 8003d10:	6053      	strne	r3, [r2, #4]
 8003d12:	4630      	mov	r0, r6
 8003d14:	f000 f834 	bl	8003d80 <__malloc_unlock>
 8003d18:	f104 000b 	add.w	r0, r4, #11
 8003d1c:	1d23      	adds	r3, r4, #4
 8003d1e:	f020 0007 	bic.w	r0, r0, #7
 8003d22:	1ac2      	subs	r2, r0, r3
 8003d24:	d0cc      	beq.n	8003cc0 <_malloc_r+0x20>
 8003d26:	1a1b      	subs	r3, r3, r0
 8003d28:	50a3      	str	r3, [r4, r2]
 8003d2a:	e7c9      	b.n	8003cc0 <_malloc_r+0x20>
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	6864      	ldr	r4, [r4, #4]
 8003d30:	e7cc      	b.n	8003ccc <_malloc_r+0x2c>
 8003d32:	1cc4      	adds	r4, r0, #3
 8003d34:	f024 0403 	bic.w	r4, r4, #3
 8003d38:	42a0      	cmp	r0, r4
 8003d3a:	d0e3      	beq.n	8003d04 <_malloc_r+0x64>
 8003d3c:	1a21      	subs	r1, r4, r0
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f000 f808 	bl	8003d54 <_sbrk_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d1dd      	bne.n	8003d04 <_malloc_r+0x64>
 8003d48:	e7cf      	b.n	8003cea <_malloc_r+0x4a>
 8003d4a:	bf00      	nop
 8003d4c:	200000b8 	.word	0x200000b8
 8003d50:	200000bc 	.word	0x200000bc

08003d54 <_sbrk_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4d06      	ldr	r5, [pc, #24]	; (8003d70 <_sbrk_r+0x1c>)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	f7fd f9f0 	bl	8001144 <_sbrk>
 8003d64:	1c43      	adds	r3, r0, #1
 8003d66:	d102      	bne.n	8003d6e <_sbrk_r+0x1a>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	b103      	cbz	r3, 8003d6e <_sbrk_r+0x1a>
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	200001e4 	.word	0x200001e4

08003d74 <__malloc_lock>:
 8003d74:	4801      	ldr	r0, [pc, #4]	; (8003d7c <__malloc_lock+0x8>)
 8003d76:	f000 b809 	b.w	8003d8c <__retarget_lock_acquire_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	200001ec 	.word	0x200001ec

08003d80 <__malloc_unlock>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__malloc_unlock+0x8>)
 8003d82:	f000 b804 	b.w	8003d8e <__retarget_lock_release_recursive>
 8003d86:	bf00      	nop
 8003d88:	200001ec 	.word	0x200001ec

08003d8c <__retarget_lock_acquire_recursive>:
 8003d8c:	4770      	bx	lr

08003d8e <__retarget_lock_release_recursive>:
 8003d8e:	4770      	bx	lr

08003d90 <_init>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr

08003d9c <_fini>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr
