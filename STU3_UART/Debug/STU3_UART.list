
STU3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d58  08004d58  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d60  08004d60  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000028  08004d8c  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08004d8c  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e614  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbb  00000000  00000000  0002e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00030e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001657d  00000000  00000000  000319f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc03  00000000  00000000  00047f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb64  00000000  00000000  00055b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e46d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c8  00000000  00000000  000e4728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004d20 	.word	0x08004d20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08004d20 	.word	0x08004d20

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96e 	b.w	8000d08 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468c      	mov	ip, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8083 	bne.w	8000b5a <__udivmoddi4+0x116>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d947      	bls.n	8000aea <__udivmoddi4+0xa6>
 8000a5a:	fab2 f282 	clz	r2, r2
 8000a5e:	b142      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	f1c2 0020 	rsb	r0, r2, #32
 8000a64:	fa24 f000 	lsr.w	r0, r4, r0
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	4097      	lsls	r7, r2
 8000a6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbbc f6f8 	udiv	r6, ip, r8
 8000a7c:	fa1f fe87 	uxth.w	lr, r7
 8000a80:	fb08 c116 	mls	r1, r8, r6, ip
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f10e 	mul.w	r1, r6, lr
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a96:	f080 8119 	bcs.w	8000ccc <__udivmoddi4+0x288>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8116 	bls.w	8000ccc <__udivmoddi4+0x288>
 8000aa0:	3e02      	subs	r6, #2
 8000aa2:	443b      	add	r3, r7
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aac:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab8:	45a6      	cmp	lr, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 8105 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000ac6:	45a6      	cmp	lr, r4
 8000ac8:	f240 8102 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000acc:	3802      	subs	r0, #2
 8000ace:	443c      	add	r4, r7
 8000ad0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad4:	eba4 040e 	sub.w	r4, r4, lr
 8000ad8:	2600      	movs	r6, #0
 8000ada:	b11d      	cbz	r5, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	b902      	cbnz	r2, 8000aee <__udivmoddi4+0xaa>
 8000aec:	deff      	udf	#255	; 0xff
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d150      	bne.n	8000b98 <__udivmoddi4+0x154>
 8000af6:	1bcb      	subs	r3, r1, r7
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	fa1f f887 	uxth.w	r8, r7
 8000b00:	2601      	movs	r6, #1
 8000b02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b06:	0c21      	lsrs	r1, r4, #16
 8000b08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b10:	fb08 f30c 	mul.w	r3, r8, ip
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000b18:	1879      	adds	r1, r7, r1
 8000b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0xe2>
 8000b20:	428b      	cmp	r3, r1
 8000b22:	f200 80e9 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b26:	4684      	mov	ip, r0
 8000b28:	1ac9      	subs	r1, r1, r3
 8000b2a:	b2a3      	uxth	r3, r4
 8000b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b38:	fb08 f800 	mul.w	r8, r8, r0
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x10c>
 8000b40:	193c      	adds	r4, r7, r4
 8000b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x10a>
 8000b48:	45a0      	cmp	r8, r4
 8000b4a:	f200 80d9 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b4e:	4618      	mov	r0, r3
 8000b50:	eba4 0408 	sub.w	r4, r4, r8
 8000b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b58:	e7bf      	b.n	8000ada <__udivmoddi4+0x96>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d909      	bls.n	8000b72 <__udivmoddi4+0x12e>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	f000 80b1 	beq.w	8000cc6 <__udivmoddi4+0x282>
 8000b64:	2600      	movs	r6, #0
 8000b66:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	fab3 f683 	clz	r6, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d14a      	bne.n	8000c10 <__udivmoddi4+0x1cc>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0x140>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 80b8 	bhi.w	8000cf4 <__udivmoddi4+0x2b0>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb61 0103 	sbc.w	r1, r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d0a8      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b96:	e7a5      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b98:	f1c2 0320 	rsb	r3, r2, #32
 8000b9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ba0:	4097      	lsls	r7, r2
 8000ba2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ba6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000baa:	40d9      	lsrs	r1, r3
 8000bac:	4330      	orrs	r0, r6
 8000bae:	0c03      	lsrs	r3, r0, #16
 8000bb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bb4:	fa1f f887 	uxth.w	r8, r7
 8000bb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb06 f108 	mul.w	r1, r6, r8
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x19c>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bd2:	f080 808d 	bcs.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 808a 	bls.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b281      	uxth	r1, r0
 8000be4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf0:	fb00 f308 	mul.w	r3, r0, r8
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x1c4>
 8000bf8:	1879      	adds	r1, r7, r1
 8000bfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bfe:	d273      	bcs.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d971      	bls.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c04:	3802      	subs	r0, #2
 8000c06:	4439      	add	r1, r7
 8000c08:	1acb      	subs	r3, r1, r3
 8000c0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c0e:	e778      	b.n	8000b02 <__udivmoddi4+0xbe>
 8000c10:	f1c6 0c20 	rsb	ip, r6, #32
 8000c14:	fa03 f406 	lsl.w	r4, r3, r6
 8000c18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c1c:	431c      	orrs	r4, r3
 8000c1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c22:	fa01 f306 	lsl.w	r3, r1, r6
 8000c26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	0c3b      	lsrs	r3, r7, #16
 8000c32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c36:	fa1f f884 	uxth.w	r8, r4
 8000c3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c42:	fb09 fa08 	mul.w	sl, r9, r8
 8000c46:	458a      	cmp	sl, r1
 8000c48:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x220>
 8000c52:	1861      	adds	r1, r4, r1
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	d248      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000c5a:	458a      	cmp	sl, r1
 8000c5c:	d946      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000c5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c62:	4421      	add	r1, r4
 8000c64:	eba1 010a 	sub.w	r1, r1, sl
 8000c68:	b2bf      	uxth	r7, r7
 8000c6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c76:	fb00 f808 	mul.w	r8, r0, r8
 8000c7a:	45b8      	cmp	r8, r7
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x24a>
 8000c7e:	19e7      	adds	r7, r4, r7
 8000c80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c84:	d22e      	bcs.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c86:	45b8      	cmp	r8, r7
 8000c88:	d92c      	bls.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4427      	add	r7, r4
 8000c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c92:	eba7 0708 	sub.w	r7, r7, r8
 8000c96:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9a:	454f      	cmp	r7, r9
 8000c9c:	46c6      	mov	lr, r8
 8000c9e:	4649      	mov	r1, r9
 8000ca0:	d31a      	bcc.n	8000cd8 <__udivmoddi4+0x294>
 8000ca2:	d017      	beq.n	8000cd4 <__udivmoddi4+0x290>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x27a>
 8000ca6:	ebb3 020e 	subs.w	r2, r3, lr
 8000caa:	eb67 0701 	sbc.w	r7, r7, r1
 8000cae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cb2:	40f2      	lsrs	r2, r6
 8000cb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb8:	40f7      	lsrs	r7, r6
 8000cba:	e9c5 2700 	strd	r2, r7, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e70b      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e9      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6fd      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd4:	4543      	cmp	r3, r8
 8000cd6:	d2e5      	bcs.n	8000ca4 <__udivmoddi4+0x260>
 8000cd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7df      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e7d2      	b.n	8000c8e <__udivmoddi4+0x24a>
 8000ce8:	4660      	mov	r0, ip
 8000cea:	e78d      	b.n	8000c08 <__udivmoddi4+0x1c4>
 8000cec:	4681      	mov	r9, r0
 8000cee:	e7b9      	b.n	8000c64 <__udivmoddi4+0x220>
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	e775      	b.n	8000be0 <__udivmoddi4+0x19c>
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	e74a      	b.n	8000b8e <__udivmoddi4+0x14a>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	4439      	add	r1, r7
 8000cfe:	e713      	b.n	8000b28 <__udivmoddi4+0xe4>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	e724      	b.n	8000b50 <__udivmoddi4+0x10c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <HAL_UARTEx_RxEventCallback>:
uint16_t oldPos = 0;
uint16_t newPos = 0;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a51      	ldr	r2, [pc, #324]	; (8000e64 <HAL_UARTEx_RxEventCallback+0x158>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	f040 809c 	bne.w	8000e5c <HAL_UARTEx_RxEventCallback+0x150>
	{
		oldPos = newPos;
 8000d24:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000d26:	881a      	ldrh	r2, [r3, #0]
 8000d28:	4b50      	ldr	r3, [pc, #320]	; (8000e6c <HAL_UARTEx_RxEventCallback+0x160>)
 8000d2a:	801a      	strh	r2, [r3, #0]
		datasize = Size;
 8000d2c:	4a50      	ldr	r2, [pc, #320]	; (8000e70 <HAL_UARTEx_RxEventCallback+0x164>)
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	8013      	strh	r3, [r2, #0]
		if (oldPos+Size > MainBuf_SIZE)
 8000d32:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <HAL_UARTEx_RxEventCallback+0x160>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d40:	dd22      	ble.n	8000d88 <HAL_UARTEx_RxEventCallback+0x7c>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;
 8000d42:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <HAL_UARTEx_RxEventCallback+0x160>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000d4a:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);
 8000d4c:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <HAL_UARTEx_RxEventCallback+0x160>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <HAL_UARTEx_RxEventCallback+0x168>)
 8000d54:	4413      	add	r3, r2
 8000d56:	89fa      	ldrh	r2, [r7, #14]
 8000d58:	4947      	ldr	r1, [pc, #284]	; (8000e78 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 ffca 	bl	8004cf4 <memcpy>

			oldPos = 0;
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <HAL_UARTEx_RxEventCallback+0x160>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));
 8000d66:	89fb      	ldrh	r3, [r7, #14]
 8000d68:	4a43      	ldr	r2, [pc, #268]	; (8000e78 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000d6a:	1899      	adds	r1, r3, r2
 8000d6c:	887a      	ldrh	r2, [r7, #2]
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	483f      	ldr	r0, [pc, #252]	; (8000e74 <HAL_UARTEx_RxEventCallback+0x168>)
 8000d76:	f003 ffbd 	bl	8004cf4 <memcpy>
			newPos = (Size-datatocopy);
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000d84:	801a      	strh	r2, [r3, #0]
 8000d86:	e010      	b.n	8000daa <HAL_UARTEx_RxEventCallback+0x9e>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <HAL_UARTEx_RxEventCallback+0x160>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <HAL_UARTEx_RxEventCallback+0x168>)
 8000d90:	4413      	add	r3, r2
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	4938      	ldr	r1, [pc, #224]	; (8000e78 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 ffac 	bl	8004cf4 <memcpy>
			newPos = Size+oldPos;
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <HAL_UARTEx_RxEventCallback+0x160>)
 8000d9e:	881a      	ldrh	r2, [r3, #0]
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	4413      	add	r3, r2
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000da8:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos-datasize];
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_UARTEx_RxEventCallback+0x164>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <HAL_UARTEx_RxEventCallback+0x168>)
 8000db8:	5cd2      	ldrb	r2, [r2, r3]
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x170>)
 8000dbc:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4;
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x170>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <HAL_UARTEx_RxEventCallback+0x174>)
 8000dc8:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15);
 8000dca:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x170>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <HAL_UARTEx_RxEventCallback+0x178>)
 8000dd6:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <HAL_UARTEx_RxEventCallback+0x174>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b09      	cmp	r3, #9
 8000dde:	d10a      	bne.n	8000df6 <HAL_UARTEx_RxEventCallback+0xea>
			if (NameM >= 1 && NameM <= 14){
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <HAL_UARTEx_RxEventCallback+0x178>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d02c      	beq.n	8000e42 <HAL_UARTEx_RxEventCallback+0x136>
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_UARTEx_RxEventCallback+0x178>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b0e      	cmp	r3, #14
 8000dee:	d828      	bhi.n	8000e42 <HAL_UARTEx_RxEventCallback+0x136>
				check_Mode();
 8000df0:	f000 f84e 	bl	8000e90 <check_Mode>
 8000df4:	e025      	b.n	8000e42 <HAL_UARTEx_RxEventCallback+0x136>
			}
		}
		else if (StartM == 88) {
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x170>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b58      	cmp	r3, #88	; 0x58
 8000dfc:	d121      	bne.n	8000e42 <HAL_UARTEx_RxEventCallback+0x136>
//			newPos = oldPos + 4;
//			oldPos = newPos;
			StartM = MainBuf[newPos-2];
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_UARTEx_RxEventCallback+0x168>)
 8000e06:	5cd2      	ldrb	r2, [r2, r3]
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x170>)
 8000e0a:	701a      	strb	r2, [r3, #0]
			chkStart = StartM >> 4;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x170>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_UARTEx_RxEventCallback+0x174>)
 8000e16:	701a      	strb	r2, [r3, #0]
			NameM = (StartM & 15);
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x170>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f003 030f 	and.w	r3, r3, #15
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_UARTEx_RxEventCallback+0x178>)
 8000e24:	701a      	strb	r2, [r3, #0]
			if (chkStart == 9){
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_UARTEx_RxEventCallback+0x174>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b09      	cmp	r3, #9
 8000e2c:	d109      	bne.n	8000e42 <HAL_UARTEx_RxEventCallback+0x136>
				if (NameM >= 1 && NameM <= 14){
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UARTEx_RxEventCallback+0x178>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_UARTEx_RxEventCallback+0x136>
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_UARTEx_RxEventCallback+0x178>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b0e      	cmp	r3, #14
 8000e3c:	d801      	bhi.n	8000e42 <HAL_UARTEx_RxEventCallback+0x136>
				check_Mode();
 8000e3e:	f000 f827 	bl	8000e90 <check_Mode>
				}
			}
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8000e42:	2220      	movs	r2, #32
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e46:	4810      	ldr	r0, [pc, #64]	; (8000e88 <HAL_UARTEx_RxEventCallback+0x17c>)
 8000e48:	f002 fe8b 	bl	8003b62 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_UARTEx_RxEventCallback+0x180>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_UARTEx_RxEventCallback+0x180>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0208 	bic.w	r2, r2, #8
 8000e5a:	601a      	str	r2, [r3, #0]

	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40004400 	.word	0x40004400
 8000e68:	2000005c 	.word	0x2000005c
 8000e6c:	2000005a 	.word	0x2000005a
 8000e70:	20000044 	.word	0x20000044
 8000e74:	200001d0 	.word	0x200001d0
 8000e78:	200001a4 	.word	0x200001a4
 8000e7c:	200000c8 	.word	0x200000c8
 8000e80:	20000060 	.word	0x20000060
 8000e84:	200000d4 	.word	0x200000d4
 8000e88:	200005d0 	.word	0x200005d0
 8000e8c:	20000064 	.word	0x20000064

08000e90 <check_Mode>:
void check_Mode()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
		switch (NameM){
 8000e96:	4b77      	ldr	r3, [pc, #476]	; (8001074 <check_Mode+0x1e4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	2b0d      	cmp	r3, #13
 8000e9e:	f200 83d8 	bhi.w	8001652 <check_Mode+0x7c2>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <check_Mode+0x18>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ee1 	.word	0x08000ee1
 8000eac:	08000f4b 	.word	0x08000f4b
 8000eb0:	08000f89 	.word	0x08000f89
 8000eb4:	08000fc7 	.word	0x08000fc7
 8000eb8:	080010b5 	.word	0x080010b5
 8000ebc:	0800117b 	.word	0x0800117b
 8000ec0:	080011ff 	.word	0x080011ff
 8000ec4:	080012b1 	.word	0x080012b1
 8000ec8:	08001351 	.word	0x08001351
 8000ecc:	0800139d 	.word	0x0800139d
 8000ed0:	08001445 	.word	0x08001445
 8000ed4:	08001511 	.word	0x08001511
 8000ed8:	0800154f 	.word	0x0800154f
 8000edc:	0800158b 	.word	0x0800158b
			case 1: //10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos-1];
 8000ee0:	4b65      	ldr	r3, [pc, #404]	; (8001078 <check_Mode+0x1e8>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	4a65      	ldr	r2, [pc, #404]	; (800107c <check_Mode+0x1ec>)
 8000ee8:	5cd2      	ldrb	r2, [r2, r3]
 8000eea:	4b65      	ldr	r3, [pc, #404]	; (8001080 <check_Mode+0x1f0>)
 8000eec:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos-2];
 8000eee:	4b62      	ldr	r3, [pc, #392]	; (8001078 <check_Mode+0x1e8>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	4a61      	ldr	r2, [pc, #388]	; (800107c <check_Mode+0x1ec>)
 8000ef6:	5cd2      	ldrb	r2, [r2, r3]
 8000ef8:	4b62      	ldr	r3, [pc, #392]	; (8001084 <check_Mode+0x1f4>)
 8000efa:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos-3];
 8000efc:	4b5e      	ldr	r3, [pc, #376]	; (8001078 <check_Mode+0x1e8>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	4a5e      	ldr	r2, [pc, #376]	; (800107c <check_Mode+0x1ec>)
 8000f04:	5cd2      	ldrb	r2, [r2, r3]
 8000f06:	4b60      	ldr	r3, [pc, #384]	; (8001088 <check_Mode+0x1f8>)
 8000f08:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 8000f0a:	4b60      	ldr	r3, [pc, #384]	; (800108c <check_Mode+0x1fc>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	4b5e      	ldr	r3, [pc, #376]	; (8001088 <check_Mode+0x1f8>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b5b      	ldr	r3, [pc, #364]	; (8001084 <check_Mode+0x1f4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b5b      	ldr	r3, [pc, #364]	; (8001090 <check_Mode+0x200>)
 8000f24:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8000f26:	4b56      	ldr	r3, [pc, #344]	; (8001080 <check_Mode+0x1f0>)
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <check_Mode+0x200>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	f040 8349 	bne.w	80015c6 <check_Mode+0x736>
					M_state = 1;
 8000f34:	4b57      	ldr	r3, [pc, #348]	; (8001094 <check_Mode+0x204>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4955      	ldr	r1, [pc, #340]	; (8001098 <check_Mode+0x208>)
 8000f42:	4856      	ldr	r0, [pc, #344]	; (800109c <check_Mode+0x20c>)
 8000f44:	f002 fd7b 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 8000f48:	e33d      	b.n	80015c6 <check_Mode+0x736>
			case 2: //10010010 01101101
				chksum = MainBuf[newPos-1];
 8000f4a:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <check_Mode+0x1e8>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	4a4a      	ldr	r2, [pc, #296]	; (800107c <check_Mode+0x1ec>)
 8000f52:	5cd2      	ldrb	r2, [r2, r3]
 8000f54:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <check_Mode+0x1f0>)
 8000f56:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <check_Mode+0x1fc>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <check_Mode+0x210>)
 8000f62:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000f64:	4b46      	ldr	r3, [pc, #280]	; (8001080 <check_Mode+0x1f0>)
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <check_Mode+0x210>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 832c 	bne.w	80015ca <check_Mode+0x73a>
					M_state = 2;
 8000f72:	4b48      	ldr	r3, [pc, #288]	; (8001094 <check_Mode+0x204>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8000f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4946      	ldr	r1, [pc, #280]	; (8001098 <check_Mode+0x208>)
 8000f80:	4846      	ldr	r0, [pc, #280]	; (800109c <check_Mode+0x20c>)
 8000f82:	f002 fd5c 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 8000f86:	e320      	b.n	80015ca <check_Mode+0x73a>
			case 3: //10010011 01101100
					chksum = MainBuf[newPos-1];
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <check_Mode+0x1e8>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	4a3b      	ldr	r2, [pc, #236]	; (800107c <check_Mode+0x1ec>)
 8000f90:	5cd2      	ldrb	r2, [r2, r3]
 8000f92:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <check_Mode+0x1f0>)
 8000f94:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <check_Mode+0x1fc>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <check_Mode+0x210>)
 8000fa0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <check_Mode+0x1f0>)
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <check_Mode+0x210>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	f040 830f 	bne.w	80015ce <check_Mode+0x73e>
					M_state = 3;
 8000fb0:	4b38      	ldr	r3, [pc, #224]	; (8001094 <check_Mode+0x204>)
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	2202      	movs	r2, #2
 8000fbc:	4936      	ldr	r1, [pc, #216]	; (8001098 <check_Mode+0x208>)
 8000fbe:	4837      	ldr	r0, [pc, #220]	; (800109c <check_Mode+0x20c>)
 8000fc0:	f002 fd3d 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 8000fc4:	e303      	b.n	80015ce <check_Mode+0x73e>
			case 4:
					chksum = MainBuf[newPos-1];
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <check_Mode+0x1e8>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	; (800107c <check_Mode+0x1ec>)
 8000fce:	5cd2      	ldrb	r2, [r2, r3]
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <check_Mode+0x1f0>)
 8000fd2:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos-2];
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <check_Mode+0x1e8>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	3b02      	subs	r3, #2
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <check_Mode+0x1ec>)
 8000fdc:	5cd2      	ldrb	r2, [r2, r3]
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <check_Mode+0x1f4>)
 8000fe0:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos-3];
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <check_Mode+0x1e8>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b03      	subs	r3, #3
 8000fe8:	4a24      	ldr	r2, [pc, #144]	; (800107c <check_Mode+0x1ec>)
 8000fea:	5cd2      	ldrb	r2, [r2, r3]
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <check_Mode+0x1f8>)
 8000fee:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <check_Mode+0x1f8>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <check_Mode+0x214>)
 8000ff8:	601a      	str	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <check_Mode+0x1f4>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <check_Mode+0x214>)
 8001002:	605a      	str	r2, [r3, #4]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <check_Mode+0x1fc>)
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <check_Mode+0x1f8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4413      	add	r3, r2
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <check_Mode+0x1f4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4413      	add	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <check_Mode+0x200>)
 800101e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <check_Mode+0x1f0>)
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <check_Mode+0x200>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 82d2 	bne.w	80015d2 <check_Mode+0x742>
					M_state = 4;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <check_Mode+0x204>)
 8001030:	2204      	movs	r2, #4
 8001032:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <check_Mode+0x214>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <check_Mode+0x218>)
 8001042:	edc3 7a00 	vstr	s15, [r3]
					AngVelo = (DataProtocol_SetVelo * 10)/255;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <check_Mode+0x218>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001050:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001054:	eddf 6a15 	vldr	s13, [pc, #84]	; 80010ac <check_Mode+0x21c>
 8001058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <check_Mode+0x220>)
 800105e:	edc3 7a00 	vstr	s15, [r3]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	2202      	movs	r2, #2
 8001068:	490b      	ldr	r1, [pc, #44]	; (8001098 <check_Mode+0x208>)
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <check_Mode+0x20c>)
 800106c:	f002 fce7 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 8001070:	e2af      	b.n	80015d2 <check_Mode+0x742>
 8001072:	bf00      	nop
 8001074:	200000d4 	.word	0x200000d4
 8001078:	2000005c 	.word	0x2000005c
 800107c:	200001d0 	.word	0x200001d0
 8001080:	200001c4 	.word	0x200001c4
 8001084:	20000614 	.word	0x20000614
 8001088:	20000189 	.word	0x20000189
 800108c:	200000c8 	.word	0x200000c8
 8001090:	20000181 	.word	0x20000181
 8001094:	2000019d 	.word	0x2000019d
 8001098:	20000000 	.word	0x20000000
 800109c:	200005d0 	.word	0x200005d0
 80010a0:	2000018a 	.word	0x2000018a
 80010a4:	200001c8 	.word	0x200001c8
 80010a8:	20000618 	.word	0x20000618
 80010ac:	437f0000 	.word	0x437f0000
 80010b0:	20000184 	.word	0x20000184
			case 5:
					chksum = MainBuf[newPos-1];
 80010b4:	4b90      	ldr	r3, [pc, #576]	; (80012f8 <check_Mode+0x468>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	4a90      	ldr	r2, [pc, #576]	; (80012fc <check_Mode+0x46c>)
 80010bc:	5cd2      	ldrb	r2, [r2, r3]
 80010be:	4b90      	ldr	r3, [pc, #576]	; (8001300 <check_Mode+0x470>)
 80010c0:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos-2];
 80010c2:	4b8d      	ldr	r3, [pc, #564]	; (80012f8 <check_Mode+0x468>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	3b02      	subs	r3, #2
 80010c8:	4a8c      	ldr	r2, [pc, #560]	; (80012fc <check_Mode+0x46c>)
 80010ca:	5cd2      	ldrb	r2, [r2, r3]
 80010cc:	4b8d      	ldr	r3, [pc, #564]	; (8001304 <check_Mode+0x474>)
 80010ce:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos-3];
 80010d0:	4b89      	ldr	r3, [pc, #548]	; (80012f8 <check_Mode+0x468>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	4a89      	ldr	r2, [pc, #548]	; (80012fc <check_Mode+0x46c>)
 80010d8:	5cd2      	ldrb	r2, [r2, r3]
 80010da:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <check_Mode+0x478>)
 80010dc:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80010de:	4b8a      	ldr	r3, [pc, #552]	; (8001308 <check_Mode+0x478>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b89      	ldr	r3, [pc, #548]	; (800130c <check_Mode+0x47c>)
 80010e6:	601a      	str	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80010e8:	4b86      	ldr	r3, [pc, #536]	; (8001304 <check_Mode+0x474>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b87      	ldr	r3, [pc, #540]	; (800130c <check_Mode+0x47c>)
 80010f0:	605a      	str	r2, [r3, #4]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80010f2:	4b87      	ldr	r3, [pc, #540]	; (8001310 <check_Mode+0x480>)
 80010f4:	781a      	ldrb	r2, [r3, #0]
 80010f6:	4b84      	ldr	r3, [pc, #528]	; (8001308 <check_Mode+0x478>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b81      	ldr	r3, [pc, #516]	; (8001304 <check_Mode+0x474>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b82      	ldr	r3, [pc, #520]	; (8001314 <check_Mode+0x484>)
 800110c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800110e:	4b7c      	ldr	r3, [pc, #496]	; (8001300 <check_Mode+0x470>)
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	4b80      	ldr	r3, [pc, #512]	; (8001314 <check_Mode+0x484>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	f040 825d 	bne.w	80015d6 <check_Mode+0x746>
					M_state = 5;
 800111c:	4b7e      	ldr	r3, [pc, #504]	; (8001318 <check_Mode+0x488>)
 800111e:	2205      	movs	r2, #5
 8001120:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001122:	4b7a      	ldr	r3, [pc, #488]	; (800130c <check_Mode+0x47c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	021a      	lsls	r2, r3, #8
 8001128:	4b78      	ldr	r3, [pc, #480]	; (800130c <check_Mode+0x47c>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a7b      	ldr	r2, [pc, #492]	; (800131c <check_Mode+0x48c>)
 8001130:	6013      	str	r3, [r2, #0]
					AngPosi = (DataProtocol_SetAngPosi / (3.14 * 10000) * 180);
 8001132:	4b7a      	ldr	r3, [pc, #488]	; (800131c <check_Mode+0x48c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9a0 	bl	800047c <__aeabi_i2d>
 800113c:	a36c      	add	r3, pc, #432	; (adr r3, 80012f0 <check_Mode+0x460>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fb2f 	bl	80007a4 <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b73      	ldr	r3, [pc, #460]	; (8001320 <check_Mode+0x490>)
 8001154:	f7ff f9fc 	bl	8000550 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fc08 	bl	8000974 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	4a6f      	ldr	r2, [pc, #444]	; (8001324 <check_Mode+0x494>)
 8001168:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	2202      	movs	r2, #2
 8001170:	496d      	ldr	r1, [pc, #436]	; (8001328 <check_Mode+0x498>)
 8001172:	486e      	ldr	r0, [pc, #440]	; (800132c <check_Mode+0x49c>)
 8001174:	f002 fc63 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 8001178:	e22d      	b.n	80015d6 <check_Mode+0x746>
			case 6:
					chksum = MainBuf[newPos-1];
 800117a:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <check_Mode+0x468>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	4a5e      	ldr	r2, [pc, #376]	; (80012fc <check_Mode+0x46c>)
 8001182:	5cd2      	ldrb	r2, [r2, r3]
 8001184:	4b5e      	ldr	r3, [pc, #376]	; (8001300 <check_Mode+0x470>)
 8001186:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos-2];
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <check_Mode+0x468>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3b02      	subs	r3, #2
 800118e:	4a5b      	ldr	r2, [pc, #364]	; (80012fc <check_Mode+0x46c>)
 8001190:	5cd2      	ldrb	r2, [r2, r3]
 8001192:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <check_Mode+0x474>)
 8001194:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos-3];
 8001196:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <check_Mode+0x468>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	3b03      	subs	r3, #3
 800119c:	4a57      	ldr	r2, [pc, #348]	; (80012fc <check_Mode+0x46c>)
 800119e:	5cd2      	ldrb	r2, [r2, r3]
 80011a0:	4b59      	ldr	r3, [pc, #356]	; (8001308 <check_Mode+0x478>)
 80011a2:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80011a4:	4b58      	ldr	r3, [pc, #352]	; (8001308 <check_Mode+0x478>)
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b61      	ldr	r3, [pc, #388]	; (8001330 <check_Mode+0x4a0>)
 80011aa:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 80011ac:	4b55      	ldr	r3, [pc, #340]	; (8001304 <check_Mode+0x474>)
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <check_Mode+0x4a0>)
 80011b2:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80011b4:	4b56      	ldr	r3, [pc, #344]	; (8001310 <check_Mode+0x480>)
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	4b53      	ldr	r3, [pc, #332]	; (8001308 <check_Mode+0x478>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b50      	ldr	r3, [pc, #320]	; (8001304 <check_Mode+0x474>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b51      	ldr	r3, [pc, #324]	; (8001314 <check_Mode+0x484>)
 80011ce:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80011d0:	4b4b      	ldr	r3, [pc, #300]	; (8001300 <check_Mode+0x470>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <check_Mode+0x484>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 81fe 	bne.w	80015da <check_Mode+0x74a>
					M_state = 6;
 80011de:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <check_Mode+0x488>)
 80011e0:	2206      	movs	r2, #6
 80011e2:	701a      	strb	r2, [r3, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 80011e4:	4b52      	ldr	r3, [pc, #328]	; (8001330 <check_Mode+0x4a0>)
 80011e6:	785b      	ldrb	r3, [r3, #1]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <check_Mode+0x4a4>)
 80011ec:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	2202      	movs	r2, #2
 80011f4:	494c      	ldr	r1, [pc, #304]	; (8001328 <check_Mode+0x498>)
 80011f6:	484d      	ldr	r0, [pc, #308]	; (800132c <check_Mode+0x49c>)
 80011f8:	f002 fc21 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 80011fc:	e1ed      	b.n	80015da <check_Mode+0x74a>
			case 7:
				Nstation = MainBuf[(newPos-datasize)+1];
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <check_Mode+0x468>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <check_Mode+0x4a8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	3301      	adds	r3, #1
 800120c:	4a3b      	ldr	r2, [pc, #236]	; (80012fc <check_Mode+0x46c>)
 800120e:	5cd2      	ldrb	r2, [r2, r3]
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <check_Mode+0x4ac>)
 8001212:	701a      	strb	r2, [r3, #0]
				for(int i=2; i < Nstation+2; i++ ){
 8001214:	2302      	movs	r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e01a      	b.n	8001250 <check_Mode+0x3c0>
					dataFSum += MainBuf[newPos-i];
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <check_Mode+0x468>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <check_Mode+0x46c>)
 8001226:	5cd2      	ldrb	r2, [r2, r3]
 8001228:	4b45      	ldr	r3, [pc, #276]	; (8001340 <check_Mode+0x4b0>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4413      	add	r3, r2
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <check_Mode+0x4b0>)
 8001232:	701a      	strb	r2, [r3, #0]
					Set_Goal_nSta[i-2] = MainBuf[newPos-i];
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <check_Mode+0x468>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad2      	subs	r2, r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3b02      	subs	r3, #2
 8001242:	492e      	ldr	r1, [pc, #184]	; (80012fc <check_Mode+0x46c>)
 8001244:	5c89      	ldrb	r1, [r1, r2]
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <check_Mode+0x4b4>)
 8001248:	54d1      	strb	r1, [r2, r3]
				for(int i=2; i < Nstation+2; i++ ){
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4b3a      	ldr	r3, [pc, #232]	; (800133c <check_Mode+0x4ac>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	ddde      	ble.n	800121a <check_Mode+0x38a>
				}
				chksum = MainBuf[newPos-1];
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <check_Mode+0x468>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	3b01      	subs	r3, #1
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <check_Mode+0x46c>)
 8001264:	5cd2      	ldrb	r2, [r2, r3]
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <check_Mode+0x470>)
 8001268:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <check_Mode+0x480>)
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	4b33      	ldr	r3, [pc, #204]	; (800133c <check_Mode+0x4ac>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <check_Mode+0x4b0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	b2db      	uxtb	r3, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <check_Mode+0x4b8>)
 8001284:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <check_Mode+0x470>)
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <check_Mode+0x4b8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	f040 81a5 	bne.w	80015de <check_Mode+0x74e>
					M_state = 7;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <check_Mode+0x488>)
 8001296:	2207      	movs	r2, #7
 8001298:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <check_Mode+0x4b0>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80012a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a4:	2202      	movs	r2, #2
 80012a6:	4920      	ldr	r1, [pc, #128]	; (8001328 <check_Mode+0x498>)
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <check_Mode+0x49c>)
 80012aa:	f002 fbc8 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 80012ae:	e196      	b.n	80015de <check_Mode+0x74e>
			case 8: //10011000 01100111
				chksum = MainBuf[newPos-1];
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <check_Mode+0x468>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <check_Mode+0x46c>)
 80012b8:	5cd2      	ldrb	r2, [r2, r3]
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <check_Mode+0x470>)
 80012bc:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <check_Mode+0x480>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <check_Mode+0x4bc>)
 80012c8:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <check_Mode+0x470>)
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <check_Mode+0x4bc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f040 8185 	bne.w	80015e2 <check_Mode+0x752>
					M_state = 8;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <check_Mode+0x488>)
 80012da:	2208      	movs	r2, #8
 80012dc:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	2202      	movs	r2, #2
 80012e4:	4910      	ldr	r1, [pc, #64]	; (8001328 <check_Mode+0x498>)
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <check_Mode+0x49c>)
 80012e8:	f002 fba9 	bl	8003a3e <HAL_UART_Transmit>
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f, 2 ,1000);
				}
				break;
 80012ec:	e179      	b.n	80015e2 <check_Mode+0x752>
 80012ee:	bf00      	nop
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40deaa00 	.word	0x40deaa00
 80012f8:	2000005c 	.word	0x2000005c
 80012fc:	200001d0 	.word	0x200001d0
 8001300:	200001c4 	.word	0x200001c4
 8001304:	20000614 	.word	0x20000614
 8001308:	20000189 	.word	0x20000189
 800130c:	200000cc 	.word	0x200000cc
 8001310:	200000c8 	.word	0x200000c8
 8001314:	20000181 	.word	0x20000181
 8001318:	2000019d 	.word	0x2000019d
 800131c:	20000198 	.word	0x20000198
 8001320:	40668000 	.word	0x40668000
 8001324:	200000c4 	.word	0x200000c4
 8001328:	20000000 	.word	0x20000000
 800132c:	200005d0 	.word	0x200005d0
 8001330:	200001a0 	.word	0x200001a0
 8001334:	20000620 	.word	0x20000620
 8001338:	20000044 	.word	0x20000044
 800133c:	20000180 	.word	0x20000180
 8001340:	2000019c 	.word	0x2000019c
 8001344:	2000018c 	.word	0x2000018c
 8001348:	200000c9 	.word	0x200000c9
 800134c:	2000018a 	.word	0x2000018a
			case 9: //10011001 01100110
				chksum = MainBuf[newPos-1];
 8001350:	4ba9      	ldr	r3, [pc, #676]	; (80015f8 <check_Mode+0x768>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4aa9      	ldr	r2, [pc, #676]	; (80015fc <check_Mode+0x76c>)
 8001358:	5cd2      	ldrb	r2, [r2, r3]
 800135a:	4ba9      	ldr	r3, [pc, #676]	; (8001600 <check_Mode+0x770>)
 800135c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800135e:	4ba9      	ldr	r3, [pc, #676]	; (8001604 <check_Mode+0x774>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	43db      	mvns	r3, r3
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4ba8      	ldr	r3, [pc, #672]	; (8001608 <check_Mode+0x778>)
 8001368:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800136a:	4ba5      	ldr	r3, [pc, #660]	; (8001600 <check_Mode+0x770>)
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	4ba6      	ldr	r3, [pc, #664]	; (8001608 <check_Mode+0x778>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	f040 8137 	bne.w	80015e6 <check_Mode+0x756>
					M_state = 9;
 8001378:	4ba4      	ldr	r3, [pc, #656]	; (800160c <check_Mode+0x77c>)
 800137a:	2209      	movs	r2, #9
 800137c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	2202      	movs	r2, #2
 8001384:	49a2      	ldr	r1, [pc, #648]	; (8001610 <check_Mode+0x780>)
 8001386:	48a3      	ldr	r0, [pc, #652]	; (8001614 <check_Mode+0x784>)
 8001388:	f002 fb59 	bl	8003a3e <HAL_UART_Transmit>
					//Req_sta[1] = 0;
					//Req_sta[2] = ;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,1000);
 800138c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001390:	2204      	movs	r2, #4
 8001392:	49a1      	ldr	r1, [pc, #644]	; (8001618 <check_Mode+0x788>)
 8001394:	489f      	ldr	r0, [pc, #636]	; (8001614 <check_Mode+0x784>)
 8001396:	f002 fb52 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 800139a:	e124      	b.n	80015e6 <check_Mode+0x756>
			case 10: //10011010 01100101
				chksum = MainBuf[newPos-1];
 800139c:	4b96      	ldr	r3, [pc, #600]	; (80015f8 <check_Mode+0x768>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a96      	ldr	r2, [pc, #600]	; (80015fc <check_Mode+0x76c>)
 80013a4:	5cd2      	ldrb	r2, [r2, r3]
 80013a6:	4b96      	ldr	r3, [pc, #600]	; (8001600 <check_Mode+0x770>)
 80013a8:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80013aa:	4b96      	ldr	r3, [pc, #600]	; (8001604 <check_Mode+0x774>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b95      	ldr	r3, [pc, #596]	; (8001608 <check_Mode+0x778>)
 80013b4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80013b6:	4b92      	ldr	r3, [pc, #584]	; (8001600 <check_Mode+0x770>)
 80013b8:	781a      	ldrb	r2, [r3, #0]
 80013ba:	4b93      	ldr	r3, [pc, #588]	; (8001608 <check_Mode+0x778>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	f040 813e 	bne.w	8001640 <check_Mode+0x7b0>
					M_state = 10;
 80013c4:	4b91      	ldr	r3, [pc, #580]	; (800160c <check_Mode+0x77c>)
 80013c6:	220a      	movs	r2, #10
 80013c8:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	2202      	movs	r2, #2
 80013d0:	498f      	ldr	r1, [pc, #572]	; (8001610 <check_Mode+0x780>)
 80013d2:	4890      	ldr	r0, [pc, #576]	; (8001614 <check_Mode+0x784>)
 80013d4:	f002 fb33 	bl	8003a3e <HAL_UART_Transmit>
					DataProtocol_AngPosi = (CurrentEn * 10000);
 80013d8:	4b90      	ldr	r3, [pc, #576]	; (800161c <check_Mode+0x78c>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001620 <check_Mode+0x790>
 80013e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ea:	ee17 2a90 	vmov	r2, s15
 80013ee:	4b8d      	ldr	r3, [pc, #564]	; (8001624 <check_Mode+0x794>)
 80013f0:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80013f2:	4b8c      	ldr	r3, [pc, #560]	; (8001624 <check_Mode+0x794>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	da00      	bge.n	80013fc <check_Mode+0x56c>
 80013fa:	33ff      	adds	r3, #255	; 0xff
 80013fc:	121b      	asrs	r3, r3, #8
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b89      	ldr	r3, [pc, #548]	; (8001628 <check_Mode+0x798>)
 8001402:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 8001404:	4b87      	ldr	r3, [pc, #540]	; (8001624 <check_Mode+0x794>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	425a      	negs	r2, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	bf58      	it	pl
 8001410:	4253      	negpl	r3, r2
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b84      	ldr	r3, [pc, #528]	; (8001628 <check_Mode+0x798>)
 8001416:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 8001418:	4b83      	ldr	r3, [pc, #524]	; (8001628 <check_Mode+0x798>)
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	4b82      	ldr	r3, [pc, #520]	; (8001628 <check_Mode+0x798>)
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	4413      	add	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b80      	ldr	r3, [pc, #512]	; (8001628 <check_Mode+0x798>)
 8001426:	789b      	ldrb	r3, [r3, #2]
 8001428:	4413      	add	r3, r2
 800142a:	b2db      	uxtb	r3, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b7d      	ldr	r3, [pc, #500]	; (8001628 <check_Mode+0x798>)
 8001432:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,1000);
 8001434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001438:	2204      	movs	r2, #4
 800143a:	497b      	ldr	r1, [pc, #492]	; (8001628 <check_Mode+0x798>)
 800143c:	4875      	ldr	r0, [pc, #468]	; (8001614 <check_Mode+0x784>)
 800143e:	f002 fafe 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 8001442:	e0fd      	b.n	8001640 <check_Mode+0x7b0>
			case 11: //10011011 01100100
				chksum = MainBuf[newPos-1];
 8001444:	4b6c      	ldr	r3, [pc, #432]	; (80015f8 <check_Mode+0x768>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	3b01      	subs	r3, #1
 800144a:	4a6c      	ldr	r2, [pc, #432]	; (80015fc <check_Mode+0x76c>)
 800144c:	5cd2      	ldrb	r2, [r2, r3]
 800144e:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <check_Mode+0x770>)
 8001450:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001452:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <check_Mode+0x774>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	43db      	mvns	r3, r3
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b6b      	ldr	r3, [pc, #428]	; (8001608 <check_Mode+0x778>)
 800145c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800145e:	4b68      	ldr	r3, [pc, #416]	; (8001600 <check_Mode+0x770>)
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b69      	ldr	r3, [pc, #420]	; (8001608 <check_Mode+0x778>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	f040 80ec 	bne.w	8001644 <check_Mode+0x7b4>
					M_state = 11;
 800146c:	4b67      	ldr	r3, [pc, #412]	; (800160c <check_Mode+0x77c>)
 800146e:	220b      	movs	r2, #11
 8001470:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	2202      	movs	r2, #2
 8001478:	4965      	ldr	r1, [pc, #404]	; (8001610 <check_Mode+0x780>)
 800147a:	4866      	ldr	r0, [pc, #408]	; (8001614 <check_Mode+0x784>)
 800147c:	f002 fadf 	bl	8003a3e <HAL_UART_Transmit>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <check_Mode+0x79c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f80b 	bl	80004a0 <__aeabi_f2d>
 800148a:	a359      	add	r3, pc, #356	; (adr r3, 80015f0 <check_Mode+0x760>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f988 	bl	80007a4 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b63      	ldr	r3, [pc, #396]	; (8001630 <check_Mode+0x7a0>)
 80014a2:	f7ff f855 	bl	8000550 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fa61 	bl	8000974 <__aeabi_d2f>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a5f      	ldr	r2, [pc, #380]	; (8001634 <check_Mode+0x7a4>)
 80014b6:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 80014b8:	4b5f      	ldr	r3, [pc, #380]	; (8001638 <check_Mode+0x7a8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 80014be:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <check_Mode+0x7a4>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800163c <check_Mode+0x7ac>
 80014c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80014dc:	793b      	ldrb	r3, [r7, #4]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b55      	ldr	r3, [pc, #340]	; (8001638 <check_Mode+0x7a8>)
 80014e2:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <check_Mode+0x7a8>)
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <check_Mode+0x7a8>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	4413      	add	r3, r2
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b51      	ldr	r3, [pc, #324]	; (8001638 <check_Mode+0x7a8>)
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	4413      	add	r3, r2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b4e      	ldr	r3, [pc, #312]	; (8001638 <check_Mode+0x7a8>)
 80014fe:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 8001500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001504:	2204      	movs	r2, #4
 8001506:	494c      	ldr	r1, [pc, #304]	; (8001638 <check_Mode+0x7a8>)
 8001508:	4842      	ldr	r0, [pc, #264]	; (8001614 <check_Mode+0x784>)
 800150a:	f002 fa98 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 800150e:	e099      	b.n	8001644 <check_Mode+0x7b4>
			case 12: //10011100 01100011
				chksum = MainBuf[newPos-1];
 8001510:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <check_Mode+0x768>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	3b01      	subs	r3, #1
 8001516:	4a39      	ldr	r2, [pc, #228]	; (80015fc <check_Mode+0x76c>)
 8001518:	5cd2      	ldrb	r2, [r2, r3]
 800151a:	4b39      	ldr	r3, [pc, #228]	; (8001600 <check_Mode+0x770>)
 800151c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <check_Mode+0x774>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	43db      	mvns	r3, r3
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <check_Mode+0x778>)
 8001528:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <check_Mode+0x770>)
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <check_Mode+0x778>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	f040 8088 	bne.w	8001648 <check_Mode+0x7b8>
					M_state = 12;
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <check_Mode+0x77c>)
 800153a:	220c      	movs	r2, #12
 800153c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	2202      	movs	r2, #2
 8001544:	4932      	ldr	r1, [pc, #200]	; (8001610 <check_Mode+0x780>)
 8001546:	4833      	ldr	r0, [pc, #204]	; (8001614 <check_Mode+0x784>)
 8001548:	f002 fa79 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 800154c:	e07c      	b.n	8001648 <check_Mode+0x7b8>
			case 13: //10011101 01100010
				chksum = MainBuf[newPos-1];
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <check_Mode+0x768>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	3b01      	subs	r3, #1
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <check_Mode+0x76c>)
 8001556:	5cd2      	ldrb	r2, [r2, r3]
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <check_Mode+0x770>)
 800155a:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <check_Mode+0x774>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	43db      	mvns	r3, r3
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <check_Mode+0x778>)
 8001566:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001568:	4b25      	ldr	r3, [pc, #148]	; (8001600 <check_Mode+0x770>)
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <check_Mode+0x778>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d16b      	bne.n	800164c <check_Mode+0x7bc>
					M_state = 13;
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <check_Mode+0x77c>)
 8001576:	220d      	movs	r2, #13
 8001578:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	2202      	movs	r2, #2
 8001580:	4923      	ldr	r1, [pc, #140]	; (8001610 <check_Mode+0x780>)
 8001582:	4824      	ldr	r0, [pc, #144]	; (8001614 <check_Mode+0x784>)
 8001584:	f002 fa5b 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 8001588:	e060      	b.n	800164c <check_Mode+0x7bc>
			case 14: //10011110 01100001
				chksum = MainBuf[newPos-1];
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <check_Mode+0x768>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <check_Mode+0x76c>)
 8001592:	5cd2      	ldrb	r2, [r2, r3]
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <check_Mode+0x770>)
 8001596:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <check_Mode+0x774>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	43db      	mvns	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <check_Mode+0x778>)
 80015a2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <check_Mode+0x770>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <check_Mode+0x778>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d14f      	bne.n	8001650 <check_Mode+0x7c0>
					M_state = 14;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <check_Mode+0x77c>)
 80015b2:	220e      	movs	r2, #14
 80015b4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	2202      	movs	r2, #2
 80015bc:	4914      	ldr	r1, [pc, #80]	; (8001610 <check_Mode+0x780>)
 80015be:	4815      	ldr	r0, [pc, #84]	; (8001614 <check_Mode+0x784>)
 80015c0:	f002 fa3d 	bl	8003a3e <HAL_UART_Transmit>
				}
				break;
 80015c4:	e044      	b.n	8001650 <check_Mode+0x7c0>
				break;
 80015c6:	bf00      	nop
 80015c8:	e043      	b.n	8001652 <check_Mode+0x7c2>
				break;
 80015ca:	bf00      	nop
 80015cc:	e041      	b.n	8001652 <check_Mode+0x7c2>
				break;
 80015ce:	bf00      	nop
 80015d0:	e03f      	b.n	8001652 <check_Mode+0x7c2>
				break;
 80015d2:	bf00      	nop
 80015d4:	e03d      	b.n	8001652 <check_Mode+0x7c2>
				break;
 80015d6:	bf00      	nop
 80015d8:	e03b      	b.n	8001652 <check_Mode+0x7c2>
				break;
 80015da:	bf00      	nop
 80015dc:	e039      	b.n	8001652 <check_Mode+0x7c2>
				break;
 80015de:	bf00      	nop
 80015e0:	e037      	b.n	8001652 <check_Mode+0x7c2>
				break;
 80015e2:	bf00      	nop
 80015e4:	e035      	b.n	8001652 <check_Mode+0x7c2>
				break;
 80015e6:	bf00      	nop
 80015e8:	e033      	b.n	8001652 <check_Mode+0x7c2>
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	51eb851f 	.word	0x51eb851f
 80015f4:	40191eb8 	.word	0x40191eb8
 80015f8:	2000005c 	.word	0x2000005c
 80015fc:	200001d0 	.word	0x200001d0
 8001600:	200001c4 	.word	0x200001c4
 8001604:	200000c8 	.word	0x200000c8
 8001608:	2000018a 	.word	0x2000018a
 800160c:	2000019d 	.word	0x2000019d
 8001610:	20000000 	.word	0x20000000
 8001614:	200005d0 	.word	0x200005d0
 8001618:	20000004 	.word	0x20000004
 800161c:	20000010 	.word	0x20000010
 8001620:	461c4000 	.word	0x461c4000
 8001624:	2000061c 	.word	0x2000061c
 8001628:	20000008 	.word	0x20000008
 800162c:	2000000c 	.word	0x2000000c
 8001630:	404e0000 	.word	0x404e0000
 8001634:	20000624 	.word	0x20000624
 8001638:	20000014 	.word	0x20000014
 800163c:	437f0000 	.word	0x437f0000
				break;
 8001640:	bf00      	nop
 8001642:	e006      	b.n	8001652 <check_Mode+0x7c2>
				break;
 8001644:	bf00      	nop
 8001646:	e004      	b.n	8001652 <check_Mode+0x7c2>
				break;
 8001648:	bf00      	nop
 800164a:	e002      	b.n	8001652 <check_Mode+0x7c2>
				break;
 800164c:	bf00      	nop
 800164e:	e000      	b.n	8001652 <check_Mode+0x7c2>
				break;
 8001650:	bf00      	nop
			}

}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	0000      	movs	r0, r0
	...

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f000 fb90 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f870 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f000 f94e 	bl	800190c <MX_GPIO_Init>
  MX_DMA_Init();
 8001670:	f000 f924 	bl	80018bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001674:	f000 f8f6 	bl	8001864 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001678:	f000 f8d0 	bl	800181c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 800167c:	2220      	movs	r2, #32
 800167e:	492a      	ldr	r1, [pc, #168]	; (8001728 <main+0xc8>)
 8001680:	482a      	ldr	r0, [pc, #168]	; (800172c <main+0xcc>)
 8001682:	f002 fa6e 	bl	8003b62 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <main+0xd0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <main+0xd0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0208 	bic.w	r2, r2, #8
 8001694:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim11);
 8001696:	4827      	ldr	r0, [pc, #156]	; (8001734 <main+0xd4>)
 8001698:	f001 ff5e 	bl	8003558 <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(micros() - timestamp >= 100000){
 800169c:	f000 f9c2 	bl	8001a24 <micros>
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <main+0xd8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	1a84      	subs	r4, r0, r2
 80016a8:	eb61 0503 	sbc.w	r5, r1, r3
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <main+0xdc>)
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	42ab      	cmp	r3, r5
 80016b4:	bf08      	it	eq
 80016b6:	42a2      	cmpeq	r2, r4
 80016b8:	d2f0      	bcs.n	800169c <main+0x3c>
		  timestamp = micros();
 80016ba:	f000 f9b3 	bl	8001a24 <micros>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	491d      	ldr	r1, [pc, #116]	; (8001738 <main+0xd8>)
 80016c4:	e9c1 2300 	strd	r2, r3, [r1]
		  encdummbuf++;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <main+0xe0>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <main+0xe0>)
 80016d2:	801a      	strh	r2, [r3, #0]
		  encdummbuf%=1023;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <main+0xe0>)
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <main+0xe4>)
 80016da:	fba3 1302 	umull	r1, r3, r3, r2
 80016de:	1ad1      	subs	r1, r2, r3
 80016e0:	0849      	lsrs	r1, r1, #1
 80016e2:	440b      	add	r3, r1
 80016e4:	0a59      	lsrs	r1, r3, #9
 80016e6:	460b      	mov	r3, r1
 80016e8:	029b      	lsls	r3, r3, #10
 80016ea:	1a5b      	subs	r3, r3, r1
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <main+0xe0>)
 80016f2:	801a      	strh	r2, [r3, #0]
		  CurrentEn = 0.006136 * encdummbuf;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <main+0xe0>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe febf 	bl	800047c <__aeabi_i2d>
 80016fe:	a308      	add	r3, pc, #32	; (adr r3, 8001720 <main+0xc0>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff24 	bl	8000550 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f930 	bl	8000974 <__aeabi_d2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <main+0xe8>)
 8001718:	6013      	str	r3, [r2, #0]
	  if(micros() - timestamp >= 100000){
 800171a:	e7bf      	b.n	800169c <main+0x3c>
 800171c:	f3af 8000 	nop.w
 8001720:	f540895d 	.word	0xf540895d
 8001724:	3f79220f 	.word	0x3f79220f
 8001728:	200001a4 	.word	0x200001a4
 800172c:	200005d0 	.word	0x200005d0
 8001730:	20000064 	.word	0x20000064
 8001734:	20000138 	.word	0x20000138
 8001738:	20000050 	.word	0x20000050
 800173c:	0001869f 	.word	0x0001869f
 8001740:	20000058 	.word	0x20000058
 8001744:	00401005 	.word	0x00401005
 8001748:	20000010 	.word	0x20000010

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b094      	sub	sp, #80	; 0x50
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	2230      	movs	r2, #48	; 0x30
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f003 fad8 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <SystemClock_Config+0xc8>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <SystemClock_Config+0xc8>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <SystemClock_Config+0xc8>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <SystemClock_Config+0xcc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <SystemClock_Config+0xcc>)
 8001796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <SystemClock_Config+0xcc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b0:	2310      	movs	r3, #16
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b4:	2302      	movs	r3, #2
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017bc:	2308      	movs	r3, #8
 80017be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017c0:	2364      	movs	r3, #100	; 0x64
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 f9fd 	bl	8002bd0 <HAL_RCC_OscConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017dc:	f000 f93c 	bl	8001a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e0:	230f      	movs	r3, #15
 80017e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e4:	2302      	movs	r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2103      	movs	r1, #3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fc5f 	bl	80030c0 <HAL_RCC_ClockConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001808:	f000 f926 	bl	8001a58 <Error_Handler>
  }
}
 800180c:	bf00      	nop
 800180e:	3750      	adds	r7, #80	; 0x50
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_TIM11_Init+0x40>)
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <MX_TIM11_Init+0x44>)
 8001824:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <MX_TIM11_Init+0x40>)
 8001828:	2263      	movs	r2, #99	; 0x63
 800182a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_TIM11_Init+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MX_TIM11_Init+0x40>)
 8001834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001838:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_TIM11_Init+0x40>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_TIM11_Init+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_TIM11_Init+0x40>)
 8001848:	f001 fe36 	bl	80034b8 <HAL_TIM_Base_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001852:	f000 f901 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000138 	.word	0x20000138
 8001860:	40014800 	.word	0x40014800

08001864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 800186a:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <MX_USART2_UART_Init+0x54>)
 800186c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 8001870:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 8001886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART2_UART_Init+0x50>)
 80018a0:	f002 f880 	bl	80039a4 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80018aa:	f000 f8d5 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200005d0 	.word	0x200005d0
 80018b8:	40004400 	.word	0x40004400

080018bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <MX_DMA_Init+0x4c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <MX_DMA_Init+0x4c>)
 80018cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <MX_DMA_Init+0x4c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2010      	movs	r0, #16
 80018e4:	f000 fb9d 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018e8:	2010      	movs	r0, #16
 80018ea:	f000 fbb6 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2011      	movs	r0, #17
 80018f4:	f000 fb95 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018f8:	2011      	movs	r0, #17
 80018fa:	f000 fbae 	bl	800205a <HAL_NVIC_EnableIRQ>

}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a2c      	ldr	r2, [pc, #176]	; (80019dc <MX_GPIO_Init+0xd0>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a25      	ldr	r2, [pc, #148]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_GPIO_Init+0xd0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_GPIO_Init+0xd0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_GPIO_Init+0xd0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2120      	movs	r1, #32
 8001996:	4812      	ldr	r0, [pc, #72]	; (80019e0 <MX_GPIO_Init+0xd4>)
 8001998:	f001 f900 	bl	8002b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	480c      	ldr	r0, [pc, #48]	; (80019e4 <MX_GPIO_Init+0xd8>)
 80019b4:	f000 ff6e 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019b8:	2320      	movs	r3, #32
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_GPIO_Init+0xd4>)
 80019d0:	f000 ff60 	bl	8002894 <HAL_GPIO_Init>

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020800 	.word	0x40020800

080019e8 <HAL_TIM_PeriodElapsedCallback>:
//
//
//	}
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e8:	b4b0      	push	{r4, r5, r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d10c      	bne.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0x2a>
 {
	 _micros += 65535;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	1814      	adds	r4, r2, r0
 8001a08:	eb43 0501 	adc.w	r5, r3, r1
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a0e:	e9c3 4500 	strd	r4, r5, [r3]
 }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bcb0      	pop	{r4, r5, r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	20000138 	.word	0x20000138
 8001a20:	20000048 	.word	0x20000048

08001a24 <micros>:
//TIM microsecond measure function Read time of _micros  + time of TIM11
uint64_t micros()
{
 8001a24:	b4b0      	push	{r4, r5, r7}
 8001a26:	af00      	add	r7, sp, #0
	return _micros + htim11.Instance->CNT;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <micros+0x2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f04f 0100 	mov.w	r1, #0
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <micros+0x30>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	1884      	adds	r4, r0, r2
 8001a3c:	eb41 0503 	adc.w	r5, r1, r3
 8001a40:	4622      	mov	r2, r4
 8001a42:	462b      	mov	r3, r5
}
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bcb0      	pop	{r4, r5, r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000138 	.word	0x20000138
 8001a54:	20000048 	.word	0x20000048

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <Error_Handler+0x8>
	...

08001a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_MspInit+0x4c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aa2:	2007      	movs	r0, #7
 8001aa4:	f000 fab2 	bl	800200c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d115      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	201a      	movs	r0, #26
 8001ae8:	f000 fa9b 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001aec:	201a      	movs	r0, #26
 8001aee:	f000 fab4 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40014800 	.word	0x40014800
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a4b      	ldr	r2, [pc, #300]	; (8001c50 <HAL_UART_MspInit+0x14c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	f040 8090 	bne.w	8001c48 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_UART_MspInit+0x150>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	4a48      	ldr	r2, [pc, #288]	; (8001c54 <HAL_UART_MspInit+0x150>)
 8001b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b36:	6413      	str	r3, [r2, #64]	; 0x40
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_UART_MspInit+0x150>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <HAL_UART_MspInit+0x150>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a41      	ldr	r2, [pc, #260]	; (8001c54 <HAL_UART_MspInit+0x150>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6313      	str	r3, [r2, #48]	; 0x30
 8001b54:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <HAL_UART_MspInit+0x150>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b60:	230c      	movs	r3, #12
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b70:	2307      	movs	r3, #7
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4837      	ldr	r0, [pc, #220]	; (8001c58 <HAL_UART_MspInit+0x154>)
 8001b7c:	f000 fe8a 	bl	8002894 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b80:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001b82:	4a37      	ldr	r2, [pc, #220]	; (8001c60 <HAL_UART_MspInit+0x15c>)
 8001b84:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001b88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9a:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb4:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bba:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bc0:	4826      	ldr	r0, [pc, #152]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001bc2:	f000 fa65 	bl	8002090 <HAL_DMA_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001bcc:	f7ff ff44 	bl	8001a58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_UART_MspInit+0x158>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001bde:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_UART_MspInit+0x164>)
 8001be0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001be4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001bec:	2240      	movs	r2, #64	; 0x40
 8001bee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c1c:	4811      	ldr	r0, [pc, #68]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001c1e:	f000 fa37 	bl	8002090 <HAL_DMA_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001c28:	f7ff ff16 	bl	8001a58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
 8001c32:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <HAL_UART_MspInit+0x160>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2026      	movs	r0, #38	; 0x26
 8001c3e:	f000 f9f0 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c42:	2026      	movs	r0, #38	; 0x26
 8001c44:	f000 fa09 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40004400 	.word	0x40004400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	20000064 	.word	0x20000064
 8001c60:	40026088 	.word	0x40026088
 8001c64:	200000d8 	.word	0x200000d8
 8001c68:	400260a0 	.word	0x400260a0

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <NMI_Handler+0x4>

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 f8b8 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA1_Stream5_IRQHandler+0x10>)
 8001cc6:	f000 fb7b 	bl	80023c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000064 	.word	0x20000064

08001cd4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <DMA1_Stream6_IRQHandler+0x10>)
 8001cda:	f000 fb71 	bl	80023c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200000d8 	.word	0x200000d8

08001ce8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cee:	f001 fc95 	bl	800361c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000138 	.word	0x20000138

08001cfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <USART2_IRQHandler+0x10>)
 8001d02:	f001 ff93 	bl	8003c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200005d0 	.word	0x200005d0

08001d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <SystemInit+0x20>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <SystemInit+0x20>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d50:	4c0b      	ldr	r4, [pc, #44]	; (8001d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d5e:	f7ff ffd7 	bl	8001d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f002 ffa3 	bl	8004cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7ff fc7b 	bl	8001660 <main>
  bx  lr    
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001d78:	08004d68 	.word	0x08004d68
  ldr r2, =_sbss
 8001d7c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001d80:	2000062c 	.word	0x2000062c

08001d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f92b 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fe52 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f943 	bl	8002076 <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f000 f90b 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000018 	.word	0x20000018
 8001e24:	20000020 	.word	0x20000020
 8001e28:	2000001c 	.word	0x2000001c

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000020 	.word	0x20000020
 8001e50:	20000628 	.word	0x20000628

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000628 	.word	0x20000628

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff feda 	bl	8001e54 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e099      	b.n	80021e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	e00f      	b.n	80020ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ce:	f7ff fec1 	bl	8001e54 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d908      	bls.n	80020ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e078      	b.n	80021e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e8      	bne.n	80020ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_DMA_Init+0x158>)
 8002108:	4013      	ands	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2b04      	cmp	r3, #4
 8002146:	d107      	bne.n	8002158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4313      	orrs	r3, r2
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f023 0307 	bic.w	r3, r3, #7
 800216e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2b04      	cmp	r3, #4
 8002180:	d117      	bne.n	80021b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fb01 	bl	800279c <DMA_CheckFifoParam>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ae:	2301      	movs	r3, #1
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fab8 	bl	8002730 <DMA_CalcBaseAndBitshift>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	223f      	movs	r2, #63	; 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	f010803f 	.word	0xf010803f

080021ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_DMA_Start_IT+0x26>
 800220e:	2302      	movs	r3, #2
 8002210:	e040      	b.n	8002294 <HAL_DMA_Start_IT+0xa8>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d12f      	bne.n	8002286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fa4a 	bl	80026d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	223f      	movs	r2, #63	; 0x3f
 8002246:	409a      	lsls	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0216 	orr.w	r2, r2, #22
 800225a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0208 	orr.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e005      	b.n	8002292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022aa:	f7ff fdd3 	bl	8001e54 <HAL_GetTick>
 80022ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d008      	beq.n	80022ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e052      	b.n	8002374 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0216 	bic.w	r2, r2, #22
 80022dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d103      	bne.n	80022fe <HAL_DMA_Abort+0x62>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0208 	bic.w	r2, r2, #8
 800230c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231e:	e013      	b.n	8002348 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002320:	f7ff fd98 	bl	8001e54 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b05      	cmp	r3, #5
 800232c:	d90c      	bls.n	8002348 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2203      	movs	r2, #3
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e015      	b.n	8002374 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e4      	bne.n	8002320 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	223f      	movs	r2, #63	; 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d004      	beq.n	800239a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00c      	b.n	80023b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2205      	movs	r2, #5
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023cc:	4b92      	ldr	r3, [pc, #584]	; (8002618 <HAL_DMA_IRQHandler+0x258>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a92      	ldr	r2, [pc, #584]	; (800261c <HAL_DMA_IRQHandler+0x25c>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a9b      	lsrs	r3, r3, #10
 80023d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	2208      	movs	r2, #8
 80023ec:	409a      	lsls	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01a      	beq.n	800242c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	2208      	movs	r2, #8
 800241a:	409a      	lsls	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	f043 0201 	orr.w	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2201      	movs	r2, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	2201      	movs	r2, #1
 8002450:	409a      	lsls	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f043 0202 	orr.w	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	2204      	movs	r2, #4
 8002468:	409a      	lsls	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d012      	beq.n	8002498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	2204      	movs	r2, #4
 8002486:	409a      	lsls	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f043 0204 	orr.w	r2, r3, #4
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2210      	movs	r2, #16
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d043      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d03c      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	2210      	movs	r2, #16
 80024bc:	409a      	lsls	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d018      	beq.n	8002502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d024      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4798      	blx	r3
 80024ee:	e01f      	b.n	8002530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01b      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
 8002500:	e016      	b.n	8002530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0208 	bic.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2220      	movs	r2, #32
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 808e 	beq.w	800265e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8086 	beq.w	800265e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	2220      	movs	r2, #32
 8002558:	409a      	lsls	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b05      	cmp	r3, #5
 8002568:	d136      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0216 	bic.w	r2, r2, #22
 8002578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_DMA_IRQHandler+0x1da>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0208 	bic.w	r2, r2, #8
 80025a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	223f      	movs	r2, #63	; 0x3f
 80025b0:	409a      	lsls	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d07d      	beq.n	80026ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
        }
        return;
 80025d6:	e078      	b.n	80026ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01c      	beq.n	8002620 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d108      	bne.n	8002606 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d030      	beq.n	800265e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
 8002604:	e02b      	b.n	800265e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d027      	beq.n	800265e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
 8002616:	e022      	b.n	800265e <HAL_DMA_IRQHandler+0x29e>
 8002618:	20000018 	.word	0x20000018
 800261c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0210 	bic.w	r2, r2, #16
 800263c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	2b00      	cmp	r3, #0
 8002664:	d032      	beq.n	80026cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d022      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2205      	movs	r2, #5
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3301      	adds	r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	429a      	cmp	r2, r3
 8002694:	d307      	bcc.n	80026a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f2      	bne.n	800268a <HAL_DMA_IRQHandler+0x2ca>
 80026a4:	e000      	b.n	80026a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
 80026c8:	e000      	b.n	80026cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80026ca:	bf00      	nop
    }
  }
}
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop

080026d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d108      	bne.n	8002714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002712:	e007      	b.n	8002724 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	60da      	str	r2, [r3, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3b10      	subs	r3, #16
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <DMA_CalcBaseAndBitshift+0x64>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800274a:	4a13      	ldr	r2, [pc, #76]	; (8002798 <DMA_CalcBaseAndBitshift+0x68>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d909      	bls.n	8002772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002766:	f023 0303 	bic.w	r3, r3, #3
 800276a:	1d1a      	adds	r2, r3, #4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	659a      	str	r2, [r3, #88]	; 0x58
 8002770:	e007      	b.n	8002782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	aaaaaaab 	.word	0xaaaaaaab
 8002798:	08004d50 	.word	0x08004d50

0800279c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11f      	bne.n	80027f6 <DMA_CheckFifoParam+0x5a>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d856      	bhi.n	800286a <DMA_CheckFifoParam+0xce>
 80027bc:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <DMA_CheckFifoParam+0x28>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027d5 	.word	0x080027d5
 80027c8:	080027e7 	.word	0x080027e7
 80027cc:	080027d5 	.word	0x080027d5
 80027d0:	0800286b 	.word	0x0800286b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d046      	beq.n	800286e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e4:	e043      	b.n	800286e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ee:	d140      	bne.n	8002872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e03d      	b.n	8002872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fe:	d121      	bne.n	8002844 <DMA_CheckFifoParam+0xa8>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d837      	bhi.n	8002876 <DMA_CheckFifoParam+0xda>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <DMA_CheckFifoParam+0x70>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002823 	.word	0x08002823
 8002814:	0800281d 	.word	0x0800281d
 8002818:	08002835 	.word	0x08002835
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      break;
 8002820:	e030      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d025      	beq.n	800287a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002832:	e022      	b.n	800287a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800283c:	d11f      	bne.n	800287e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002842:	e01c      	b.n	800287e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d903      	bls.n	8002852 <DMA_CheckFifoParam+0xb6>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d003      	beq.n	8002858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002850:	e018      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      break;
 8002856:	e015      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      break;
 8002868:	e00b      	b.n	8002882 <DMA_CheckFifoParam+0xe6>
      break;
 800286a:	bf00      	nop
 800286c:	e00a      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
 8002870:	e008      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002872:	bf00      	nop
 8002874:	e006      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002876:	bf00      	nop
 8002878:	e004      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;   
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002882:	bf00      	nop
    }
  } 
  
  return status; 
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e159      	b.n	8002b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f040 8148 	bne.w	8002b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d005      	beq.n	80028e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d130      	bne.n	8002948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0201 	and.w	r2, r3, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b03      	cmp	r3, #3
 8002952:	d017      	beq.n	8002984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d123      	bne.n	80029d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	08da      	lsrs	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3208      	adds	r2, #8
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80a2 	beq.w	8002b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b57      	ldr	r3, [pc, #348]	; (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a56      	ldr	r2, [pc, #344]	; (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a36:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_GPIO_Init+0x2ec>)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a49      	ldr	r2, [pc, #292]	; (8002b84 <HAL_GPIO_Init+0x2f0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <HAL_GPIO_Init+0x202>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a48      	ldr	r2, [pc, #288]	; (8002b88 <HAL_GPIO_Init+0x2f4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x1fe>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a47      	ldr	r2, [pc, #284]	; (8002b8c <HAL_GPIO_Init+0x2f8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a46      	ldr	r2, [pc, #280]	; (8002b90 <HAL_GPIO_Init+0x2fc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x1f6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a45      	ldr	r2, [pc, #276]	; (8002b94 <HAL_GPIO_Init+0x300>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x1f2>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e008      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e004      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a96:	2300      	movs	r3, #0
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	f002 0203 	and.w	r2, r2, #3
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	4093      	lsls	r3, r2
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa8:	4935      	ldr	r1, [pc, #212]	; (8002b80 <HAL_GPIO_Init+0x2ec>)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ada:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b04:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b58:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3301      	adds	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	f67f aea2 	bls.w	80028b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3724      	adds	r7, #36	; 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40013c00 	.word	0x40013c00

08002b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bac:	787b      	ldrb	r3, [r7, #1]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb8:	e003      	b.n	8002bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bba:	887b      	ldrh	r3, [r7, #2]
 8002bbc:	041a      	lsls	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	619a      	str	r2, [r3, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e264      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d075      	beq.n	8002cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bee:	4ba3      	ldr	r3, [pc, #652]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4ba0      	ldr	r3, [pc, #640]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b9d      	ldr	r3, [pc, #628]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b99      	ldr	r3, [pc, #612]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e23f      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x74>
 8002c36:	4b91      	ldr	r3, [pc, #580]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a90      	ldr	r2, [pc, #576]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b8b      	ldr	r3, [pc, #556]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a8a      	ldr	r2, [pc, #552]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b88      	ldr	r3, [pc, #544]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a87      	ldr	r2, [pc, #540]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c68:	4b84      	ldr	r3, [pc, #528]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a83      	ldr	r2, [pc, #524]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a80      	ldr	r2, [pc, #512]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff f8e4 	bl	8001e54 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff f8e0 	bl	8001e54 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e204      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b76      	ldr	r3, [pc, #472]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff f8d0 	bl	8001e54 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff f8cc 	bl	8001e54 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1f0      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b62      	ldr	r3, [pc, #392]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1c4      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4952      	ldr	r1, [pc, #328]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b4f      	ldr	r3, [pc, #316]	; (8002e80 <HAL_RCC_OscConfig+0x2b0>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7ff f885 	bl	8001e54 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7ff f881 	bl	8001e54 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1a5      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4940      	ldr	r1, [pc, #256]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_OscConfig+0x2b0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7ff f864 	bl	8001e54 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d90:	f7ff f860 	bl	8001e54 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e184      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d030      	beq.n	8002e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_RCC_OscConfig+0x2b4>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7ff f844 	bl	8001e54 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7ff f840 	bl	8001e54 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e164      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x200>
 8002dee:	e015      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_OscConfig+0x2b4>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7ff f82d 	bl	8001e54 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7ff f829 	bl	8001e54 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e14d      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a0 	beq.w	8002f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_OscConfig+0x2b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d121      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_RCC_OscConfig+0x2b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <HAL_RCC_OscConfig+0x2b8>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7fe ffef 	bl	8001e54 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e011      	b.n	8002e9e <HAL_RCC_OscConfig+0x2ce>
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	42470000 	.word	0x42470000
 8002e84:	42470e80 	.word	0x42470e80
 8002e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8c:	f7fe ffe2 	bl	8001e54 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e106      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b85      	ldr	r3, [pc, #532]	; (80030b4 <HAL_RCC_OscConfig+0x4e4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
 8002eb2:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	e01c      	b.n	8002efa <HAL_RCC_OscConfig+0x32a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x312>
 8002ec8:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a7a      	ldr	r2, [pc, #488]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	4b78      	ldr	r3, [pc, #480]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a77      	ldr	r2, [pc, #476]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	e00b      	b.n	8002efa <HAL_RCC_OscConfig+0x32a>
 8002ee2:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a74      	ldr	r2, [pc, #464]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
 8002eee:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a71      	ldr	r2, [pc, #452]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d015      	beq.n	8002f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe ffa7 	bl	8001e54 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe ffa3 	bl	8001e54 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0c5      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ee      	beq.n	8002f0a <HAL_RCC_OscConfig+0x33a>
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe ff91 	bl	8001e54 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe ff8d 	bl	8001e54 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0af      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	4b5a      	ldr	r3, [pc, #360]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a55      	ldr	r2, [pc, #340]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 809b 	beq.w	80030aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d05c      	beq.n	800303a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d141      	bne.n	800300c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe ff61 	bl	8001e54 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe ff5d 	bl	8001e54 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e081      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa8:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	019b      	lsls	r3, r3, #6
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	4937      	ldr	r1, [pc, #220]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe ff36 	bl	8001e54 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe ff32 	bl	8001e54 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e056      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x41c>
 800300a:	e04e      	b.n	80030aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe ff1f 	bl	8001e54 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe ff1b 	bl	8001e54 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e03f      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x44a>
 8003038:	e037      	b.n	80030aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e032      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d028      	beq.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d121      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d11a      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003076:	4013      	ands	r3, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800307c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307e:	4293      	cmp	r3, r2
 8003080:	d111      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40007000 	.word	0x40007000
 80030b8:	40023800 	.word	0x40023800
 80030bc:	42470060 	.word	0x42470060

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0cc      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b68      	ldr	r3, [pc, #416]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d90c      	bls.n	80030fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800311e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d044      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d119      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d003      	beq.n	800317e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	2b03      	cmp	r3, #3
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b3f      	ldr	r3, [pc, #252]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b3b      	ldr	r3, [pc, #236]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e067      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b37      	ldr	r3, [pc, #220]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4934      	ldr	r1, [pc, #208]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b0:	f7fe fe50 	bl	8001e54 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe fe4c 	bl	8001e54 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e04f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d20c      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fdb0 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00
 800327c:	40023800 	.word	0x40023800
 8003280:	08004d38 	.word	0x08004d38
 8003284:	20000018 	.word	0x20000018
 8003288:	2000001c 	.word	0x2000001c

0800328c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	2300      	movs	r3, #0
 800329e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a4:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d00d      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x40>
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	f200 80bd 	bhi.w	8003430 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032be:	e0b7      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b61      	ldr	r3, [pc, #388]	; (8003448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032c2:	60bb      	str	r3, [r7, #8]
       break;
 80032c4:	e0b7      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c6:	4b61      	ldr	r3, [pc, #388]	; (800344c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032c8:	60bb      	str	r3, [r7, #8]
      break;
 80032ca:	e0b4      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4b5d      	ldr	r3, [pc, #372]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d04d      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b58      	ldr	r3, [pc, #352]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	461a      	mov	r2, r3
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	ea02 0800 	and.w	r8, r2, r0
 80032fa:	ea03 0901 	and.w	r9, r3, r1
 80032fe:	4640      	mov	r0, r8
 8003300:	4649      	mov	r1, r9
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	014b      	lsls	r3, r1, #5
 800330c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003310:	0142      	lsls	r2, r0, #5
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	ebb0 0008 	subs.w	r0, r0, r8
 800331a:	eb61 0109 	sbc.w	r1, r1, r9
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	018b      	lsls	r3, r1, #6
 8003328:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800332c:	0182      	lsls	r2, r0, #6
 800332e:	1a12      	subs	r2, r2, r0
 8003330:	eb63 0301 	sbc.w	r3, r3, r1
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	00d9      	lsls	r1, r3, #3
 800333e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003342:	00d0      	lsls	r0, r2, #3
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	eb12 0208 	adds.w	r2, r2, r8
 800334c:	eb43 0309 	adc.w	r3, r3, r9
 8003350:	f04f 0000 	mov.w	r0, #0
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	0259      	lsls	r1, r3, #9
 800335a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800335e:	0250      	lsls	r0, r2, #9
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	461a      	mov	r2, r3
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	f7fd fb50 	bl	8000a14 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e04a      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	461a      	mov	r2, r3
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	ea02 0400 	and.w	r4, r2, r0
 8003396:	ea03 0501 	and.w	r5, r3, r1
 800339a:	4620      	mov	r0, r4
 800339c:	4629      	mov	r1, r5
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	014b      	lsls	r3, r1, #5
 80033a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033ac:	0142      	lsls	r2, r0, #5
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	1b00      	subs	r0, r0, r4
 80033b4:	eb61 0105 	sbc.w	r1, r1, r5
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	018b      	lsls	r3, r1, #6
 80033c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033c6:	0182      	lsls	r2, r0, #6
 80033c8:	1a12      	subs	r2, r2, r0
 80033ca:	eb63 0301 	sbc.w	r3, r3, r1
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	00d9      	lsls	r1, r3, #3
 80033d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033dc:	00d0      	lsls	r0, r2, #3
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	1912      	adds	r2, r2, r4
 80033e4:	eb45 0303 	adc.w	r3, r5, r3
 80033e8:	f04f 0000 	mov.w	r0, #0
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	0299      	lsls	r1, r3, #10
 80033f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033f6:	0290      	lsls	r0, r2, #10
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	461a      	mov	r2, r3
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f7fd fb04 	bl	8000a14 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4613      	mov	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	3301      	adds	r3, #1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	60bb      	str	r3, [r7, #8]
      break;
 800342e:	e002      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003432:	60bb      	str	r3, [r7, #8]
      break;
 8003434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003436:	68bb      	ldr	r3, [r7, #8]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800
 8003448:	00f42400 	.word	0x00f42400
 800344c:	007a1200 	.word	0x007a1200

08003450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_RCC_GetHCLKFreq+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000018 	.word	0x20000018

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff0 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0a9b      	lsrs	r3, r3, #10
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08004d48 	.word	0x08004d48

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffdc 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0b5b      	lsrs	r3, r3, #13
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08004d48 	.word	0x08004d48

080034b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e041      	b.n	800354e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe fae8 	bl	8001ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f000 f9c0 	bl	800387c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d001      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e044      	b.n	80035fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <HAL_TIM_Base_Start_IT+0xb0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d018      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x6c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d013      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x6c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1a      	ldr	r2, [pc, #104]	; (800360c <HAL_TIM_Base_Start_IT+0xb4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00e      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x6c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_TIM_Base_Start_IT+0xb8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x6c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a17      	ldr	r2, [pc, #92]	; (8003614 <HAL_TIM_Base_Start_IT+0xbc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x6c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_TIM_Base_Start_IT+0xc0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d111      	bne.n	80035e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d010      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	e007      	b.n	80035f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40014000 	.word	0x40014000

0800361c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0202 	mvn.w	r2, #2
 8003648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8ee 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8e0 	bl	800382c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8f1 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b04      	cmp	r3, #4
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0204 	mvn.w	r2, #4
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f8c4 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8b6 	bl	800382c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8c7 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0208 	mvn.w	r2, #8
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2204      	movs	r2, #4
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f89a 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f88c 	bl	800382c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f89d 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b10      	cmp	r3, #16
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b10      	cmp	r3, #16
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0210 	mvn.w	r2, #16
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2208      	movs	r2, #8
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f870 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f862 	bl	800382c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f873 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0201 	mvn.w	r2, #1
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe f924 	bl	80019e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8e2 	bl	8003990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f838 	bl	8003868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d10e      	bne.n	8003824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b20      	cmp	r3, #32
 8003812:	d107      	bne.n	8003824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0220 	mvn.w	r2, #32
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8ac 	bl	800397c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a34      	ldr	r2, [pc, #208]	; (8003960 <TIM_Base_SetConfig+0xe4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00f      	beq.n	80038b4 <TIM_Base_SetConfig+0x38>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389a:	d00b      	beq.n	80038b4 <TIM_Base_SetConfig+0x38>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a31      	ldr	r2, [pc, #196]	; (8003964 <TIM_Base_SetConfig+0xe8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d007      	beq.n	80038b4 <TIM_Base_SetConfig+0x38>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a30      	ldr	r2, [pc, #192]	; (8003968 <TIM_Base_SetConfig+0xec>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0x38>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a2f      	ldr	r2, [pc, #188]	; (800396c <TIM_Base_SetConfig+0xf0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d108      	bne.n	80038c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a25      	ldr	r2, [pc, #148]	; (8003960 <TIM_Base_SetConfig+0xe4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01b      	beq.n	8003906 <TIM_Base_SetConfig+0x8a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d017      	beq.n	8003906 <TIM_Base_SetConfig+0x8a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <TIM_Base_SetConfig+0xe8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <TIM_Base_SetConfig+0x8a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a21      	ldr	r2, [pc, #132]	; (8003968 <TIM_Base_SetConfig+0xec>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00f      	beq.n	8003906 <TIM_Base_SetConfig+0x8a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a20      	ldr	r2, [pc, #128]	; (800396c <TIM_Base_SetConfig+0xf0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_Base_SetConfig+0x8a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <TIM_Base_SetConfig+0xf4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <TIM_Base_SetConfig+0x8a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <TIM_Base_SetConfig+0xf8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_Base_SetConfig+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <TIM_Base_SetConfig+0xfc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <TIM_Base_SetConfig+0xe4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d103      	bne.n	800394c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	615a      	str	r2, [r3, #20]
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800

0800397c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e03f      	b.n	8003a36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fe f89a 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	; 0x24
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 ff97 	bl	800491c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08a      	sub	sp, #40	; 0x28
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d17c      	bne.n	8003b58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_UART_Transmit+0x2c>
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e075      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_UART_Transmit+0x3e>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e06e      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2221      	movs	r2, #33	; 0x21
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a92:	f7fe f9df 	bl	8001e54 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	88fa      	ldrh	r2, [r7, #6]
 8003aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d108      	bne.n	8003ac0 <HAL_UART_Transmit+0x82>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e003      	b.n	8003ac8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ad0:	e02a      	b.n	8003b28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fc53 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e036      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	3302      	adds	r3, #2
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	e007      	b.n	8003b1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3301      	adds	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1cf      	bne.n	8003ad2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2140      	movs	r1, #64	; 0x40
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fc23 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e006      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b08c      	sub	sp, #48	; 0x30
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d152      	bne.n	8003c22 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e04b      	b.n	8003c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e044      	b.n	8003c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fc58 	bl	8004464 <UART_Start_Receive_DMA>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d12c      	bne.n	8003c1c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d125      	bne.n	8003c16 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	617b      	str	r3, [r7, #20]
   return(result);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f043 0310 	orr.w	r3, r3, #16
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c00:	627a      	str	r2, [r7, #36]	; 0x24
 8003c02:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6a39      	ldr	r1, [r7, #32]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e5      	bne.n	8003be0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003c14:	e002      	b.n	8003c1c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c20:	e000      	b.n	8003c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3730      	adds	r7, #48	; 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b0ba      	sub	sp, #232	; 0xe8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10f      	bne.n	8003c92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_UART_IRQHandler+0x66>
 8003c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fd8b 	bl	80047a6 <UART_Receive_IT>
      return;
 8003c90:	e256      	b.n	8004140 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80de 	beq.w	8003e58 <HAL_UART_IRQHandler+0x22c>
 8003c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80d1 	beq.w	8003e58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_UART_IRQHandler+0xae>
 8003cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_UART_IRQHandler+0xd2>
 8003ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0202 	orr.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_UART_IRQHandler+0xf6>
 8003d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f043 0204 	orr.w	r2, r3, #4
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d011      	beq.n	8003d52 <HAL_UART_IRQHandler+0x126>
 8003d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0208 	orr.w	r2, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 81ed 	beq.w	8004136 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_UART_IRQHandler+0x14e>
 8003d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fd16 	bl	80047a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <HAL_UART_IRQHandler+0x17a>
 8003d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d04f      	beq.n	8003e46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fc1e 	bl	80045e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	d141      	bne.n	8003e3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003de6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1d9      	bne.n	8003dba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d013      	beq.n	8003e36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	4a7d      	ldr	r2, [pc, #500]	; (8004008 <HAL_UART_IRQHandler+0x3dc>)
 8003e14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe faae 	bl	800237c <HAL_DMA_Abort_IT>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e30:	4610      	mov	r0, r2
 8003e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	e00e      	b.n	8003e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9a4 	bl	8004184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	e00a      	b.n	8003e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f9a0 	bl	8004184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	e006      	b.n	8003e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f99c 	bl	8004184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e52:	e170      	b.n	8004136 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	bf00      	nop
    return;
 8003e56:	e16e      	b.n	8004136 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 814a 	bne.w	80040f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8143 	beq.w	80040f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 813c 	beq.w	80040f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	f040 80b4 	bne.w	800400c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8140 	beq.w	800413a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	f080 8139 	bcs.w	800413a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ece:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eda:	f000 8088 	beq.w	8003fee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1d9      	bne.n	8003ede <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3314      	adds	r3, #20
 8003f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e1      	bne.n	8003f2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e3      	bne.n	8003f66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fbe:	f023 0310 	bic.w	r3, r3, #16
 8003fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e3      	bne.n	8003fac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe f957 	bl	800229c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fe84 	bl	8000d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004004:	e099      	b.n	800413a <HAL_UART_IRQHandler+0x50e>
 8004006:	bf00      	nop
 8004008:	080046af 	.word	0x080046af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004014:	b29b      	uxth	r3, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 808b 	beq.w	800413e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8086 	beq.w	800413e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004048:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004056:	647a      	str	r2, [r7, #68]	; 0x44
 8004058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800405c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e3      	bne.n	8004032 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	623b      	str	r3, [r7, #32]
   return(result);
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800408e:	633a      	str	r2, [r7, #48]	; 0x30
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e3      	bne.n	800406a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0310 	bic.w	r3, r3, #16
 80040c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040d4:	61fa      	str	r2, [r7, #28]
 80040d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	617b      	str	r3, [r7, #20]
   return(result);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e3      	bne.n	80040b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fc fe0c 	bl	8000d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040f4:	e023      	b.n	800413e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_UART_IRQHandler+0x4ea>
 8004102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fae1 	bl	80046d6 <UART_Transmit_IT>
    return;
 8004114:	e014      	b.n	8004140 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00e      	beq.n	8004140 <HAL_UART_IRQHandler+0x514>
 8004122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fb21 	bl	8004776 <UART_EndTransmit_IT>
    return;
 8004134:	e004      	b.n	8004140 <HAL_UART_IRQHandler+0x514>
    return;
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <HAL_UART_IRQHandler+0x514>
      return;
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <HAL_UART_IRQHandler+0x514>
      return;
 800413e:	bf00      	nop
  }
}
 8004140:	37e8      	adds	r7, #232	; 0xe8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop

08004148 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b09c      	sub	sp, #112	; 0x70
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d172      	bne.n	800429a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	2200      	movs	r2, #0
 80041b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041da:	65ba      	str	r2, [r7, #88]	; 0x58
 80041dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3314      	adds	r3, #20
 80041f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	667b      	str	r3, [r7, #100]	; 0x64
 8004206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3314      	adds	r3, #20
 800420c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800420e:	647a      	str	r2, [r7, #68]	; 0x44
 8004210:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800421c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e5      	bne.n	80041ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	623b      	str	r3, [r7, #32]
   return(result);
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004238:	663b      	str	r3, [r7, #96]	; 0x60
 800423a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3314      	adds	r3, #20
 8004240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004242:	633a      	str	r2, [r7, #48]	; 0x30
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e5      	bne.n	8004222 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	2b01      	cmp	r3, #1
 8004264:	d119      	bne.n	800429a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	60fb      	str	r3, [r7, #12]
   return(result);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f023 0310 	bic.w	r3, r3, #16
 800427c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800427e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004286:	61fa      	str	r2, [r7, #28]
 8004288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	617b      	str	r3, [r7, #20]
   return(result);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e5      	bne.n	8004266 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d106      	bne.n	80042b0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042a6:	4619      	mov	r1, r3
 80042a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042aa:	f7fc fd2f 	bl	8000d0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042ae:	e002      	b.n	80042b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80042b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042b2:	f7ff ff53 	bl	800415c <HAL_UART_RxCpltCallback>
}
 80042b6:	bf00      	nop
 80042b8:	3770      	adds	r7, #112	; 0x70
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d108      	bne.n	80042e6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4619      	mov	r1, r3
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7fc fd14 	bl	8000d0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042e4:	e002      	b.n	80042ec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff ff42 	bl	8004170 <HAL_UART_RxHalfCpltCallback>
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b21      	cmp	r3, #33	; 0x21
 8004326:	d108      	bne.n	800433a <UART_DMAError+0x46>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2200      	movs	r2, #0
 8004332:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004334:	68b8      	ldr	r0, [r7, #8]
 8004336:	f000 f92f 	bl	8004598 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b22      	cmp	r3, #34	; 0x22
 800435a:	d108      	bne.n	800436e <UART_DMAError+0x7a>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2200      	movs	r2, #0
 8004366:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004368:	68b8      	ldr	r0, [r7, #8]
 800436a:	f000 f93d 	bl	80045e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 0210 	orr.w	r2, r3, #16
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800437a:	68b8      	ldr	r0, [r7, #8]
 800437c:	f7ff ff02 	bl	8004184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b090      	sub	sp, #64	; 0x40
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004398:	e050      	b.n	800443c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d04c      	beq.n	800443c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043a8:	f7fd fd54 	bl	8001e54 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d241      	bcs.n	800443c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043d8:	637a      	str	r2, [r7, #52]	; 0x34
 80043da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e5      	bne.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	613b      	str	r3, [r7, #16]
   return(result);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800440c:	623a      	str	r2, [r7, #32]
 800440e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69f9      	ldr	r1, [r7, #28]
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	61bb      	str	r3, [r7, #24]
   return(result);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e00f      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	429a      	cmp	r2, r3
 8004458:	d09f      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3740      	adds	r7, #64	; 0x40
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b098      	sub	sp, #96	; 0x60
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2222      	movs	r2, #34	; 0x22
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	4a3e      	ldr	r2, [pc, #248]	; (800458c <UART_Start_Receive_DMA+0x128>)
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <UART_Start_Receive_DMA+0x12c>)
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <UART_Start_Receive_DMA+0x130>)
 80044a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	2200      	movs	r2, #0
 80044aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	f7fd fe92 	bl	80021ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004506:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004508:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800450c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e5      	bne.n	80044e6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3314      	adds	r3, #20
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	657b      	str	r3, [r7, #84]	; 0x54
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3314      	adds	r3, #20
 8004538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800453a:	63ba      	str	r2, [r7, #56]	; 0x38
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3314      	adds	r3, #20
 8004554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	617b      	str	r3, [r7, #20]
   return(result);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004564:	653b      	str	r3, [r7, #80]	; 0x50
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3314      	adds	r3, #20
 800456c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800456e:	627a      	str	r2, [r7, #36]	; 0x24
 8004570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6a39      	ldr	r1, [r7, #32]
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	61fb      	str	r3, [r7, #28]
   return(result);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3760      	adds	r7, #96	; 0x60
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	08004199 	.word	0x08004199
 8004590:	080042bf 	.word	0x080042bf
 8004594:	080042f5 	.word	0x080042f5

08004598 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	61ba      	str	r2, [r7, #24]
 80045c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6979      	ldr	r1, [r7, #20]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	613b      	str	r3, [r7, #16]
   return(result);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80045dc:	bf00      	nop
 80045de:	3724      	adds	r7, #36	; 0x24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b095      	sub	sp, #84	; 0x54
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004610:	643a      	str	r2, [r7, #64]	; 0x40
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e5      	bne.n	80045f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	61fb      	str	r3, [r7, #28]
   return(result);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3314      	adds	r3, #20
 8004642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800464a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	2b01      	cmp	r3, #1
 800465e:	d119      	bne.n	8004694 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	647b      	str	r3, [r7, #68]	; 0x44
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004680:	61ba      	str	r2, [r7, #24]
 8004682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6979      	ldr	r1, [r7, #20]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	613b      	str	r3, [r7, #16]
   return(result);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046a2:	bf00      	nop
 80046a4:	3754      	adds	r7, #84	; 0x54
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff fd5b 	bl	8004184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b21      	cmp	r3, #33	; 0x21
 80046e8:	d13e      	bne.n	8004768 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d114      	bne.n	800471e <UART_Transmit_IT+0x48>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d110      	bne.n	800471e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004710:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	1c9a      	adds	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	621a      	str	r2, [r3, #32]
 800471c:	e008      	b.n	8004730 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	1c59      	adds	r1, r3, #1
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6211      	str	r1, [r2, #32]
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29b      	uxth	r3, r3
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4619      	mov	r1, r3
 800473e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10f      	bne.n	8004764 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004752:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004762:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e000      	b.n	800476a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004768:	2302      	movs	r3, #2
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff fcd6 	bl	8004148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b08c      	sub	sp, #48	; 0x30
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b22      	cmp	r3, #34	; 0x22
 80047b8:	f040 80ab 	bne.w	8004912 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d117      	bne.n	80047f6 <UART_Receive_IT+0x50>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d113      	bne.n	80047f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	1c9a      	adds	r2, r3, #2
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28
 80047f4:	e026      	b.n	8004844 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004808:	d007      	beq.n	800481a <UART_Receive_IT+0x74>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <UART_Receive_IT+0x82>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e008      	b.n	800483a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004834:	b2da      	uxtb	r2, r3
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29b      	uxth	r3, r3
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4619      	mov	r1, r3
 8004852:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004854:	2b00      	cmp	r3, #0
 8004856:	d15a      	bne.n	800490e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0220 	bic.w	r2, r2, #32
 8004866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	2b01      	cmp	r3, #1
 8004896:	d135      	bne.n	8004904 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	613b      	str	r3, [r7, #16]
   return(result);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f023 0310 	bic.w	r3, r3, #16
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048be:	623a      	str	r2, [r7, #32]
 80048c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	69f9      	ldr	r1, [r7, #28]
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e5      	bne.n	800489e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d10a      	bne.n	80048f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fc fa05 	bl	8000d0c <HAL_UARTEx_RxEventCallback>
 8004902:	e002      	b.n	800490a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff fc29 	bl	800415c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e002      	b.n	8004914 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3730      	adds	r7, #48	; 0x30
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	b09f      	sub	sp, #124	; 0x7c
 8004922:	af00      	add	r7, sp, #0
 8004924:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004932:	68d9      	ldr	r1, [r3, #12]
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	ea40 0301 	orr.w	r3, r0, r1
 800493c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800493e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	431a      	orrs	r2, r3
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4313      	orrs	r3, r2
 8004954:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004960:	f021 010c 	bic.w	r1, r1, #12
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800496a:	430b      	orrs	r3, r1
 800496c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800496e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	6999      	ldr	r1, [r3, #24]
 800497c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	ea40 0301 	orr.w	r3, r0, r1
 8004984:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4bc5      	ldr	r3, [pc, #788]	; (8004ca0 <UART_SetConfig+0x384>)
 800498c:	429a      	cmp	r2, r3
 800498e:	d004      	beq.n	800499a <UART_SetConfig+0x7e>
 8004990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4bc3      	ldr	r3, [pc, #780]	; (8004ca4 <UART_SetConfig+0x388>)
 8004996:	429a      	cmp	r2, r3
 8004998:	d103      	bne.n	80049a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800499a:	f7fe fd79 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 800499e:	6778      	str	r0, [r7, #116]	; 0x74
 80049a0:	e002      	b.n	80049a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049a2:	f7fe fd61 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 80049a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b0:	f040 80b6 	bne.w	8004b20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b6:	461c      	mov	r4, r3
 80049b8:	f04f 0500 	mov.w	r5, #0
 80049bc:	4622      	mov	r2, r4
 80049be:	462b      	mov	r3, r5
 80049c0:	1891      	adds	r1, r2, r2
 80049c2:	6439      	str	r1, [r7, #64]	; 0x40
 80049c4:	415b      	adcs	r3, r3
 80049c6:	647b      	str	r3, [r7, #68]	; 0x44
 80049c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049cc:	1912      	adds	r2, r2, r4
 80049ce:	eb45 0303 	adc.w	r3, r5, r3
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f04f 0100 	mov.w	r1, #0
 80049da:	00d9      	lsls	r1, r3, #3
 80049dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049e0:	00d0      	lsls	r0, r2, #3
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	1911      	adds	r1, r2, r4
 80049e8:	6639      	str	r1, [r7, #96]	; 0x60
 80049ea:	416b      	adcs	r3, r5
 80049ec:	667b      	str	r3, [r7, #100]	; 0x64
 80049ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80049fc:	415b      	adcs	r3, r3
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a08:	f7fc f804 	bl	8000a14 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4ba5      	ldr	r3, [pc, #660]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004a12:	fba3 2302 	umull	r2, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	011e      	lsls	r6, r3, #4
 8004a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a1c:	461c      	mov	r4, r3
 8004a1e:	f04f 0500 	mov.w	r5, #0
 8004a22:	4622      	mov	r2, r4
 8004a24:	462b      	mov	r3, r5
 8004a26:	1891      	adds	r1, r2, r2
 8004a28:	6339      	str	r1, [r7, #48]	; 0x30
 8004a2a:	415b      	adcs	r3, r3
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a32:	1912      	adds	r2, r2, r4
 8004a34:	eb45 0303 	adc.w	r3, r5, r3
 8004a38:	f04f 0000 	mov.w	r0, #0
 8004a3c:	f04f 0100 	mov.w	r1, #0
 8004a40:	00d9      	lsls	r1, r3, #3
 8004a42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a46:	00d0      	lsls	r0, r2, #3
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	1911      	adds	r1, r2, r4
 8004a4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a50:	416b      	adcs	r3, r5
 8004a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	1891      	adds	r1, r2, r2
 8004a60:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a62:	415b      	adcs	r3, r3
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a6e:	f7fb ffd1 	bl	8000a14 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b8c      	ldr	r3, [pc, #560]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004a78:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	2164      	movs	r1, #100	; 0x64
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	3332      	adds	r3, #50	; 0x32
 8004a8a:	4a87      	ldr	r2, [pc, #540]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a98:	441e      	add	r6, r3
 8004a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	1894      	adds	r4, r2, r2
 8004aa8:	623c      	str	r4, [r7, #32]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab2:	1812      	adds	r2, r2, r0
 8004ab4:	eb41 0303 	adc.w	r3, r1, r3
 8004ab8:	f04f 0400 	mov.w	r4, #0
 8004abc:	f04f 0500 	mov.w	r5, #0
 8004ac0:	00dd      	lsls	r5, r3, #3
 8004ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ac6:	00d4      	lsls	r4, r2, #3
 8004ac8:	4622      	mov	r2, r4
 8004aca:	462b      	mov	r3, r5
 8004acc:	1814      	adds	r4, r2, r0
 8004ace:	653c      	str	r4, [r7, #80]	; 0x50
 8004ad0:	414b      	adcs	r3, r1
 8004ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	1891      	adds	r1, r2, r2
 8004ae0:	61b9      	str	r1, [r7, #24]
 8004ae2:	415b      	adcs	r3, r3
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004aee:	f7fb ff91 	bl	8000a14 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4b6c      	ldr	r3, [pc, #432]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004af8:	fba3 1302 	umull	r1, r3, r3, r2
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	2164      	movs	r1, #100	; 0x64
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	3332      	adds	r3, #50	; 0x32
 8004b0a:	4a67      	ldr	r2, [pc, #412]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	f003 0207 	and.w	r2, r3, #7
 8004b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4432      	add	r2, r6
 8004b1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b1e:	e0b9      	b.n	8004c94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b22:	461c      	mov	r4, r3
 8004b24:	f04f 0500 	mov.w	r5, #0
 8004b28:	4622      	mov	r2, r4
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	6139      	str	r1, [r7, #16]
 8004b30:	415b      	adcs	r3, r3
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b38:	1912      	adds	r2, r2, r4
 8004b3a:	eb45 0303 	adc.w	r3, r5, r3
 8004b3e:	f04f 0000 	mov.w	r0, #0
 8004b42:	f04f 0100 	mov.w	r1, #0
 8004b46:	00d9      	lsls	r1, r3, #3
 8004b48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b4c:	00d0      	lsls	r0, r2, #3
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	eb12 0804 	adds.w	r8, r2, r4
 8004b56:	eb43 0905 	adc.w	r9, r3, r5
 8004b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f04f 0100 	mov.w	r1, #0
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	008b      	lsls	r3, r1, #2
 8004b6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b72:	0082      	lsls	r2, r0, #2
 8004b74:	4640      	mov	r0, r8
 8004b76:	4649      	mov	r1, r9
 8004b78:	f7fb ff4c 	bl	8000a14 <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004b82:	fba3 2302 	umull	r2, r3, r3, r2
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	011e      	lsls	r6, r3, #4
 8004b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	1894      	adds	r4, r2, r2
 8004b98:	60bc      	str	r4, [r7, #8]
 8004b9a:	415b      	adcs	r3, r3
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba2:	1812      	adds	r2, r2, r0
 8004ba4:	eb41 0303 	adc.w	r3, r1, r3
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	f04f 0500 	mov.w	r5, #0
 8004bb0:	00dd      	lsls	r5, r3, #3
 8004bb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bb6:	00d4      	lsls	r4, r2, #3
 8004bb8:	4622      	mov	r2, r4
 8004bba:	462b      	mov	r3, r5
 8004bbc:	1814      	adds	r4, r2, r0
 8004bbe:	64bc      	str	r4, [r7, #72]	; 0x48
 8004bc0:	414b      	adcs	r3, r1
 8004bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f04f 0100 	mov.w	r1, #0
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	008b      	lsls	r3, r1, #2
 8004bd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bdc:	0082      	lsls	r2, r0, #2
 8004bde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004be2:	f7fb ff17 	bl	8000a14 <__aeabi_uldivmod>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004bec:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	2164      	movs	r1, #100	; 0x64
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	3332      	adds	r3, #50	; 0x32
 8004bfe:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0a:	441e      	add	r6, r3
 8004c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f04f 0100 	mov.w	r1, #0
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	1894      	adds	r4, r2, r2
 8004c1a:	603c      	str	r4, [r7, #0]
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c24:	1812      	adds	r2, r2, r0
 8004c26:	eb41 0303 	adc.w	r3, r1, r3
 8004c2a:	f04f 0400 	mov.w	r4, #0
 8004c2e:	f04f 0500 	mov.w	r5, #0
 8004c32:	00dd      	lsls	r5, r3, #3
 8004c34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c38:	00d4      	lsls	r4, r2, #3
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	eb12 0a00 	adds.w	sl, r2, r0
 8004c42:	eb43 0b01 	adc.w	fp, r3, r1
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	008b      	lsls	r3, r1, #2
 8004c5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c5e:	0082      	lsls	r2, r0, #2
 8004c60:	4650      	mov	r0, sl
 8004c62:	4659      	mov	r1, fp
 8004c64:	f7fb fed6 	bl	8000a14 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2164      	movs	r1, #100	; 0x64
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <UART_SetConfig+0x38c>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4432      	add	r2, r6
 8004c92:	609a      	str	r2, [r3, #8]
}
 8004c94:	bf00      	nop
 8004c96:	377c      	adds	r7, #124	; 0x7c
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40011000 	.word	0x40011000
 8004ca4:	40011400 	.word	0x40011400
 8004ca8:	51eb851f 	.word	0x51eb851f

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4d0d      	ldr	r5, [pc, #52]	; (8004ce4 <__libc_init_array+0x38>)
 8004cb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <__libc_init_array+0x3c>)
 8004cb2:	1b64      	subs	r4, r4, r5
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	42a6      	cmp	r6, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	4d0b      	ldr	r5, [pc, #44]	; (8004cec <__libc_init_array+0x40>)
 8004cbe:	4c0c      	ldr	r4, [pc, #48]	; (8004cf0 <__libc_init_array+0x44>)
 8004cc0:	f000 f82e 	bl	8004d20 <_init>
 8004cc4:	1b64      	subs	r4, r4, r5
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	2600      	movs	r6, #0
 8004cca:	42a6      	cmp	r6, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd4:	4798      	blx	r3
 8004cd6:	3601      	adds	r6, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cde:	4798      	blx	r3
 8004ce0:	3601      	adds	r6, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	08004d60 	.word	0x08004d60
 8004ce8:	08004d60 	.word	0x08004d60
 8004cec:	08004d60 	.word	0x08004d60
 8004cf0:	08004d64 	.word	0x08004d64

08004cf4 <memcpy>:
 8004cf4:	440a      	add	r2, r1
 8004cf6:	4291      	cmp	r1, r2
 8004cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cfc:	d100      	bne.n	8004d00 <memcpy+0xc>
 8004cfe:	4770      	bx	lr
 8004d00:	b510      	push	{r4, lr}
 8004d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d0a:	4291      	cmp	r1, r2
 8004d0c:	d1f9      	bne.n	8004d02 <memcpy+0xe>
 8004d0e:	bd10      	pop	{r4, pc}

08004d10 <memset>:
 8004d10:	4402      	add	r2, r0
 8004d12:	4603      	mov	r3, r0
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <_init>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr

08004d2c <_fini>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	bf00      	nop
 8004d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d32:	bc08      	pop	{r3}
 8004d34:	469e      	mov	lr, r3
 8004d36:	4770      	bx	lr
