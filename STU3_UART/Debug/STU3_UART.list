
STU3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c74  08003c74  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c7c  08003c7c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000020  08003ca4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003ca4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009842  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001653  00000000  00000000  00029892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0002aee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0002b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001563e  00000000  00000000  0002bc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a8c  00000000  00000000  0004123e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d44  00000000  00000000  00049cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfa0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001adc  00000000  00000000  000cfa64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c3c 	.word	0x08003c3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08003c3c 	.word	0x08003c3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UARTEx_RxEventCallback>:

uint16_t oldPos = 0;
uint16_t newPos = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a3d      	ldr	r2, [pc, #244]	; (80005d8 <HAL_UARTEx_RxEventCallback+0x108>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d173      	bne.n	80005ce <HAL_UARTEx_RxEventCallback+0xfe>
	{
		oldPos = newPos;  // Update the last position before copying new data
 80004e6:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <HAL_UARTEx_RxEventCallback+0x10c>)
 80004e8:	881a      	ldrh	r2, [r3, #0]
 80004ea:	4b3d      	ldr	r3, [pc, #244]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x110>)
 80004ec:	801a      	strh	r2, [r3, #0]
		datasize = Size;
 80004ee:	4a3d      	ldr	r2, [pc, #244]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x114>)
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	8013      	strh	r3, [r2, #0]
		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 80004f4:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x110>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	461a      	mov	r2, r3
 80004fa:	887b      	ldrh	r3, [r7, #2]
 80004fc:	4413      	add	r3, r2
 80004fe:	2b20      	cmp	r3, #32
 8000500:	dd22      	ble.n	8000548 <HAL_UARTEx_RxEventCallback+0x78>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8000502:	4b37      	ldr	r3, [pc, #220]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x110>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	f1c3 0320 	rsb	r3, r3, #32
 800050a:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);  // copy data in that remaining space
 800050c:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x110>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000514:	4413      	add	r3, r2
 8000516:	89fa      	ldrh	r2, [r7, #14]
 8000518:	4934      	ldr	r1, [pc, #208]	; (80005ec <HAL_UARTEx_RxEventCallback+0x11c>)
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fb78 	bl	8003c10 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8000520:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x110>)
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	4a30      	ldr	r2, [pc, #192]	; (80005ec <HAL_UARTEx_RxEventCallback+0x11c>)
 800052a:	1899      	adds	r1, r3, r2
 800052c:	887a      	ldrh	r2, [r7, #2]
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	461a      	mov	r2, r3
 8000534:	482c      	ldr	r0, [pc, #176]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000536:	f003 fb6b 	bl	8003c10 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 800053a:	887a      	ldrh	r2, [r7, #2]
 800053c:	89fb      	ldrh	r3, [r7, #14]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	b29a      	uxth	r2, r3
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <HAL_UARTEx_RxEventCallback+0x10c>)
 8000544:	801a      	strh	r2, [r3, #0]
 8000546:	e010      	b.n	800056a <HAL_UARTEx_RxEventCallback+0x9a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x110>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000550:	4413      	add	r3, r2
 8000552:	887a      	ldrh	r2, [r7, #2]
 8000554:	4925      	ldr	r1, [pc, #148]	; (80005ec <HAL_UARTEx_RxEventCallback+0x11c>)
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fb5a 	bl	8003c10 <memcpy>
			newPos = Size+oldPos;
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x110>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	4413      	add	r3, r2
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <HAL_UARTEx_RxEventCallback+0x10c>)
 8000568:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos-datasize];
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <HAL_UARTEx_RxEventCallback+0x10c>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x114>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000578:	5cd2      	ldrb	r2, [r2, r3]
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x120>)
 800057c:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4;
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	091b      	lsrs	r3, r3, #4
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000588:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15);
 800058a:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x120>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	f003 030f 	and.w	r3, r3, #15
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000596:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x124>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b09      	cmp	r3, #9
 800059e:	d109      	bne.n	80005b4 <HAL_UARTEx_RxEventCallback+0xe4>
			if (NameM >= 1 && NameM <= 14){
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_UARTEx_RxEventCallback+0x128>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d005      	beq.n	80005b4 <HAL_UARTEx_RxEventCallback+0xe4>
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_UARTEx_RxEventCallback+0x128>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b0e      	cmp	r3, #14
 80005ae:	d801      	bhi.n	80005b4 <HAL_UARTEx_RxEventCallback+0xe4>
				check_Mode();
 80005b0:	f000 f828 	bl	8000604 <check_Mode>
			}
		}


		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 80005b4:	2220      	movs	r2, #32
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <HAL_UARTEx_RxEventCallback+0x11c>)
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <HAL_UARTEx_RxEventCallback+0x12c>)
 80005ba:	f002 fa60 	bl	8002a7e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_UARTEx_RxEventCallback+0x130>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_UARTEx_RxEventCallback+0x130>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f022 0208 	bic.w	r2, r2, #8
 80005cc:	601a      	str	r2, [r3, #0]

	}
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40004400 	.word	0x40004400
 80005dc:	20000040 	.word	0x20000040
 80005e0:	2000003e 	.word	0x2000003e
 80005e4:	2000003c 	.word	0x2000003c
 80005e8:	20000150 	.word	0x20000150
 80005ec:	20000128 	.word	0x20000128
 80005f0:	200000a8 	.word	0x200000a8
 80005f4:	20000044 	.word	0x20000044
 80005f8:	200000ae 	.word	0x200000ae
 80005fc:	20000170 	.word	0x20000170
 8000600:	20000048 	.word	0x20000048

08000604 <check_Mode>:
void check_Mode()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
		switch (NameM){
 800060a:	4b89      	ldr	r3, [pc, #548]	; (8000830 <check_Mode+0x22c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	2b0d      	cmp	r3, #13
 8000612:	f200 82f6 	bhi.w	8000c02 <check_Mode+0x5fe>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <check_Mode+0x18>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	08000655 	.word	0x08000655
 8000620:	080006bf 	.word	0x080006bf
 8000624:	080006fd 	.word	0x080006fd
 8000628:	0800073b 	.word	0x0800073b
 800062c:	080007b5 	.word	0x080007b5
 8000630:	08000869 	.word	0x08000869
 8000634:	080008e3 	.word	0x080008e3
 8000638:	08000995 	.word	0x08000995
 800063c:	080009e1 	.word	0x080009e1
 8000640:	08000a2d 	.word	0x08000a2d
 8000644:	08000a79 	.word	0x08000a79
 8000648:	08000b19 	.word	0x08000b19
 800064c:	08000b55 	.word	0x08000b55
 8000650:	08000b91 	.word	0x08000b91
			case 1: //10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos-1];
 8000654:	4b77      	ldr	r3, [pc, #476]	; (8000834 <check_Mode+0x230>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	4a77      	ldr	r2, [pc, #476]	; (8000838 <check_Mode+0x234>)
 800065c:	5cd2      	ldrb	r2, [r2, r3]
 800065e:	4b77      	ldr	r3, [pc, #476]	; (800083c <check_Mode+0x238>)
 8000660:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos-2];
 8000662:	4b74      	ldr	r3, [pc, #464]	; (8000834 <check_Mode+0x230>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	3b02      	subs	r3, #2
 8000668:	4a73      	ldr	r2, [pc, #460]	; (8000838 <check_Mode+0x234>)
 800066a:	5cd2      	ldrb	r2, [r2, r3]
 800066c:	4b74      	ldr	r3, [pc, #464]	; (8000840 <check_Mode+0x23c>)
 800066e:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos-3];
 8000670:	4b70      	ldr	r3, [pc, #448]	; (8000834 <check_Mode+0x230>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	3b03      	subs	r3, #3
 8000676:	4a70      	ldr	r2, [pc, #448]	; (8000838 <check_Mode+0x234>)
 8000678:	5cd2      	ldrb	r2, [r2, r3]
 800067a:	4b72      	ldr	r3, [pc, #456]	; (8000844 <check_Mode+0x240>)
 800067c:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 800067e:	4b72      	ldr	r3, [pc, #456]	; (8000848 <check_Mode+0x244>)
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4b70      	ldr	r3, [pc, #448]	; (8000844 <check_Mode+0x240>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b6d      	ldr	r3, [pc, #436]	; (8000840 <check_Mode+0x23c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	43db      	mvns	r3, r3
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b6d      	ldr	r3, [pc, #436]	; (800084c <check_Mode+0x248>)
 8000698:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800069a:	4b68      	ldr	r3, [pc, #416]	; (800083c <check_Mode+0x238>)
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	4b6b      	ldr	r3, [pc, #428]	; (800084c <check_Mode+0x248>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	f040 8292 	bne.w	8000bcc <check_Mode+0x5c8>
					M_state = 1;
 80006a8:	4b69      	ldr	r3, [pc, #420]	; (8000850 <check_Mode+0x24c>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	2202      	movs	r2, #2
 80006b4:	4967      	ldr	r1, [pc, #412]	; (8000854 <check_Mode+0x250>)
 80006b6:	4868      	ldr	r0, [pc, #416]	; (8000858 <check_Mode+0x254>)
 80006b8:	f002 f94f 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 80006bc:	e286      	b.n	8000bcc <check_Mode+0x5c8>
			case 2: //10010010 01101101
				chksum = MainBuf[newPos-1];
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <check_Mode+0x230>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	4a5c      	ldr	r2, [pc, #368]	; (8000838 <check_Mode+0x234>)
 80006c6:	5cd2      	ldrb	r2, [r2, r3]
 80006c8:	4b5c      	ldr	r3, [pc, #368]	; (800083c <check_Mode+0x238>)
 80006ca:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80006cc:	4b5e      	ldr	r3, [pc, #376]	; (8000848 <check_Mode+0x244>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	43db      	mvns	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b61      	ldr	r3, [pc, #388]	; (800085c <check_Mode+0x258>)
 80006d6:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80006d8:	4b58      	ldr	r3, [pc, #352]	; (800083c <check_Mode+0x238>)
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	4b5f      	ldr	r3, [pc, #380]	; (800085c <check_Mode+0x258>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	f040 8275 	bne.w	8000bd0 <check_Mode+0x5cc>
					M_state = 2;
 80006e6:	4b5a      	ldr	r3, [pc, #360]	; (8000850 <check_Mode+0x24c>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80006ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f0:	2202      	movs	r2, #2
 80006f2:	4958      	ldr	r1, [pc, #352]	; (8000854 <check_Mode+0x250>)
 80006f4:	4858      	ldr	r0, [pc, #352]	; (8000858 <check_Mode+0x254>)
 80006f6:	f002 f930 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 80006fa:	e269      	b.n	8000bd0 <check_Mode+0x5cc>
			case 3: //10010011 01101100
					chksum = MainBuf[newPos-1];
 80006fc:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <check_Mode+0x230>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3b01      	subs	r3, #1
 8000702:	4a4d      	ldr	r2, [pc, #308]	; (8000838 <check_Mode+0x234>)
 8000704:	5cd2      	ldrb	r2, [r2, r3]
 8000706:	4b4d      	ldr	r3, [pc, #308]	; (800083c <check_Mode+0x238>)
 8000708:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800070a:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <check_Mode+0x244>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	43db      	mvns	r3, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b52      	ldr	r3, [pc, #328]	; (800085c <check_Mode+0x258>)
 8000714:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000716:	4b49      	ldr	r3, [pc, #292]	; (800083c <check_Mode+0x238>)
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <check_Mode+0x258>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	f040 8258 	bne.w	8000bd4 <check_Mode+0x5d0>
					M_state = 3;
 8000724:	4b4a      	ldr	r3, [pc, #296]	; (8000850 <check_Mode+0x24c>)
 8000726:	2203      	movs	r2, #3
 8000728:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	2202      	movs	r2, #2
 8000730:	4948      	ldr	r1, [pc, #288]	; (8000854 <check_Mode+0x250>)
 8000732:	4849      	ldr	r0, [pc, #292]	; (8000858 <check_Mode+0x254>)
 8000734:	f002 f911 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 8000738:	e24c      	b.n	8000bd4 <check_Mode+0x5d0>
			case 4:
					chksum = MainBuf[newPos-1];
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <check_Mode+0x230>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	4a3d      	ldr	r2, [pc, #244]	; (8000838 <check_Mode+0x234>)
 8000742:	5cd2      	ldrb	r2, [r2, r3]
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <check_Mode+0x238>)
 8000746:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos-2];
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <check_Mode+0x230>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	3b02      	subs	r3, #2
 800074e:	4a3a      	ldr	r2, [pc, #232]	; (8000838 <check_Mode+0x234>)
 8000750:	5cd2      	ldrb	r2, [r2, r3]
 8000752:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <check_Mode+0x23c>)
 8000754:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos-3];
 8000756:	4b37      	ldr	r3, [pc, #220]	; (8000834 <check_Mode+0x230>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	3b03      	subs	r3, #3
 800075c:	4a36      	ldr	r2, [pc, #216]	; (8000838 <check_Mode+0x234>)
 800075e:	5cd2      	ldrb	r2, [r2, r3]
 8000760:	4b38      	ldr	r3, [pc, #224]	; (8000844 <check_Mode+0x240>)
 8000762:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 8000764:	4b37      	ldr	r3, [pc, #220]	; (8000844 <check_Mode+0x240>)
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <check_Mode+0x25c>)
 800076a:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 800076c:	4b34      	ldr	r3, [pc, #208]	; (8000840 <check_Mode+0x23c>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <check_Mode+0x25c>)
 8000772:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000774:	4b34      	ldr	r3, [pc, #208]	; (8000848 <check_Mode+0x244>)
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	4b32      	ldr	r3, [pc, #200]	; (8000844 <check_Mode+0x240>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4413      	add	r3, r2
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <check_Mode+0x23c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4413      	add	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	43db      	mvns	r3, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <check_Mode+0x248>)
 800078e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <check_Mode+0x238>)
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <check_Mode+0x248>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	f040 821d 	bne.w	8000bd8 <check_Mode+0x5d4>
					M_state = 4;
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <check_Mode+0x24c>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	2202      	movs	r2, #2
 80007aa:	492a      	ldr	r1, [pc, #168]	; (8000854 <check_Mode+0x250>)
 80007ac:	482a      	ldr	r0, [pc, #168]	; (8000858 <check_Mode+0x254>)
 80007ae:	f002 f8d4 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 80007b2:	e211      	b.n	8000bd8 <check_Mode+0x5d4>
			case 5:
					chksum = MainBuf[newPos-1];
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <check_Mode+0x230>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <check_Mode+0x234>)
 80007bc:	5cd2      	ldrb	r2, [r2, r3]
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <check_Mode+0x238>)
 80007c0:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos-2];
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <check_Mode+0x230>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	3b02      	subs	r3, #2
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <check_Mode+0x234>)
 80007ca:	5cd2      	ldrb	r2, [r2, r3]
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <check_Mode+0x23c>)
 80007ce:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos-3];
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <check_Mode+0x230>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	3b03      	subs	r3, #3
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <check_Mode+0x234>)
 80007d8:	5cd2      	ldrb	r2, [r2, r3]
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <check_Mode+0x240>)
 80007dc:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <check_Mode+0x240>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <check_Mode+0x260>)
 80007e4:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <check_Mode+0x23c>)
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <check_Mode+0x260>)
 80007ec:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <check_Mode+0x244>)
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <check_Mode+0x240>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <check_Mode+0x23c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	b2db      	uxtb	r3, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <check_Mode+0x248>)
 8000808:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <check_Mode+0x238>)
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <check_Mode+0x248>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	f040 81e2 	bne.w	8000bdc <check_Mode+0x5d8>
					M_state = 5;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <check_Mode+0x24c>)
 800081a:	2205      	movs	r2, #5
 800081c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	2202      	movs	r2, #2
 8000824:	490b      	ldr	r1, [pc, #44]	; (8000854 <check_Mode+0x250>)
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <check_Mode+0x254>)
 8000828:	f002 f897 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 800082c:	e1d6      	b.n	8000bdc <check_Mode+0x5d8>
 800082e:	bf00      	nop
 8000830:	200000ae 	.word	0x200000ae
 8000834:	20000040 	.word	0x20000040
 8000838:	20000150 	.word	0x20000150
 800083c:	20000148 	.word	0x20000148
 8000840:	200001b4 	.word	0x200001b4
 8000844:	20000113 	.word	0x20000113
 8000848:	200000a8 	.word	0x200000a8
 800084c:	20000111 	.word	0x20000111
 8000850:	20000123 	.word	0x20000123
 8000854:	20000000 	.word	0x20000000
 8000858:	20000170 	.word	0x20000170
 800085c:	20000114 	.word	0x20000114
 8000860:	2000014c 	.word	0x2000014c
 8000864:	200000ac 	.word	0x200000ac
			case 6:
					chksum = MainBuf[newPos-1];
 8000868:	4b96      	ldr	r3, [pc, #600]	; (8000ac4 <check_Mode+0x4c0>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	3b01      	subs	r3, #1
 800086e:	4a96      	ldr	r2, [pc, #600]	; (8000ac8 <check_Mode+0x4c4>)
 8000870:	5cd2      	ldrb	r2, [r2, r3]
 8000872:	4b96      	ldr	r3, [pc, #600]	; (8000acc <check_Mode+0x4c8>)
 8000874:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos-2];
 8000876:	4b93      	ldr	r3, [pc, #588]	; (8000ac4 <check_Mode+0x4c0>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	3b02      	subs	r3, #2
 800087c:	4a92      	ldr	r2, [pc, #584]	; (8000ac8 <check_Mode+0x4c4>)
 800087e:	5cd2      	ldrb	r2, [r2, r3]
 8000880:	4b93      	ldr	r3, [pc, #588]	; (8000ad0 <check_Mode+0x4cc>)
 8000882:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos-3];
 8000884:	4b8f      	ldr	r3, [pc, #572]	; (8000ac4 <check_Mode+0x4c0>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	3b03      	subs	r3, #3
 800088a:	4a8f      	ldr	r2, [pc, #572]	; (8000ac8 <check_Mode+0x4c4>)
 800088c:	5cd2      	ldrb	r2, [r2, r3]
 800088e:	4b91      	ldr	r3, [pc, #580]	; (8000ad4 <check_Mode+0x4d0>)
 8000890:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 8000892:	4b90      	ldr	r3, [pc, #576]	; (8000ad4 <check_Mode+0x4d0>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	4b90      	ldr	r3, [pc, #576]	; (8000ad8 <check_Mode+0x4d4>)
 8000898:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 800089a:	4b8d      	ldr	r3, [pc, #564]	; (8000ad0 <check_Mode+0x4cc>)
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	4b8e      	ldr	r3, [pc, #568]	; (8000ad8 <check_Mode+0x4d4>)
 80008a0:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80008a2:	4b8e      	ldr	r3, [pc, #568]	; (8000adc <check_Mode+0x4d8>)
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	4b8b      	ldr	r3, [pc, #556]	; (8000ad4 <check_Mode+0x4d0>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b88      	ldr	r3, [pc, #544]	; (8000ad0 <check_Mode+0x4cc>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b89      	ldr	r3, [pc, #548]	; (8000ae0 <check_Mode+0x4dc>)
 80008bc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80008be:	4b83      	ldr	r3, [pc, #524]	; (8000acc <check_Mode+0x4c8>)
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	4b87      	ldr	r3, [pc, #540]	; (8000ae0 <check_Mode+0x4dc>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	f040 818a 	bne.w	8000be0 <check_Mode+0x5dc>
					M_state = 6;
 80008cc:	4b85      	ldr	r3, [pc, #532]	; (8000ae4 <check_Mode+0x4e0>)
 80008ce:	2206      	movs	r2, #6
 80008d0:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	2202      	movs	r2, #2
 80008d8:	4983      	ldr	r1, [pc, #524]	; (8000ae8 <check_Mode+0x4e4>)
 80008da:	4884      	ldr	r0, [pc, #528]	; (8000aec <check_Mode+0x4e8>)
 80008dc:	f002 f83d 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 80008e0:	e17e      	b.n	8000be0 <check_Mode+0x5dc>
			case 7:
				Nstation = MainBuf[(newPos-datasize)+1];
 80008e2:	4b78      	ldr	r3, [pc, #480]	; (8000ac4 <check_Mode+0x4c0>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b81      	ldr	r3, [pc, #516]	; (8000af0 <check_Mode+0x4ec>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	3301      	adds	r3, #1
 80008f0:	4a75      	ldr	r2, [pc, #468]	; (8000ac8 <check_Mode+0x4c4>)
 80008f2:	5cd2      	ldrb	r2, [r2, r3]
 80008f4:	4b7f      	ldr	r3, [pc, #508]	; (8000af4 <check_Mode+0x4f0>)
 80008f6:	701a      	strb	r2, [r3, #0]
				for(int i=2; i < Nstation+2; i++ ){
 80008f8:	2302      	movs	r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	e01a      	b.n	8000934 <check_Mode+0x330>
					dataFSum += MainBuf[newPos-i];
 80008fe:	4b71      	ldr	r3, [pc, #452]	; (8000ac4 <check_Mode+0x4c0>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	4a6f      	ldr	r2, [pc, #444]	; (8000ac8 <check_Mode+0x4c4>)
 800090a:	5cd2      	ldrb	r2, [r2, r3]
 800090c:	4b7a      	ldr	r3, [pc, #488]	; (8000af8 <check_Mode+0x4f4>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4413      	add	r3, r2
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <check_Mode+0x4f4>)
 8000916:	701a      	strb	r2, [r3, #0]
					Set_Goal_nSta[i-2] = MainBuf[newPos-i];
 8000918:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <check_Mode+0x4c0>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	1ad2      	subs	r2, r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3b02      	subs	r3, #2
 8000926:	4968      	ldr	r1, [pc, #416]	; (8000ac8 <check_Mode+0x4c4>)
 8000928:	5c89      	ldrb	r1, [r1, r2]
 800092a:	4a74      	ldr	r2, [pc, #464]	; (8000afc <check_Mode+0x4f8>)
 800092c:	54d1      	strb	r1, [r2, r3]
				for(int i=2; i < Nstation+2; i++ ){
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3301      	adds	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b6f      	ldr	r3, [pc, #444]	; (8000af4 <check_Mode+0x4f0>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	ddde      	ble.n	80008fe <check_Mode+0x2fa>
				}
				chksum = MainBuf[newPos-1];
 8000940:	4b60      	ldr	r3, [pc, #384]	; (8000ac4 <check_Mode+0x4c0>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	4a60      	ldr	r2, [pc, #384]	; (8000ac8 <check_Mode+0x4c4>)
 8000948:	5cd2      	ldrb	r2, [r2, r3]
 800094a:	4b60      	ldr	r3, [pc, #384]	; (8000acc <check_Mode+0x4c8>)
 800094c:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 800094e:	4b63      	ldr	r3, [pc, #396]	; (8000adc <check_Mode+0x4d8>)
 8000950:	781a      	ldrb	r2, [r3, #0]
 8000952:	4b68      	ldr	r3, [pc, #416]	; (8000af4 <check_Mode+0x4f0>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <check_Mode+0x4f4>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b66      	ldr	r3, [pc, #408]	; (8000b00 <check_Mode+0x4fc>)
 8000968:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 800096a:	4b58      	ldr	r3, [pc, #352]	; (8000acc <check_Mode+0x4c8>)
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <check_Mode+0x4fc>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	f040 8136 	bne.w	8000be4 <check_Mode+0x5e0>
					M_state = 7;
 8000978:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <check_Mode+0x4e0>)
 800097a:	2207      	movs	r2, #7
 800097c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 800097e:	4b5e      	ldr	r3, [pc, #376]	; (8000af8 <check_Mode+0x4f4>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	2202      	movs	r2, #2
 800098a:	4957      	ldr	r1, [pc, #348]	; (8000ae8 <check_Mode+0x4e4>)
 800098c:	4857      	ldr	r0, [pc, #348]	; (8000aec <check_Mode+0x4e8>)
 800098e:	f001 ffe4 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 8000992:	e127      	b.n	8000be4 <check_Mode+0x5e0>
			case 8: //10011000 01100111
				chksum = MainBuf[newPos-1];
 8000994:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <check_Mode+0x4c0>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	3b01      	subs	r3, #1
 800099a:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <check_Mode+0x4c4>)
 800099c:	5cd2      	ldrb	r2, [r2, r3]
 800099e:	4b4b      	ldr	r3, [pc, #300]	; (8000acc <check_Mode+0x4c8>)
 80009a0:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80009a2:	4b4e      	ldr	r3, [pc, #312]	; (8000adc <check_Mode+0x4d8>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	43db      	mvns	r3, r3
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <check_Mode+0x500>)
 80009ac:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <check_Mode+0x4c8>)
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	4b54      	ldr	r3, [pc, #336]	; (8000b04 <check_Mode+0x500>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	f040 8116 	bne.w	8000be8 <check_Mode+0x5e4>
					M_state = 8;
 80009bc:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <check_Mode+0x4e0>)
 80009be:	2208      	movs	r2, #8
 80009c0:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	2202      	movs	r2, #2
 80009c8:	4947      	ldr	r1, [pc, #284]	; (8000ae8 <check_Mode+0x4e4>)
 80009ca:	4848      	ldr	r0, [pc, #288]	; (8000aec <check_Mode+0x4e8>)
 80009cc:	f001 ffc5 	bl	800295a <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f, 2 ,1000);
 80009d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d4:	2202      	movs	r2, #2
 80009d6:	494c      	ldr	r1, [pc, #304]	; (8000b08 <check_Mode+0x504>)
 80009d8:	4844      	ldr	r0, [pc, #272]	; (8000aec <check_Mode+0x4e8>)
 80009da:	f001 ffbe 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 80009de:	e103      	b.n	8000be8 <check_Mode+0x5e4>
			case 9: //10011001 01100110
				chksum = MainBuf[newPos-1];
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <check_Mode+0x4c0>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	4a38      	ldr	r2, [pc, #224]	; (8000ac8 <check_Mode+0x4c4>)
 80009e8:	5cd2      	ldrb	r2, [r2, r3]
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <check_Mode+0x4c8>)
 80009ec:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80009ee:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <check_Mode+0x4d8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	43db      	mvns	r3, r3
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <check_Mode+0x500>)
 80009f8:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <check_Mode+0x4c8>)
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	4b41      	ldr	r3, [pc, #260]	; (8000b04 <check_Mode+0x500>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	f040 80f2 	bne.w	8000bec <check_Mode+0x5e8>
					M_state = 9;
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <check_Mode+0x4e0>)
 8000a0a:	2209      	movs	r2, #9
 8000a0c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	2202      	movs	r2, #2
 8000a14:	4934      	ldr	r1, [pc, #208]	; (8000ae8 <check_Mode+0x4e4>)
 8000a16:	4835      	ldr	r0, [pc, #212]	; (8000aec <check_Mode+0x4e8>)
 8000a18:	f001 ff9f 	bl	800295a <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,1000);
 8000a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a20:	2204      	movs	r2, #4
 8000a22:	493a      	ldr	r1, [pc, #232]	; (8000b0c <check_Mode+0x508>)
 8000a24:	4831      	ldr	r0, [pc, #196]	; (8000aec <check_Mode+0x4e8>)
 8000a26:	f001 ff98 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 8000a2a:	e0df      	b.n	8000bec <check_Mode+0x5e8>
			case 10: //10011010 01100101
				chksum = MainBuf[newPos-1];
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <check_Mode+0x4c0>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <check_Mode+0x4c4>)
 8000a34:	5cd2      	ldrb	r2, [r2, r3]
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <check_Mode+0x4c8>)
 8000a38:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <check_Mode+0x4d8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <check_Mode+0x500>)
 8000a44:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <check_Mode+0x4c8>)
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <check_Mode+0x500>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	f040 80ce 	bne.w	8000bf0 <check_Mode+0x5ec>
					M_state = 10;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <check_Mode+0x4e0>)
 8000a56:	220a      	movs	r2, #10
 8000a58:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	2202      	movs	r2, #2
 8000a60:	4921      	ldr	r1, [pc, #132]	; (8000ae8 <check_Mode+0x4e4>)
 8000a62:	4822      	ldr	r0, [pc, #136]	; (8000aec <check_Mode+0x4e8>)
 8000a64:	f001 ff79 	bl	800295a <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,1000);
 8000a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	4928      	ldr	r1, [pc, #160]	; (8000b10 <check_Mode+0x50c>)
 8000a70:	481e      	ldr	r0, [pc, #120]	; (8000aec <check_Mode+0x4e8>)
 8000a72:	f001 ff72 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 8000a76:	e0bb      	b.n	8000bf0 <check_Mode+0x5ec>
			case 11: //10011011 01100100
				chksum = MainBuf[newPos-1];
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <check_Mode+0x4c0>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <check_Mode+0x4c4>)
 8000a80:	5cd2      	ldrb	r2, [r2, r3]
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <check_Mode+0x4c8>)
 8000a84:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <check_Mode+0x4d8>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <check_Mode+0x500>)
 8000a90:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <check_Mode+0x4c8>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <check_Mode+0x500>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	f040 80aa 	bne.w	8000bf4 <check_Mode+0x5f0>
					M_state = 11;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <check_Mode+0x4e0>)
 8000aa2:	220b      	movs	r2, #11
 8000aa4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	2202      	movs	r2, #2
 8000aac:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <check_Mode+0x4e4>)
 8000aae:	480f      	ldr	r0, [pc, #60]	; (8000aec <check_Mode+0x4e8>)
 8000ab0:	f001 ff53 	bl	800295a <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 8000ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab8:	2204      	movs	r2, #4
 8000aba:	4916      	ldr	r1, [pc, #88]	; (8000b14 <check_Mode+0x510>)
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <check_Mode+0x4e8>)
 8000abe:	f001 ff4c 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 8000ac2:	e097      	b.n	8000bf4 <check_Mode+0x5f0>
 8000ac4:	20000040 	.word	0x20000040
 8000ac8:	20000150 	.word	0x20000150
 8000acc:	20000148 	.word	0x20000148
 8000ad0:	200001b4 	.word	0x200001b4
 8000ad4:	20000113 	.word	0x20000113
 8000ad8:	20000124 	.word	0x20000124
 8000adc:	200000a8 	.word	0x200000a8
 8000ae0:	20000111 	.word	0x20000111
 8000ae4:	20000123 	.word	0x20000123
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000170 	.word	0x20000170
 8000af0:	2000003c 	.word	0x2000003c
 8000af4:	20000110 	.word	0x20000110
 8000af8:	20000122 	.word	0x20000122
 8000afc:	20000118 	.word	0x20000118
 8000b00:	200000a9 	.word	0x200000a9
 8000b04:	20000114 	.word	0x20000114
 8000b08:	20000004 	.word	0x20000004
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	2000000c 	.word	0x2000000c
 8000b14:	20000010 	.word	0x20000010
			case 12: //10011100 01100011
				chksum = MainBuf[newPos-1];
 8000b18:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <check_Mode+0x608>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <check_Mode+0x60c>)
 8000b20:	5cd2      	ldrb	r2, [r2, r3]
 8000b22:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <check_Mode+0x610>)
 8000b24:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000b26:	4b3c      	ldr	r3, [pc, #240]	; (8000c18 <check_Mode+0x614>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <check_Mode+0x618>)
 8000b30:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000b32:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <check_Mode+0x610>)
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <check_Mode+0x618>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d15c      	bne.n	8000bf8 <check_Mode+0x5f4>
					M_state = 12;
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <check_Mode+0x61c>)
 8000b40:	220c      	movs	r2, #12
 8000b42:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8000b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b48:	2202      	movs	r2, #2
 8000b4a:	4936      	ldr	r1, [pc, #216]	; (8000c24 <check_Mode+0x620>)
 8000b4c:	4836      	ldr	r0, [pc, #216]	; (8000c28 <check_Mode+0x624>)
 8000b4e:	f001 ff04 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 8000b52:	e051      	b.n	8000bf8 <check_Mode+0x5f4>
			case 13: //10011101 01100010
				chksum = MainBuf[newPos-1];
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <check_Mode+0x608>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <check_Mode+0x60c>)
 8000b5c:	5cd2      	ldrb	r2, [r2, r3]
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <check_Mode+0x610>)
 8000b60:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <check_Mode+0x614>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <check_Mode+0x618>)
 8000b6c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <check_Mode+0x610>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <check_Mode+0x618>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d140      	bne.n	8000bfc <check_Mode+0x5f8>
					M_state = 13;
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <check_Mode+0x61c>)
 8000b7c:	220d      	movs	r2, #13
 8000b7e:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8000b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b84:	2202      	movs	r2, #2
 8000b86:	4927      	ldr	r1, [pc, #156]	; (8000c24 <check_Mode+0x620>)
 8000b88:	4827      	ldr	r0, [pc, #156]	; (8000c28 <check_Mode+0x624>)
 8000b8a:	f001 fee6 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 8000b8e:	e035      	b.n	8000bfc <check_Mode+0x5f8>
			case 14: //10011110 01100001
				chksum = MainBuf[newPos-1];
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <check_Mode+0x608>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <check_Mode+0x60c>)
 8000b98:	5cd2      	ldrb	r2, [r2, r3]
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <check_Mode+0x610>)
 8000b9c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <check_Mode+0x614>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <check_Mode+0x618>)
 8000ba8:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <check_Mode+0x610>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <check_Mode+0x618>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d124      	bne.n	8000c00 <check_Mode+0x5fc>
					M_state = 14;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <check_Mode+0x61c>)
 8000bb8:	220e      	movs	r2, #14
 8000bba:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8000bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	4918      	ldr	r1, [pc, #96]	; (8000c24 <check_Mode+0x620>)
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <check_Mode+0x624>)
 8000bc6:	f001 fec8 	bl	800295a <HAL_UART_Transmit>
				}
				break;
 8000bca:	e019      	b.n	8000c00 <check_Mode+0x5fc>
				break;
 8000bcc:	bf00      	nop
 8000bce:	e018      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bd0:	bf00      	nop
 8000bd2:	e016      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bd4:	bf00      	nop
 8000bd6:	e014      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bd8:	bf00      	nop
 8000bda:	e012      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bdc:	bf00      	nop
 8000bde:	e010      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000be0:	bf00      	nop
 8000be2:	e00e      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000be4:	bf00      	nop
 8000be6:	e00c      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000be8:	bf00      	nop
 8000bea:	e00a      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bec:	bf00      	nop
 8000bee:	e008      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bf0:	bf00      	nop
 8000bf2:	e006      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bf4:	bf00      	nop
 8000bf6:	e004      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bf8:	bf00      	nop
 8000bfa:	e002      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000bfc:	bf00      	nop
 8000bfe:	e000      	b.n	8000c02 <check_Mode+0x5fe>
				break;
 8000c00:	bf00      	nop
			}

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000040 	.word	0x20000040
 8000c10:	20000150 	.word	0x20000150
 8000c14:	20000148 	.word	0x20000148
 8000c18:	200000a8 	.word	0x200000a8
 8000c1c:	20000114 	.word	0x20000114
 8000c20:	20000123 	.word	0x20000123
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000170 	.word	0x20000170

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 faae 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f81a 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f8d6 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3c:	f000 f8ac 	bl	8000d98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 f87e 	bl	8000d40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8000c44:	2220      	movs	r2, #32
 8000c46:	4906      	ldr	r1, [pc, #24]	; (8000c60 <main+0x34>)
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <main+0x38>)
 8000c4a:	f001 ff18 	bl	8002a7e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <main+0x3c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <main+0x3c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f022 0208 	bic.w	r2, r2, #8
 8000c5c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <main+0x32>
 8000c60:	20000128 	.word	0x20000128
 8000c64:	20000170 	.word	0x20000170
 8000c68:	20000048 	.word	0x20000048

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	; 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	2230      	movs	r2, #48	; 0x30
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 ffd6 	bl	8003c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <SystemClock_Config+0xcc>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <SystemClock_Config+0xcc>)
 8000c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <SystemClock_Config+0xcc>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <SystemClock_Config+0xd0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <SystemClock_Config+0xd0>)
 8000cb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <SystemClock_Config+0xd0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ce0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ce4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cea:	2304      	movs	r3, #4
 8000cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f970 	bl	8001fd8 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cfe:	f000 f8e1 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2302      	movs	r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fbd2 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d2a:	f000 f8cb 	bl	8000ec4 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3750      	adds	r7, #80	; 0x50
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40007000 	.word	0x40007000

08000d40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d46:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x54>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d4c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8000d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d58:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d7c:	f001 fda0 	bl	80028c0 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f000 f89d 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000170 	.word	0x20000170
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_DMA_Init+0x4c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <MX_DMA_Init+0x4c>)
 8000da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_DMA_Init+0x4c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2010      	movs	r0, #16
 8000dc0:	f000 fb33 	bl	800142a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dc4:	2010      	movs	r0, #16
 8000dc6:	f000 fb4c 	bl	8001462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2011      	movs	r0, #17
 8000dd0:	f000 fb2b 	bl	800142a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000dd4:	2011      	movs	r0, #17
 8000dd6:	f000 fb44 	bl	8001462 <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a2c      	ldr	r2, [pc, #176]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_GPIO_Init+0xd0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2120      	movs	r1, #32
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <MX_GPIO_Init+0xd4>)
 8000e74:	f001 f896 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <MX_GPIO_Init+0xd8>)
 8000e90:	f000 ff04 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e94:	2320      	movs	r3, #32
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_GPIO_Init+0xd4>)
 8000eac:	f000 fef6 	bl	8001c9c <HAL_GPIO_Init>

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020800 	.word	0x40020800

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x4c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f0e:	2007      	movs	r0, #7
 8000f10:	f000 fa80 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_UART_MspInit+0x14c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	f040 8090 	bne.w	8001064 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	4b49      	ldr	r3, [pc, #292]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a48      	ldr	r2, [pc, #288]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b46      	ldr	r3, [pc, #280]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4b42      	ldr	r3, [pc, #264]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a41      	ldr	r2, [pc, #260]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4837      	ldr	r0, [pc, #220]	; (8001074 <HAL_UART_MspInit+0x154>)
 8000f98:	f000 fe80 	bl	8001c9c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000f9e:	4a37      	ldr	r2, [pc, #220]	; (800107c <HAL_UART_MspInit+0x15c>)
 8000fa0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fdc:	4826      	ldr	r0, [pc, #152]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fde:	f000 fa5b 	bl	8001498 <HAL_DMA_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000fe8:	f7ff ff6c 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff2:	4a21      	ldr	r2, [pc, #132]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_UART_MspInit+0x160>)
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001000:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001004:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001008:	2240      	movs	r2, #64	; 0x40
 800100a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_UART_MspInit+0x160>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001018:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_UART_MspInit+0x160>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_UART_MspInit+0x160>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001038:	4811      	ldr	r0, [pc, #68]	; (8001080 <HAL_UART_MspInit+0x160>)
 800103a:	f000 fa2d 	bl	8001498 <HAL_DMA_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001044:	f7ff ff3e 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_UART_MspInit+0x160>)
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
 800104e:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2026      	movs	r0, #38	; 0x26
 800105a:	f000 f9e6 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105e:	2026      	movs	r0, #38	; 0x26
 8001060:	f000 f9ff 	bl	8001462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40004400 	.word	0x40004400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000
 8001078:	20000048 	.word	0x20000048
 800107c:	40026088 	.word	0x40026088
 8001080:	200000b0 	.word	0x200000b0
 8001084:	400260a0 	.word	0x400260a0

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 f8ae 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA1_Stream5_IRQHandler+0x10>)
 80010e2:	f000 fb71 	bl	80017c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000048 	.word	0x20000048

080010f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Stream6_IRQHandler+0x10>)
 80010f6:	f000 fb67 	bl	80017c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000b0 	.word	0x200000b0

08001104 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART2_IRQHandler+0x10>)
 800110a:	f001 fd1d 	bl	8002b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000170 	.word	0x20000170

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001158:	4c0b      	ldr	r4, [pc, #44]	; (8001188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001166:	f7ff ffd7 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f002 fd2d 	bl	8003bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fd5d 	bl	8000c2c <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001180:	08003c84 	.word	0x08003c84
  ldr r2, =_sbss
 8001184:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001188:	200001bc 	.word	0x200001bc

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f92b 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fe84 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f943 	bl	800147e <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f90b 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000014 	.word	0x20000014
 800122c:	2000001c 	.word	0x2000001c
 8001230:	20000018 	.word	0x20000018

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000001c 	.word	0x2000001c
 8001258:	200001b8 	.word	0x200001b8

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200001b8 	.word	0x200001b8

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <__NVIC_EnableIRQ+0x38>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff29 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff3e 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff31 	bl	80012d8 <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff feda 	bl	800125c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e099      	b.n	80015e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d4:	e00f      	b.n	80014f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d6:	f7ff fec1 	bl	800125c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d908      	bls.n	80014f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2220      	movs	r2, #32
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e078      	b.n	80015e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1e8      	bne.n	80014d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <HAL_DMA_Init+0x158>)
 8001510:	4013      	ands	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4313      	orrs	r3, r2
 8001546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	2b04      	cmp	r3, #4
 800154e:	d107      	bne.n	8001560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	4313      	orrs	r3, r2
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f023 0307 	bic.w	r3, r3, #7
 8001576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	2b04      	cmp	r3, #4
 8001588:	d117      	bne.n	80015ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4313      	orrs	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00e      	beq.n	80015ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fb01 	bl	8001ba4 <DMA_CheckFifoParam>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2240      	movs	r2, #64	; 0x40
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015b6:	2301      	movs	r3, #1
 80015b8:	e016      	b.n	80015e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fab8 	bl	8001b38 <DMA_CalcBaseAndBitshift>
 80015c8:	4603      	mov	r3, r0
 80015ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	223f      	movs	r2, #63	; 0x3f
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	f010803f 	.word	0xf010803f

080015f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_DMA_Start_IT+0x26>
 8001616:	2302      	movs	r3, #2
 8001618:	e040      	b.n	800169c <HAL_DMA_Start_IT+0xa8>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d12f      	bne.n	800168e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2202      	movs	r2, #2
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 fa4a 	bl	8001adc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	223f      	movs	r2, #63	; 0x3f
 800164e:	409a      	lsls	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0216 	orr.w	r2, r2, #22
 8001662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0208 	orr.w	r2, r2, #8
 800167a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e005      	b.n	800169a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001696:	2302      	movs	r3, #2
 8001698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800169a:	7dfb      	ldrb	r3, [r7, #23]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016b2:	f7ff fdd3 	bl	800125c <HAL_GetTick>
 80016b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d008      	beq.n	80016d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e052      	b.n	800177c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0216 	bic.w	r2, r2, #22
 80016e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <HAL_DMA_Abort+0x62>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0208 	bic.w	r2, r2, #8
 8001714:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001726:	e013      	b.n	8001750 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001728:	f7ff fd98 	bl	800125c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b05      	cmp	r3, #5
 8001734:	d90c      	bls.n	8001750 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2220      	movs	r2, #32
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2203      	movs	r2, #3
 8001740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e015      	b.n	800177c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1e4      	bne.n	8001728 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	223f      	movs	r2, #63	; 0x3f
 8001764:	409a      	lsls	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d004      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00c      	b.n	80017bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2205      	movs	r2, #5
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017d4:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <HAL_DMA_IRQHandler+0x258>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a92      	ldr	r2, [pc, #584]	; (8001a24 <HAL_DMA_IRQHandler+0x25c>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0a9b      	lsrs	r3, r3, #10
 80017e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2208      	movs	r2, #8
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01a      	beq.n	8001834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0204 	bic.w	r2, r2, #4
 800181a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	2208      	movs	r2, #8
 8001822:	409a      	lsls	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	2201      	movs	r2, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d012      	beq.n	800186a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2201      	movs	r2, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	f043 0202 	orr.w	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	2204      	movs	r2, #4
 8001870:	409a      	lsls	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d012      	beq.n	80018a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	2204      	movs	r2, #4
 800188e:	409a      	lsls	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001898:	f043 0204 	orr.w	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	2210      	movs	r2, #16
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d043      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03c      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	2210      	movs	r2, #16
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d018      	beq.n	800190a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d108      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d024      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
 80018f6:	e01f      	b.n	8001938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
 8001908:	e016      	b.n	8001938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d107      	bne.n	8001928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0208 	bic.w	r2, r2, #8
 8001926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2220      	movs	r2, #32
 800193e:	409a      	lsls	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 808e 	beq.w	8001a66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8086 	beq.w	8001a66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	2220      	movs	r2, #32
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b05      	cmp	r3, #5
 8001970:	d136      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0216 	bic.w	r2, r2, #22
 8001980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x1da>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0208 	bic.w	r2, r2, #8
 80019b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	223f      	movs	r2, #63	; 0x3f
 80019b8:	409a      	lsls	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d07d      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
        }
        return;
 80019de:	e078      	b.n	8001ad2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01c      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d108      	bne.n	8001a0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d030      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
 8001a0c:	e02b      	b.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
 8001a1e:	e022      	b.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
 8001a20:	20000014 	.word	0x20000014
 8001a24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0210 	bic.w	r2, r2, #16
 8001a44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d032      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d022      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2205      	movs	r2, #5
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d307      	bcc.n	8001aae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f2      	bne.n	8001a92 <HAL_DMA_IRQHandler+0x2ca>
 8001aac:	e000      	b.n	8001ab0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001aae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ad2:	bf00      	nop
    }
  }
}
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop

08001adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001af8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d108      	bne.n	8001b1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b1a:	e007      	b.n	8001b2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3b10      	subs	r3, #16
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <DMA_CalcBaseAndBitshift+0x64>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d909      	bls.n	8001b7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b6e:	f023 0303 	bic.w	r3, r3, #3
 8001b72:	1d1a      	adds	r2, r3, #4
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	659a      	str	r2, [r3, #88]	; 0x58
 8001b78:	e007      	b.n	8001b8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b82:	f023 0303 	bic.w	r3, r3, #3
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ba0:	08003c6c 	.word	0x08003c6c

08001ba4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11f      	bne.n	8001bfe <DMA_CheckFifoParam+0x5a>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d856      	bhi.n	8001c72 <DMA_CheckFifoParam+0xce>
 8001bc4:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <DMA_CheckFifoParam+0x28>)
 8001bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bca:	bf00      	nop
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001bef 	.word	0x08001bef
 8001bd4:	08001bdd 	.word	0x08001bdd
 8001bd8:	08001c73 	.word	0x08001c73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d046      	beq.n	8001c76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bec:	e043      	b.n	8001c76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bf6:	d140      	bne.n	8001c7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfc:	e03d      	b.n	8001c7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c06:	d121      	bne.n	8001c4c <DMA_CheckFifoParam+0xa8>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d837      	bhi.n	8001c7e <DMA_CheckFifoParam+0xda>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <DMA_CheckFifoParam+0x70>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c25 	.word	0x08001c25
 8001c18:	08001c2b 	.word	0x08001c2b
 8001c1c:	08001c25 	.word	0x08001c25
 8001c20:	08001c3d 	.word	0x08001c3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      break;
 8001c28:	e030      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d025      	beq.n	8001c82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3a:	e022      	b.n	8001c82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c44:	d11f      	bne.n	8001c86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c4a:	e01c      	b.n	8001c86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d903      	bls.n	8001c5a <DMA_CheckFifoParam+0xb6>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d003      	beq.n	8001c60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c58:	e018      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c5e:	e015      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00e      	beq.n	8001c8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c70:	e00b      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      break;
 8001c72:	bf00      	nop
 8001c74:	e00a      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
      break;
 8001c76:	bf00      	nop
 8001c78:	e008      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
      break;
 8001c7a:	bf00      	nop
 8001c7c:	e006      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
      break;
 8001c7e:	bf00      	nop
 8001c80:	e004      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
      break;
 8001c82:	bf00      	nop
 8001c84:	e002      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c86:	bf00      	nop
 8001c88:	e000      	b.n	8001c8c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e159      	b.n	8001f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8148 	bne.w	8001f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d005      	beq.n	8001cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d017      	beq.n	8001d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d123      	bne.n	8001de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a2 	beq.w	8001f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a56      	ldr	r2, [pc, #344]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b54      	ldr	r3, [pc, #336]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_GPIO_Init+0x2ec>)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a49      	ldr	r2, [pc, #292]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x202>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a48      	ldr	r2, [pc, #288]	; (8001f90 <HAL_GPIO_Init+0x2f4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x1fe>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a47      	ldr	r2, [pc, #284]	; (8001f94 <HAL_GPIO_Init+0x2f8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x1fa>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a46      	ldr	r2, [pc, #280]	; (8001f98 <HAL_GPIO_Init+0x2fc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x1f6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a45      	ldr	r2, [pc, #276]	; (8001f9c <HAL_GPIO_Init+0x300>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x1f2>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb0:	4935      	ldr	r1, [pc, #212]	; (8001f88 <HAL_GPIO_Init+0x2ec>)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee2:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f12:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f36:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f60:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f67f aea2 	bls.w	8001cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e264      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d075      	beq.n	80020e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff6:	4ba3      	ldr	r3, [pc, #652]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d00c      	beq.n	800201c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002002:	4ba0      	ldr	r3, [pc, #640]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200a:	2b08      	cmp	r3, #8
 800200c:	d112      	bne.n	8002034 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4b9d      	ldr	r3, [pc, #628]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201a:	d10b      	bne.n	8002034 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	4b99      	ldr	r3, [pc, #612]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d05b      	beq.n	80020e0 <HAL_RCC_OscConfig+0x108>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d157      	bne.n	80020e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e23f      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x74>
 800203e:	4b91      	ldr	r3, [pc, #580]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a90      	ldr	r2, [pc, #576]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e01d      	b.n	8002088 <HAL_RCC_OscConfig+0xb0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x98>
 8002056:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a8a      	ldr	r2, [pc, #552]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b88      	ldr	r3, [pc, #544]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a87      	ldr	r2, [pc, #540]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0xb0>
 8002070:	4b84      	ldr	r3, [pc, #528]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a83      	ldr	r2, [pc, #524]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b81      	ldr	r3, [pc, #516]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a80      	ldr	r2, [pc, #512]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff f8e4 	bl	800125c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff f8e0 	bl	800125c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e204      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0xc0>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8d0 	bl	800125c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff f8cc 	bl	800125c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1f0      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	4b6c      	ldr	r3, [pc, #432]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0xe8>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d063      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ee:	4b65      	ldr	r3, [pc, #404]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fa:	4b62      	ldr	r3, [pc, #392]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002102:	2b08      	cmp	r3, #8
 8002104:	d11c      	bne.n	8002140 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002106:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d116      	bne.n	8002140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_RCC_OscConfig+0x152>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e1c4      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4b56      	ldr	r3, [pc, #344]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4952      	ldr	r1, [pc, #328]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	e03a      	b.n	80021b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002148:	4b4f      	ldr	r3, [pc, #316]	; (8002288 <HAL_RCC_OscConfig+0x2b0>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7ff f885 	bl	800125c <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002156:	f7ff f881 	bl	800125c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1a5      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	4b46      	ldr	r3, [pc, #280]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4940      	ldr	r1, [pc, #256]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
 8002188:	e015      	b.n	80021b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218a:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCC_OscConfig+0x2b0>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff f864 	bl	800125c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002198:	f7ff f860 	bl	800125c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e184      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d030      	beq.n	8002224 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d016      	beq.n	80021f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	4b30      	ldr	r3, [pc, #192]	; (800228c <HAL_RCC_OscConfig+0x2b4>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7ff f844 	bl	800125c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d8:	f7ff f840 	bl	800125c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e164      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x200>
 80021f6:	e015      	b.n	8002224 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x2b4>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7ff f82d 	bl	800125c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002206:	f7ff f829 	bl	800125c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e14d      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 800221a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80a0 	beq.w	8002372 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10f      	bne.n	8002262 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_OscConfig+0x2b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d121      	bne.n	80022b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_RCC_OscConfig+0x2b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a07      	ldr	r2, [pc, #28]	; (8002290 <HAL_RCC_OscConfig+0x2b8>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7fe ffef 	bl	800125c <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	e011      	b.n	80022a6 <HAL_RCC_OscConfig+0x2ce>
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	42470000 	.word	0x42470000
 800228c:	42470e80 	.word	0x42470e80
 8002290:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002294:	f7fe ffe2 	bl	800125c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e106      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b85      	ldr	r3, [pc, #532]	; (80024bc <HAL_RCC_OscConfig+0x4e4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2f0>
 80022ba:	4b81      	ldr	r3, [pc, #516]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	4a80      	ldr	r2, [pc, #512]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6713      	str	r3, [r2, #112]	; 0x70
 80022c6:	e01c      	b.n	8002302 <HAL_RCC_OscConfig+0x32a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x312>
 80022d0:	4b7b      	ldr	r3, [pc, #492]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a7a      	ldr	r2, [pc, #488]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
 80022dc:	4b78      	ldr	r3, [pc, #480]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a77      	ldr	r2, [pc, #476]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	e00b      	b.n	8002302 <HAL_RCC_OscConfig+0x32a>
 80022ea:	4b75      	ldr	r3, [pc, #468]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	4a74      	ldr	r2, [pc, #464]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6713      	str	r3, [r2, #112]	; 0x70
 80022f6:	4b72      	ldr	r3, [pc, #456]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	4a71      	ldr	r2, [pc, #452]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d015      	beq.n	8002336 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7fe ffa7 	bl	800125c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe ffa3 	bl	800125c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0c5      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ee      	beq.n	8002312 <HAL_RCC_OscConfig+0x33a>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7fe ff91 	bl	800125c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe ff8d 	bl	800125c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0af      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	4b5a      	ldr	r3, [pc, #360]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ee      	bne.n	800233e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a55      	ldr	r2, [pc, #340]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 809b 	beq.w	80024b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d05c      	beq.n	8002442 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d141      	bne.n	8002414 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCC_OscConfig+0x4ec>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe ff61 	bl	800125c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe ff5d 	bl	800125c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e081      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	019b      	lsls	r3, r3, #6
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	4937      	ldr	r1, [pc, #220]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_RCC_OscConfig+0x4ec>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ff36 	bl	800125c <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe ff32 	bl	800125c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e056      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x41c>
 8002412:	e04e      	b.n	80024b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x4ec>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7fe ff1f 	bl	800125c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe ff1b 	bl	800125c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e03f      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x44a>
 8002440:	e037      	b.n	80024b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e032      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_RCC_OscConfig+0x4e8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d028      	beq.n	80024ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d121      	bne.n	80024ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d11a      	bne.n	80024ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800247e:	4013      	ands	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002484:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002486:	4293      	cmp	r3, r2
 8002488:	d111      	bne.n	80024ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d107      	bne.n	80024ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40007000 	.word	0x40007000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	42470060 	.word	0x42470060

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0cc      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d90c      	bls.n	8002504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0b8      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002534:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002540:	4b50      	ldr	r3, [pc, #320]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	494d      	ldr	r1, [pc, #308]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d044      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d119      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e07f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002582:	2b03      	cmp	r3, #3
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e067      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4934      	ldr	r1, [pc, #208]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fe50 	bl	800125c <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fe4c 	bl	800125c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e04f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d20c      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e032      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4916      	ldr	r1, [pc, #88]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264e:	f000 f821 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 8002652:	4602      	mov	r2, r0
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	490a      	ldr	r1, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	5ccb      	ldrb	r3, [r1, r3]
 8002662:	fa22 f303 	lsr.w	r3, r2, r3
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fdb0 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00
 8002684:	40023800 	.word	0x40023800
 8002688:	08003c54 	.word	0x08003c54
 800268c:	20000014 	.word	0x20000014
 8002690:	20000018 	.word	0x20000018

08002694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002694:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	2300      	movs	r3, #0
 80026a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ac:	4b67      	ldr	r3, [pc, #412]	; (800284c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d00d      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x40>
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	f200 80bd 	bhi.w	8002838 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x34>
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x3a>
 80026c6:	e0b7      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026ca:	60bb      	str	r3, [r7, #8]
       break;
 80026cc:	e0b7      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ce:	4b61      	ldr	r3, [pc, #388]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026d0:	60bb      	str	r3, [r7, #8]
      break;
 80026d2:	e0b4      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d4:	4b5d      	ldr	r3, [pc, #372]	; (800284c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026de:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d04d      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ea:	4b58      	ldr	r3, [pc, #352]	; (800284c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	099b      	lsrs	r3, r3, #6
 80026f0:	461a      	mov	r2, r3
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	ea02 0800 	and.w	r8, r2, r0
 8002702:	ea03 0901 	and.w	r9, r3, r1
 8002706:	4640      	mov	r0, r8
 8002708:	4649      	mov	r1, r9
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	014b      	lsls	r3, r1, #5
 8002714:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002718:	0142      	lsls	r2, r0, #5
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	ebb0 0008 	subs.w	r0, r0, r8
 8002722:	eb61 0109 	sbc.w	r1, r1, r9
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	018b      	lsls	r3, r1, #6
 8002730:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002734:	0182      	lsls	r2, r0, #6
 8002736:	1a12      	subs	r2, r2, r0
 8002738:	eb63 0301 	sbc.w	r3, r3, r1
 800273c:	f04f 0000 	mov.w	r0, #0
 8002740:	f04f 0100 	mov.w	r1, #0
 8002744:	00d9      	lsls	r1, r3, #3
 8002746:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800274a:	00d0      	lsls	r0, r2, #3
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	eb12 0208 	adds.w	r2, r2, r8
 8002754:	eb43 0309 	adc.w	r3, r3, r9
 8002758:	f04f 0000 	mov.w	r0, #0
 800275c:	f04f 0100 	mov.w	r1, #0
 8002760:	0259      	lsls	r1, r3, #9
 8002762:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002766:	0250      	lsls	r0, r2, #9
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	461a      	mov	r2, r3
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	f7fd fd2e 	bl	80001d8 <__aeabi_uldivmod>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4613      	mov	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e04a      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	461a      	mov	r2, r3
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	ea02 0400 	and.w	r4, r2, r0
 800279e:	ea03 0501 	and.w	r5, r3, r1
 80027a2:	4620      	mov	r0, r4
 80027a4:	4629      	mov	r1, r5
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	014b      	lsls	r3, r1, #5
 80027b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b4:	0142      	lsls	r2, r0, #5
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	1b00      	subs	r0, r0, r4
 80027bc:	eb61 0105 	sbc.w	r1, r1, r5
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	018b      	lsls	r3, r1, #6
 80027ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027ce:	0182      	lsls	r2, r0, #6
 80027d0:	1a12      	subs	r2, r2, r0
 80027d2:	eb63 0301 	sbc.w	r3, r3, r1
 80027d6:	f04f 0000 	mov.w	r0, #0
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	00d9      	lsls	r1, r3, #3
 80027e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e4:	00d0      	lsls	r0, r2, #3
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	1912      	adds	r2, r2, r4
 80027ec:	eb45 0303 	adc.w	r3, r5, r3
 80027f0:	f04f 0000 	mov.w	r0, #0
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	0299      	lsls	r1, r3, #10
 80027fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027fe:	0290      	lsls	r0, r2, #10
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	f7fd fce2 	bl	80001d8 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	60bb      	str	r3, [r7, #8]
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800283a:	60bb      	str	r3, [r7, #8]
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	68bb      	ldr	r3, [r7, #8]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000014 	.word	0x20000014

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002874:	f7ff fff0 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	08003c64 	.word	0x08003c64

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800289c:	f7ff ffdc 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0b5b      	lsrs	r3, r3, #13
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08003c64 	.word	0x08003c64

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e03f      	b.n	8002952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fb1a 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 ff97 	bl	8003838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b08a      	sub	sp, #40	; 0x28
 800295e:	af02      	add	r7, sp, #8
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	d17c      	bne.n	8002a74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_UART_Transmit+0x2c>
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e075      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_UART_Transmit+0x3e>
 8002994:	2302      	movs	r3, #2
 8002996:	e06e      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2221      	movs	r2, #33	; 0x21
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ae:	f7fe fc55 	bl	800125c <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d108      	bne.n	80029dc <HAL_UART_Transmit+0x82>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e003      	b.n	80029e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029ec:	e02a      	b.n	8002a44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fc53 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e036      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3302      	adds	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	e007      	b.n	8002a36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	3301      	adds	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1cf      	bne.n	80029ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fc23 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e006      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
  }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08c      	sub	sp, #48	; 0x30
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d152      	bne.n	8002b3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e04b      	b.n	8002b40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e044      	b.n	8002b40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fc58 	bl	8003380 <UART_Start_Receive_DMA>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d12c      	bne.n	8002b38 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d125      	bne.n	8002b32 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f043 0310 	orr.w	r3, r3, #16
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b1e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	e841 2300 	strex	r3, r2, [r1]
 8002b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e5      	bne.n	8002afc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002b30:	e002      	b.n	8002b38 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b3c:	e000      	b.n	8002b40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3730      	adds	r7, #48	; 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b0ba      	sub	sp, #232	; 0xe8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_UART_IRQHandler+0x66>
 8002b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fd8b 	bl	80036c2 <UART_Receive_IT>
      return;
 8002bac:	e256      	b.n	800305c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80de 	beq.w	8002d74 <HAL_UART_IRQHandler+0x22c>
 8002bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80d1 	beq.w	8002d74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_UART_IRQHandler+0xae>
 8002bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_UART_IRQHandler+0xd2>
 8002c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f043 0202 	orr.w	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_UART_IRQHandler+0xf6>
 8002c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0204 	orr.w	r2, r3, #4
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d011      	beq.n	8002c6e <HAL_UART_IRQHandler+0x126>
 8002c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d105      	bne.n	8002c62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f043 0208 	orr.w	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 81ed 	beq.w	8003052 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_UART_IRQHandler+0x14e>
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fd16 	bl	80036c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x17a>
 8002cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04f      	beq.n	8002d62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fc1e 	bl	8003504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d141      	bne.n	8002d5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3314      	adds	r3, #20
 8002cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1d9      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d013      	beq.n	8002d52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	4a7d      	ldr	r2, [pc, #500]	; (8002f24 <HAL_UART_IRQHandler+0x3dc>)
 8002d30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fd24 	bl	8001784 <HAL_DMA_Abort_IT>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	e00e      	b.n	8002d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f9a4 	bl	80030a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	e00a      	b.n	8002d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f9a0 	bl	80030a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	e006      	b.n	8002d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f99c 	bl	80030a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d6e:	e170      	b.n	8003052 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	bf00      	nop
    return;
 8002d72:	e16e      	b.n	8003052 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f040 814a 	bne.w	8003012 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8143 	beq.w	8003012 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 813c 	beq.w	8003012 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	f040 80b4 	bne.w	8002f28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8140 	beq.w	8003056 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dde:	429a      	cmp	r2, r3
 8002de0:	f080 8139 	bcs.w	8003056 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df6:	f000 8088 	beq.w	8002f0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1d9      	bne.n	8002dfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3314      	adds	r3, #20
 8002e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e1      	bne.n	8002e46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3314      	adds	r3, #20
 8002e88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3314      	adds	r3, #20
 8002ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ea6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ea8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002eac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e3      	bne.n	8002e82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eda:	f023 0310 	bic.w	r3, r3, #16
 8002ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002eec:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e3      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fbcd 	bl	80016a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fad8 	bl	80004d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f20:	e099      	b.n	8003056 <HAL_UART_IRQHandler+0x50e>
 8002f22:	bf00      	nop
 8002f24:	080035cb 	.word	0x080035cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 808b 	beq.w	800305a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8086 	beq.w	800305a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f72:	647a      	str	r2, [r7, #68]	; 0x44
 8002f74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e3      	bne.n	8002f4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	623b      	str	r3, [r7, #32]
   return(result);
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002faa:	633a      	str	r2, [r7, #48]	; 0x30
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb2:	e841 2300 	strex	r3, r2, [r1]
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e3      	bne.n	8002f86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0310 	bic.w	r3, r3, #16
 8002fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ff0:	61fa      	str	r2, [r7, #28]
 8002ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	69b9      	ldr	r1, [r7, #24]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e3      	bne.n	8002fcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fa60 	bl	80004d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003010:	e023      	b.n	800305a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_UART_IRQHandler+0x4ea>
 800301e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fae1 	bl	80035f2 <UART_Transmit_IT>
    return;
 8003030:	e014      	b.n	800305c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <HAL_UART_IRQHandler+0x514>
 800303e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fb21 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8003050:	e004      	b.n	800305c <HAL_UART_IRQHandler+0x514>
    return;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <HAL_UART_IRQHandler+0x514>
      return;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <HAL_UART_IRQHandler+0x514>
      return;
 800305a:	bf00      	nop
  }
}
 800305c:	37e8      	adds	r7, #232	; 0xe8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop

08003064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b09c      	sub	sp, #112	; 0x70
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d172      	bne.n	80031b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80030d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d2:	2200      	movs	r2, #0
 80030d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80030f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e5      	bne.n	80030d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3314      	adds	r3, #20
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800311a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	667b      	str	r3, [r7, #100]	; 0x64
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3314      	adds	r3, #20
 8003128:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800312a:	647a      	str	r2, [r7, #68]	; 0x44
 800312c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e5      	bne.n	800310a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	623b      	str	r3, [r7, #32]
   return(result);
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003154:	663b      	str	r3, [r7, #96]	; 0x60
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800315e:	633a      	str	r2, [r7, #48]	; 0x30
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e5      	bne.n	800313e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	2b01      	cmp	r3, #1
 8003180:	d119      	bne.n	80031b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	330c      	adds	r3, #12
 8003188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	60fb      	str	r3, [r7, #12]
   return(result);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f023 0310 	bic.w	r3, r3, #16
 8003198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031a2:	61fa      	str	r2, [r7, #28]
 80031a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	69b9      	ldr	r1, [r7, #24]
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	617b      	str	r3, [r7, #20]
   return(result);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e5      	bne.n	8003182 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d106      	bne.n	80031cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031c2:	4619      	mov	r1, r3
 80031c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031c6:	f7fd f983 	bl	80004d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031ca:	e002      	b.n	80031d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80031cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031ce:	f7ff ff53 	bl	8003078 <HAL_UART_RxCpltCallback>
}
 80031d2:	bf00      	nop
 80031d4:	3770      	adds	r7, #112	; 0x70
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d108      	bne.n	8003202 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4619      	mov	r1, r3
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7fd f968 	bl	80004d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003200:	e002      	b.n	8003208 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff ff42 	bl	800308c <HAL_UART_RxHalfCpltCallback>
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b21      	cmp	r3, #33	; 0x21
 8003242:	d108      	bne.n	8003256 <UART_DMAError+0x46>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003250:	68b8      	ldr	r0, [r7, #8]
 8003252:	f000 f92f 	bl	80034b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b22      	cmp	r3, #34	; 0x22
 8003276:	d108      	bne.n	800328a <UART_DMAError+0x7a>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003284:	68b8      	ldr	r0, [r7, #8]
 8003286:	f000 f93d 	bl	8003504 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	f7ff ff02 	bl	80030a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b090      	sub	sp, #64	; 0x40
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b4:	e050      	b.n	8003358 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d04c      	beq.n	8003358 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c4:	f7fd ffca 	bl	800125c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d241      	bcs.n	8003358 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032f4:	637a      	str	r2, [r7, #52]	; 0x34
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3314      	adds	r3, #20
 800330e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	613b      	str	r3, [r7, #16]
   return(result);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3314      	adds	r3, #20
 8003326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003328:	623a      	str	r2, [r7, #32]
 800332a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	69f9      	ldr	r1, [r7, #28]
 800332e:	6a3a      	ldr	r2, [r7, #32]
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	61bb      	str	r3, [r7, #24]
   return(result);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e5      	bne.n	8003308 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e00f      	b.n	8003378 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	429a      	cmp	r2, r3
 8003374:	d09f      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3740      	adds	r7, #64	; 0x40
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b098      	sub	sp, #96	; 0x60
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2222      	movs	r2, #34	; 0x22
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	4a3e      	ldr	r2, [pc, #248]	; (80034a8 <UART_Start_Receive_DMA+0x128>)
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <UART_Start_Receive_DMA+0x12c>)
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	4a3c      	ldr	r2, [pc, #240]	; (80034b0 <UART_Start_Receive_DMA+0x130>)
 80033be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	2200      	movs	r2, #0
 80033c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80033c8:	f107 0308 	add.w	r3, r7, #8
 80033cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	f7fe f908 	bl	80015f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003418:	65bb      	str	r3, [r7, #88]	; 0x58
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003422:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e5      	bne.n	8003402 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3314      	adds	r3, #20
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	657b      	str	r3, [r7, #84]	; 0x54
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3314      	adds	r3, #20
 8003454:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003456:	63ba      	str	r2, [r7, #56]	; 0x38
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800345c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e5      	bne.n	8003436 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3314      	adds	r3, #20
 8003470:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	617b      	str	r3, [r7, #20]
   return(result);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003480:	653b      	str	r3, [r7, #80]	; 0x50
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3314      	adds	r3, #20
 8003488:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800348a:	627a      	str	r2, [r7, #36]	; 0x24
 800348c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6a39      	ldr	r1, [r7, #32]
 8003490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	61fb      	str	r3, [r7, #28]
   return(result);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e5      	bne.n	800346a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3760      	adds	r7, #96	; 0x60
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	080030b5 	.word	0x080030b5
 80034ac:	080031db 	.word	0x080031db
 80034b0:	08003211 	.word	0x08003211

080034b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	61ba      	str	r2, [r7, #24]
 80034de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6979      	ldr	r1, [r7, #20]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	613b      	str	r3, [r7, #16]
   return(result);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e5      	bne.n	80034bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80034f8:	bf00      	nop
 80034fa:	3724      	adds	r7, #36	; 0x24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003504:	b480      	push	{r7}
 8003506:	b095      	sub	sp, #84	; 0x54
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800352c:	643a      	str	r2, [r7, #64]	; 0x40
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	64bb      	str	r3, [r7, #72]	; 0x48
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3314      	adds	r3, #20
 800355e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e5      	bne.n	8003540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	2b01      	cmp	r3, #1
 800357a:	d119      	bne.n	80035b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	60bb      	str	r3, [r7, #8]
   return(result);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	647b      	str	r3, [r7, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800359c:	61ba      	str	r2, [r7, #24]
 800359e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6979      	ldr	r1, [r7, #20]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	613b      	str	r3, [r7, #16]
   return(result);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e5      	bne.n	800357c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035be:	bf00      	nop
 80035c0:	3754      	adds	r7, #84	; 0x54
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fd5b 	bl	80030a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b21      	cmp	r3, #33	; 0x21
 8003604:	d13e      	bne.n	8003684 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d114      	bne.n	800363a <UART_Transmit_IT+0x48>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d110      	bne.n	800363a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	1c9a      	adds	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]
 8003638:	e008      	b.n	800364c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	1c59      	adds	r1, r3, #1
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6211      	str	r1, [r2, #32]
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29b      	uxth	r3, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4619      	mov	r1, r3
 800365a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10f      	bne.n	8003680 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800367e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fcd6 	bl	8003064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b08c      	sub	sp, #48	; 0x30
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b22      	cmp	r3, #34	; 0x22
 80036d4:	f040 80ab 	bne.w	800382e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e0:	d117      	bne.n	8003712 <UART_Receive_IT+0x50>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d113      	bne.n	8003712 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003700:	b29a      	uxth	r2, r3
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
 8003710:	e026      	b.n	8003760 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	d007      	beq.n	8003736 <UART_Receive_IT+0x74>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <UART_Receive_IT+0x82>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e008      	b.n	8003756 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003750:	b2da      	uxtb	r2, r3
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29b      	uxth	r3, r3
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4619      	mov	r1, r3
 800376e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003770:	2b00      	cmp	r3, #0
 8003772:	d15a      	bne.n	800382a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0220 	bic.w	r2, r2, #32
 8003782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d135      	bne.n	8003820 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f023 0310 	bic.w	r3, r3, #16
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037da:	623a      	str	r2, [r7, #32]
 80037dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	69f9      	ldr	r1, [r7, #28]
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d10a      	bne.n	8003812 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fc fe59 	bl	80004d0 <HAL_UARTEx_RxEventCallback>
 800381e:	e002      	b.n	8003826 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fc29 	bl	8003078 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e002      	b.n	8003830 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3730      	adds	r7, #48	; 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383c:	b09f      	sub	sp, #124	; 0x7c
 800383e:	af00      	add	r7, sp, #0
 8003840:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800384c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384e:	68d9      	ldr	r1, [r3, #12]
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	ea40 0301 	orr.w	r3, r0, r1
 8003858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800385a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	431a      	orrs	r2, r3
 8003864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	431a      	orrs	r2, r3
 800386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4313      	orrs	r3, r2
 8003870:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800387c:	f021 010c 	bic.w	r1, r1, #12
 8003880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003886:	430b      	orrs	r3, r1
 8003888:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	6999      	ldr	r1, [r3, #24]
 8003898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	ea40 0301 	orr.w	r3, r0, r1
 80038a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4bc5      	ldr	r3, [pc, #788]	; (8003bbc <UART_SetConfig+0x384>)
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d004      	beq.n	80038b6 <UART_SetConfig+0x7e>
 80038ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4bc3      	ldr	r3, [pc, #780]	; (8003bc0 <UART_SetConfig+0x388>)
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d103      	bne.n	80038be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038b6:	f7fe ffef 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 80038ba:	6778      	str	r0, [r7, #116]	; 0x74
 80038bc:	e002      	b.n	80038c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038be:	f7fe ffd7 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 80038c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038cc:	f040 80b6 	bne.w	8003a3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d2:	461c      	mov	r4, r3
 80038d4:	f04f 0500 	mov.w	r5, #0
 80038d8:	4622      	mov	r2, r4
 80038da:	462b      	mov	r3, r5
 80038dc:	1891      	adds	r1, r2, r2
 80038de:	6439      	str	r1, [r7, #64]	; 0x40
 80038e0:	415b      	adcs	r3, r3
 80038e2:	647b      	str	r3, [r7, #68]	; 0x44
 80038e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038e8:	1912      	adds	r2, r2, r4
 80038ea:	eb45 0303 	adc.w	r3, r5, r3
 80038ee:	f04f 0000 	mov.w	r0, #0
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	00d9      	lsls	r1, r3, #3
 80038f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038fc:	00d0      	lsls	r0, r2, #3
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	1911      	adds	r1, r2, r4
 8003904:	6639      	str	r1, [r7, #96]	; 0x60
 8003906:	416b      	adcs	r3, r5
 8003908:	667b      	str	r3, [r7, #100]	; 0x64
 800390a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	461a      	mov	r2, r3
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	1891      	adds	r1, r2, r2
 8003916:	63b9      	str	r1, [r7, #56]	; 0x38
 8003918:	415b      	adcs	r3, r3
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003920:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003924:	f7fc fc58 	bl	80001d8 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4ba5      	ldr	r3, [pc, #660]	; (8003bc4 <UART_SetConfig+0x38c>)
 800392e:	fba3 2302 	umull	r2, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	011e      	lsls	r6, r3, #4
 8003936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003938:	461c      	mov	r4, r3
 800393a:	f04f 0500 	mov.w	r5, #0
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	1891      	adds	r1, r2, r2
 8003944:	6339      	str	r1, [r7, #48]	; 0x30
 8003946:	415b      	adcs	r3, r3
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
 800394a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800394e:	1912      	adds	r2, r2, r4
 8003950:	eb45 0303 	adc.w	r3, r5, r3
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	00d9      	lsls	r1, r3, #3
 800395e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003962:	00d0      	lsls	r0, r2, #3
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	1911      	adds	r1, r2, r4
 800396a:	65b9      	str	r1, [r7, #88]	; 0x58
 800396c:	416b      	adcs	r3, r5
 800396e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	461a      	mov	r2, r3
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	1891      	adds	r1, r2, r2
 800397c:	62b9      	str	r1, [r7, #40]	; 0x28
 800397e:	415b      	adcs	r3, r3
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003986:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800398a:	f7fc fc25 	bl	80001d8 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4b8c      	ldr	r3, [pc, #560]	; (8003bc4 <UART_SetConfig+0x38c>)
 8003994:	fba3 1302 	umull	r1, r3, r3, r2
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	2164      	movs	r1, #100	; 0x64
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	3332      	adds	r3, #50	; 0x32
 80039a6:	4a87      	ldr	r2, [pc, #540]	; (8003bc4 <UART_SetConfig+0x38c>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b4:	441e      	add	r6, r3
 80039b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b8:	4618      	mov	r0, r3
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	1894      	adds	r4, r2, r2
 80039c4:	623c      	str	r4, [r7, #32]
 80039c6:	415b      	adcs	r3, r3
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ce:	1812      	adds	r2, r2, r0
 80039d0:	eb41 0303 	adc.w	r3, r1, r3
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	f04f 0500 	mov.w	r5, #0
 80039dc:	00dd      	lsls	r5, r3, #3
 80039de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039e2:	00d4      	lsls	r4, r2, #3
 80039e4:	4622      	mov	r2, r4
 80039e6:	462b      	mov	r3, r5
 80039e8:	1814      	adds	r4, r2, r0
 80039ea:	653c      	str	r4, [r7, #80]	; 0x50
 80039ec:	414b      	adcs	r3, r1
 80039ee:	657b      	str	r3, [r7, #84]	; 0x54
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	461a      	mov	r2, r3
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	1891      	adds	r1, r2, r2
 80039fc:	61b9      	str	r1, [r7, #24]
 80039fe:	415b      	adcs	r3, r3
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a0a:	f7fc fbe5 	bl	80001d8 <__aeabi_uldivmod>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4b6c      	ldr	r3, [pc, #432]	; (8003bc4 <UART_SetConfig+0x38c>)
 8003a14:	fba3 1302 	umull	r1, r3, r3, r2
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	2164      	movs	r1, #100	; 0x64
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	3332      	adds	r3, #50	; 0x32
 8003a26:	4a67      	ldr	r2, [pc, #412]	; (8003bc4 <UART_SetConfig+0x38c>)
 8003a28:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	f003 0207 	and.w	r2, r3, #7
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4432      	add	r2, r6
 8003a38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a3a:	e0b9      	b.n	8003bb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3e:	461c      	mov	r4, r3
 8003a40:	f04f 0500 	mov.w	r5, #0
 8003a44:	4622      	mov	r2, r4
 8003a46:	462b      	mov	r3, r5
 8003a48:	1891      	adds	r1, r2, r2
 8003a4a:	6139      	str	r1, [r7, #16]
 8003a4c:	415b      	adcs	r3, r3
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a54:	1912      	adds	r2, r2, r4
 8003a56:	eb45 0303 	adc.w	r3, r5, r3
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	00d9      	lsls	r1, r3, #3
 8003a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a68:	00d0      	lsls	r0, r2, #3
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	eb12 0804 	adds.w	r8, r2, r4
 8003a72:	eb43 0905 	adc.w	r9, r3, r5
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	008b      	lsls	r3, r1, #2
 8003a8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a8e:	0082      	lsls	r2, r0, #2
 8003a90:	4640      	mov	r0, r8
 8003a92:	4649      	mov	r1, r9
 8003a94:	f7fc fba0 	bl	80001d8 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <UART_SetConfig+0x38c>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	011e      	lsls	r6, r3, #4
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	1894      	adds	r4, r2, r2
 8003ab4:	60bc      	str	r4, [r7, #8]
 8003ab6:	415b      	adcs	r3, r3
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003abe:	1812      	adds	r2, r2, r0
 8003ac0:	eb41 0303 	adc.w	r3, r1, r3
 8003ac4:	f04f 0400 	mov.w	r4, #0
 8003ac8:	f04f 0500 	mov.w	r5, #0
 8003acc:	00dd      	lsls	r5, r3, #3
 8003ace:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ad2:	00d4      	lsls	r4, r2, #3
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	462b      	mov	r3, r5
 8003ad8:	1814      	adds	r4, r2, r0
 8003ada:	64bc      	str	r4, [r7, #72]	; 0x48
 8003adc:	414b      	adcs	r3, r1
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f04f 0100 	mov.w	r1, #0
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	008b      	lsls	r3, r1, #2
 8003af4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003af8:	0082      	lsls	r2, r0, #2
 8003afa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003afe:	f7fc fb6b 	bl	80001d8 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <UART_SetConfig+0x38c>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	3332      	adds	r3, #50	; 0x32
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <UART_SetConfig+0x38c>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b26:	441e      	add	r6, r3
 8003b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	1894      	adds	r4, r2, r2
 8003b36:	603c      	str	r4, [r7, #0]
 8003b38:	415b      	adcs	r3, r3
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b40:	1812      	adds	r2, r2, r0
 8003b42:	eb41 0303 	adc.w	r3, r1, r3
 8003b46:	f04f 0400 	mov.w	r4, #0
 8003b4a:	f04f 0500 	mov.w	r5, #0
 8003b4e:	00dd      	lsls	r5, r3, #3
 8003b50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b54:	00d4      	lsls	r4, r2, #3
 8003b56:	4622      	mov	r2, r4
 8003b58:	462b      	mov	r3, r5
 8003b5a:	eb12 0a00 	adds.w	sl, r2, r0
 8003b5e:	eb43 0b01 	adc.w	fp, r3, r1
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	008b      	lsls	r3, r1, #2
 8003b76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b7a:	0082      	lsls	r2, r0, #2
 8003b7c:	4650      	mov	r0, sl
 8003b7e:	4659      	mov	r1, fp
 8003b80:	f7fc fb2a 	bl	80001d8 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <UART_SetConfig+0x38c>)
 8003b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2164      	movs	r1, #100	; 0x64
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	3332      	adds	r3, #50	; 0x32
 8003b9c:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <UART_SetConfig+0x38c>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4432      	add	r2, r6
 8003bae:	609a      	str	r2, [r3, #8]
}
 8003bb0:	bf00      	nop
 8003bb2:	377c      	adds	r7, #124	; 0x7c
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	40011000 	.word	0x40011000
 8003bc0:	40011400 	.word	0x40011400
 8003bc4:	51eb851f 	.word	0x51eb851f

08003bc8 <__libc_init_array>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	4d0d      	ldr	r5, [pc, #52]	; (8003c00 <__libc_init_array+0x38>)
 8003bcc:	4c0d      	ldr	r4, [pc, #52]	; (8003c04 <__libc_init_array+0x3c>)
 8003bce:	1b64      	subs	r4, r4, r5
 8003bd0:	10a4      	asrs	r4, r4, #2
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	42a6      	cmp	r6, r4
 8003bd6:	d109      	bne.n	8003bec <__libc_init_array+0x24>
 8003bd8:	4d0b      	ldr	r5, [pc, #44]	; (8003c08 <__libc_init_array+0x40>)
 8003bda:	4c0c      	ldr	r4, [pc, #48]	; (8003c0c <__libc_init_array+0x44>)
 8003bdc:	f000 f82e 	bl	8003c3c <_init>
 8003be0:	1b64      	subs	r4, r4, r5
 8003be2:	10a4      	asrs	r4, r4, #2
 8003be4:	2600      	movs	r6, #0
 8003be6:	42a6      	cmp	r6, r4
 8003be8:	d105      	bne.n	8003bf6 <__libc_init_array+0x2e>
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf0:	4798      	blx	r3
 8003bf2:	3601      	adds	r6, #1
 8003bf4:	e7ee      	b.n	8003bd4 <__libc_init_array+0xc>
 8003bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfa:	4798      	blx	r3
 8003bfc:	3601      	adds	r6, #1
 8003bfe:	e7f2      	b.n	8003be6 <__libc_init_array+0x1e>
 8003c00:	08003c7c 	.word	0x08003c7c
 8003c04:	08003c7c 	.word	0x08003c7c
 8003c08:	08003c7c 	.word	0x08003c7c
 8003c0c:	08003c80 	.word	0x08003c80

08003c10 <memcpy>:
 8003c10:	440a      	add	r2, r1
 8003c12:	4291      	cmp	r1, r2
 8003c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c18:	d100      	bne.n	8003c1c <memcpy+0xc>
 8003c1a:	4770      	bx	lr
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c26:	4291      	cmp	r1, r2
 8003c28:	d1f9      	bne.n	8003c1e <memcpy+0xe>
 8003c2a:	bd10      	pop	{r4, pc}

08003c2c <memset>:
 8003c2c:	4402      	add	r2, r0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d100      	bne.n	8003c36 <memset+0xa>
 8003c34:	4770      	bx	lr
 8003c36:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3a:	e7f9      	b.n	8003c30 <memset+0x4>

08003c3c <_init>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr

08003c48 <_fini>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	bf00      	nop
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr
