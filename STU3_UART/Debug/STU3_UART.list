
STU3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003988  08003988  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003990  08003990  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000018  080039b0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080039b0  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009834  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163e  00000000  00000000  0002987c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0002aec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  0002b590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015632  00000000  00000000  0002bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a68  00000000  00000000  0004121a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d19  00000000  00000000  00049c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf99b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ad0  00000000  00000000  000cf9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003950 	.word	0x08003950

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08003950 	.word	0x08003950

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fe36 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f80a 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8c6 	bl	800066c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f89c 	bl	800061c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f86e 	bl	80005c4 <MX_USART2_UART_Init>
  while (1)
  {
	  /*Method 2 Interrupt Mode*/
	  //HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
	  /*Method 2 W/ 1 Char Received*/
	  UARTRecieveIT();
 80004e8:	f000 fc72 	bl	8000dd0 <UARTRecieveIT>
 80004ec:	e7fc      	b.n	80004e8 <main+0x18>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f003 fa1e 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a27      	ldr	r2, [pc, #156]	; (80005bc <SystemClock_Config+0xcc>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <SystemClock_Config+0xd0>)
 800053a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2310      	movs	r3, #16
 8000556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000560:	2310      	movs	r3, #16
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000564:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800056a:	2304      	movs	r3, #4
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800056e:	2304      	movs	r3, #4
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fd2c 	bl	8001fd4 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000582:	f000 fc77 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2102      	movs	r1, #2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 ff8e 	bl	80024c4 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ae:	f000 fc61 	bl	8000e74 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3750      	adds	r7, #80	; 0x50
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <MX_USART2_UART_Init+0x54>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005d0:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80005d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005dc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005ee:	220c      	movs	r2, #12
 80005f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_USART2_UART_Init+0x50>)
 8000600:	f002 f95c 	bl	80028bc <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800060a:	f000 fc33 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000134 	.word	0x20000134
 8000618:	40004400 	.word	0x40004400

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_DMA_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <MX_DMA_Init+0x4c>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <MX_DMA_Init+0x4c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	2010      	movs	r0, #16
 8000644:	f000 feef 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000648:	2010      	movs	r0, #16
 800064a:	f000 ff08 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2011      	movs	r0, #17
 8000654:	f000 fee7 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000658:	2011      	movs	r0, #17
 800065a:	f000 ff00 	bl	800145e <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a2c      	ldr	r2, [pc, #176]	; (800073c <MX_GPIO_Init+0xd0>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <MX_GPIO_Init+0xd0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a25      	ldr	r2, [pc, #148]	; (800073c <MX_GPIO_Init+0xd0>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_GPIO_Init+0xd0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1e      	ldr	r2, [pc, #120]	; (800073c <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2120      	movs	r1, #32
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_GPIO_Init+0xd4>)
 80006f8:	f001 fc52 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000702:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0xd8>)
 8000714:	f001 fac0 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000718:	2320      	movs	r3, #32
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0xd4>)
 8000730:	f001 fab2 	bl	8001c98 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000
 8000744:	40020800 	.word	0x40020800

08000748 <All_mode>:

/* USER CODE BEGIN 4 */
void All_mode()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	switch (chkM){
 800074c:	4b8b      	ldr	r3, [pc, #556]	; (800097c <All_mode+0x234>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d036      	beq.n	80007c2 <All_mode+0x7a>
 8000754:	2b02      	cmp	r3, #2
 8000756:	f300 8327 	bgt.w	8000da8 <All_mode+0x660>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <All_mode+0x1c>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d017      	beq.n	8000792 <All_mode+0x4a>
					}
					break;
			}
	}

}
 8000762:	e321      	b.n	8000da8 <All_mode+0x660>
			StartM = DataIn;
 8000764:	4b86      	ldr	r3, [pc, #536]	; (8000980 <All_mode+0x238>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b86      	ldr	r3, [pc, #536]	; (8000984 <All_mode+0x23c>)
 800076c:	701a      	strb	r2, [r3, #0]
			chkStart = DataIn >> 4;
 800076e:	4b84      	ldr	r3, [pc, #528]	; (8000980 <All_mode+0x238>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	111b      	asrs	r3, r3, #4
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b84      	ldr	r3, [pc, #528]	; (8000988 <All_mode+0x240>)
 8000778:	701a      	strb	r2, [r3, #0]
			if (chkStart == 9){
 800077a:	4b83      	ldr	r3, [pc, #524]	; (8000988 <All_mode+0x240>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b09      	cmp	r3, #9
 8000780:	d103      	bne.n	800078a <All_mode+0x42>
				chkM = 1;
 8000782:	4b7e      	ldr	r3, [pc, #504]	; (800097c <All_mode+0x234>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
			break;
 8000788:	e30e      	b.n	8000da8 <All_mode+0x660>
				chkM = 0;
 800078a:	4b7c      	ldr	r3, [pc, #496]	; (800097c <All_mode+0x234>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
			break;
 8000790:	e30a      	b.n	8000da8 <All_mode+0x660>
			NameM = (DataIn & 15);
 8000792:	4b7b      	ldr	r3, [pc, #492]	; (8000980 <All_mode+0x238>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b7b      	ldr	r3, [pc, #492]	; (800098c <All_mode+0x244>)
 80007a0:	701a      	strb	r2, [r3, #0]
			if (NameM >= 1 && NameM <= 14){
 80007a2:	4b7a      	ldr	r3, [pc, #488]	; (800098c <All_mode+0x244>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d007      	beq.n	80007ba <All_mode+0x72>
 80007aa:	4b78      	ldr	r3, [pc, #480]	; (800098c <All_mode+0x244>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b0e      	cmp	r3, #14
 80007b0:	d803      	bhi.n	80007ba <All_mode+0x72>
				chkM = 2;
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <All_mode+0x234>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	701a      	strb	r2, [r3, #0]
			break;
 80007b8:	e2f6      	b.n	8000da8 <All_mode+0x660>
				chkM = 0;
 80007ba:	4b70      	ldr	r3, [pc, #448]	; (800097c <All_mode+0x234>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
			break;
 80007c0:	e2f2      	b.n	8000da8 <All_mode+0x660>
			switch (NameM){
 80007c2:	4b72      	ldr	r3, [pc, #456]	; (800098c <All_mode+0x244>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	2b0d      	cmp	r3, #13
 80007ca:	f200 82ed 	bhi.w	8000da8 <All_mode+0x660>
 80007ce:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <All_mode+0x8c>)
 80007d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d4:	0800080d 	.word	0x0800080d
 80007d8:	08000883 	.word	0x08000883
 80007dc:	080008c5 	.word	0x080008c5
 80007e0:	08000907 	.word	0x08000907
 80007e4:	080009b5 	.word	0x080009b5
 80007e8:	08000a2b 	.word	0x08000a2b
 80007ec:	08000aa1 	.word	0x08000aa1
 80007f0:	08000b47 	.word	0x08000b47
 80007f4:	08000b9b 	.word	0x08000b9b
 80007f8:	08000bef 	.word	0x08000bef
 80007fc:	08000c79 	.word	0x08000c79
 8000800:	08000cb7 	.word	0x08000cb7
 8000804:	08000cf7 	.word	0x08000cf7
 8000808:	08000d37 	.word	0x08000d37
					if (dataFN == 2){
 800080c:	4b60      	ldr	r3, [pc, #384]	; (8000990 <All_mode+0x248>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d104      	bne.n	800081e <All_mode+0xd6>
						dataF1 = DataIn;
 8000814:	4b5a      	ldr	r3, [pc, #360]	; (8000980 <All_mode+0x238>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b5e      	ldr	r3, [pc, #376]	; (8000994 <All_mode+0x24c>)
 800081c:	701a      	strb	r2, [r3, #0]
					if(dataFN == 3){
 800081e:	4b5c      	ldr	r3, [pc, #368]	; (8000990 <All_mode+0x248>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d104      	bne.n	8000830 <All_mode+0xe8>
						dataF2 = DataIn;
 8000826:	4b56      	ldr	r3, [pc, #344]	; (8000980 <All_mode+0x238>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b5a      	ldr	r3, [pc, #360]	; (8000998 <All_mode+0x250>)
 800082e:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000830:	4b53      	ldr	r3, [pc, #332]	; (8000980 <All_mode+0x238>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b59      	ldr	r3, [pc, #356]	; (800099c <All_mode+0x254>)
 8000838:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800083a:	4b52      	ldr	r3, [pc, #328]	; (8000984 <All_mode+0x23c>)
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	4b55      	ldr	r3, [pc, #340]	; (8000994 <All_mode+0x24c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b54      	ldr	r3, [pc, #336]	; (8000998 <All_mode+0x250>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b53      	ldr	r3, [pc, #332]	; (80009a0 <All_mode+0x258>)
 8000854:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000856:	4b51      	ldr	r3, [pc, #324]	; (800099c <All_mode+0x254>)
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	4b51      	ldr	r3, [pc, #324]	; (80009a0 <All_mode+0x258>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	f040 8289 	bne.w	8000d76 <All_mode+0x62e>
						M_state = 1;
 8000864:	4b4f      	ldr	r3, [pc, #316]	; (80009a4 <All_mode+0x25c>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 800086a:	2202      	movs	r2, #2
 800086c:	494e      	ldr	r1, [pc, #312]	; (80009a8 <All_mode+0x260>)
 800086e:	484f      	ldr	r0, [pc, #316]	; (80009ac <All_mode+0x264>)
 8000870:	f002 f8a2 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000874:	4b41      	ldr	r3, [pc, #260]	; (800097c <All_mode+0x234>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800087a:	4b45      	ldr	r3, [pc, #276]	; (8000990 <All_mode+0x248>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
					break;
 8000880:	e279      	b.n	8000d76 <All_mode+0x62e>
					chksum = DataIn;
 8000882:	4b3f      	ldr	r3, [pc, #252]	; (8000980 <All_mode+0x238>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b44      	ldr	r3, [pc, #272]	; (800099c <All_mode+0x254>)
 800088a:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800088c:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <All_mode+0x23c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	43db      	mvns	r3, r3
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <All_mode+0x268>)
 8000896:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000898:	4b40      	ldr	r3, [pc, #256]	; (800099c <All_mode+0x254>)
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <All_mode+0x268>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	f040 826a 	bne.w	8000d7a <All_mode+0x632>
						M_state = 2;
 80008a6:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <All_mode+0x25c>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 80008ac:	2202      	movs	r2, #2
 80008ae:	493e      	ldr	r1, [pc, #248]	; (80009a8 <All_mode+0x260>)
 80008b0:	483e      	ldr	r0, [pc, #248]	; (80009ac <All_mode+0x264>)
 80008b2:	f002 f881 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <All_mode+0x234>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <All_mode+0x248>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
					break;
 80008c2:	e25a      	b.n	8000d7a <All_mode+0x632>
					chksum = DataIn;
 80008c4:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <All_mode+0x238>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <All_mode+0x254>)
 80008cc:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <All_mode+0x23c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	43db      	mvns	r3, r3
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <All_mode+0x268>)
 80008d8:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <All_mode+0x254>)
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <All_mode+0x268>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	f040 824b 	bne.w	8000d7e <All_mode+0x636>
						M_state = 3;
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <All_mode+0x25c>)
 80008ea:	2203      	movs	r2, #3
 80008ec:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 80008ee:	2202      	movs	r2, #2
 80008f0:	492d      	ldr	r1, [pc, #180]	; (80009a8 <All_mode+0x260>)
 80008f2:	482e      	ldr	r0, [pc, #184]	; (80009ac <All_mode+0x264>)
 80008f4:	f002 f860 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <All_mode+0x234>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <All_mode+0x248>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
					break;
 8000904:	e23b      	b.n	8000d7e <All_mode+0x636>
					if (dataFN == 2){
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <All_mode+0x248>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d104      	bne.n	8000918 <All_mode+0x1d0>
						dataF1 = DataIn;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <All_mode+0x238>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <All_mode+0x24c>)
 8000916:	701a      	strb	r2, [r3, #0]
					if(dataFN == 3){
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <All_mode+0x248>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d104      	bne.n	800092a <All_mode+0x1e2>
						dataF2 = DataIn;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <All_mode+0x238>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <All_mode+0x250>)
 8000928:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <All_mode+0x238>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <All_mode+0x254>)
 8000932:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <All_mode+0x23c>)
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <All_mode+0x24c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4413      	add	r3, r2
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <All_mode+0x250>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4413      	add	r3, r2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <All_mode+0x258>)
 800094e:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <All_mode+0x254>)
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <All_mode+0x258>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	f040 8212 	bne.w	8000d82 <All_mode+0x63a>
						M_state = 4;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <All_mode+0x25c>)
 8000960:	2204      	movs	r2, #4
 8000962:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000964:	2202      	movs	r2, #2
 8000966:	4910      	ldr	r1, [pc, #64]	; (80009a8 <All_mode+0x260>)
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <All_mode+0x264>)
 800096a:	f002 f825 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 800096e:	4b03      	ldr	r3, [pc, #12]	; (800097c <All_mode+0x234>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <All_mode+0x248>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
					break;
 800097a:	e202      	b.n	8000d82 <All_mode+0x63a>
 800097c:	20000055 	.word	0x20000055
 8000980:	200000c4 	.word	0x200000c4
 8000984:	200000c0 	.word	0x200000c0
 8000988:	2000005c 	.word	0x2000005c
 800098c:	200000c9 	.word	0x200000c9
 8000990:	20000056 	.word	0x20000056
 8000994:	2000012f 	.word	0x2000012f
 8000998:	20000178 	.word	0x20000178
 800099c:	20000132 	.word	0x20000132
 80009a0:	2000012d 	.word	0x2000012d
 80009a4:	20000054 	.word	0x20000054
 80009a8:	20000004 	.word	0x20000004
 80009ac:	20000134 	.word	0x20000134
 80009b0:	20000130 	.word	0x20000130
					if (dataFN == 2){
 80009b4:	4b9e      	ldr	r3, [pc, #632]	; (8000c30 <All_mode+0x4e8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d104      	bne.n	80009c6 <All_mode+0x27e>
						dataF1 = DataIn;
 80009bc:	4b9d      	ldr	r3, [pc, #628]	; (8000c34 <All_mode+0x4ec>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b9d      	ldr	r3, [pc, #628]	; (8000c38 <All_mode+0x4f0>)
 80009c4:	701a      	strb	r2, [r3, #0]
					if(dataFN == 3){
 80009c6:	4b9a      	ldr	r3, [pc, #616]	; (8000c30 <All_mode+0x4e8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d104      	bne.n	80009d8 <All_mode+0x290>
						dataF2 = DataIn;
 80009ce:	4b99      	ldr	r3, [pc, #612]	; (8000c34 <All_mode+0x4ec>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b99      	ldr	r3, [pc, #612]	; (8000c3c <All_mode+0x4f4>)
 80009d6:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 80009d8:	4b96      	ldr	r3, [pc, #600]	; (8000c34 <All_mode+0x4ec>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b98      	ldr	r3, [pc, #608]	; (8000c40 <All_mode+0x4f8>)
 80009e0:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80009e2:	4b98      	ldr	r3, [pc, #608]	; (8000c44 <All_mode+0x4fc>)
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b94      	ldr	r3, [pc, #592]	; (8000c38 <All_mode+0x4f0>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b93      	ldr	r3, [pc, #588]	; (8000c3c <All_mode+0x4f4>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b93      	ldr	r3, [pc, #588]	; (8000c48 <All_mode+0x500>)
 80009fc:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80009fe:	4b90      	ldr	r3, [pc, #576]	; (8000c40 <All_mode+0x4f8>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b91      	ldr	r3, [pc, #580]	; (8000c48 <All_mode+0x500>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	f040 81bd 	bne.w	8000d86 <All_mode+0x63e>
						M_state = 5;
 8000a0c:	4b8f      	ldr	r3, [pc, #572]	; (8000c4c <All_mode+0x504>)
 8000a0e:	2205      	movs	r2, #5
 8000a10:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000a12:	2202      	movs	r2, #2
 8000a14:	498e      	ldr	r1, [pc, #568]	; (8000c50 <All_mode+0x508>)
 8000a16:	488f      	ldr	r0, [pc, #572]	; (8000c54 <All_mode+0x50c>)
 8000a18:	f001 ffce 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000a1c:	4b8e      	ldr	r3, [pc, #568]	; (8000c58 <All_mode+0x510>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000a22:	4b83      	ldr	r3, [pc, #524]	; (8000c30 <All_mode+0x4e8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
					break;
 8000a28:	e1ad      	b.n	8000d86 <All_mode+0x63e>
					if (dataFN == 2){
 8000a2a:	4b81      	ldr	r3, [pc, #516]	; (8000c30 <All_mode+0x4e8>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d104      	bne.n	8000a3c <All_mode+0x2f4>
						dataF1 = DataIn;
 8000a32:	4b80      	ldr	r3, [pc, #512]	; (8000c34 <All_mode+0x4ec>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b7f      	ldr	r3, [pc, #508]	; (8000c38 <All_mode+0x4f0>)
 8000a3a:	701a      	strb	r2, [r3, #0]
					if(dataFN == 3){
 8000a3c:	4b7c      	ldr	r3, [pc, #496]	; (8000c30 <All_mode+0x4e8>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d104      	bne.n	8000a4e <All_mode+0x306>
						dataF2 = DataIn;
 8000a44:	4b7b      	ldr	r3, [pc, #492]	; (8000c34 <All_mode+0x4ec>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b7c      	ldr	r3, [pc, #496]	; (8000c3c <All_mode+0x4f4>)
 8000a4c:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000a4e:	4b79      	ldr	r3, [pc, #484]	; (8000c34 <All_mode+0x4ec>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b7a      	ldr	r3, [pc, #488]	; (8000c40 <All_mode+0x4f8>)
 8000a56:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000a58:	4b7a      	ldr	r3, [pc, #488]	; (8000c44 <All_mode+0x4fc>)
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	4b76      	ldr	r3, [pc, #472]	; (8000c38 <All_mode+0x4f0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b75      	ldr	r3, [pc, #468]	; (8000c3c <All_mode+0x4f4>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b75      	ldr	r3, [pc, #468]	; (8000c48 <All_mode+0x500>)
 8000a72:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8000a74:	4b72      	ldr	r3, [pc, #456]	; (8000c40 <All_mode+0x4f8>)
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	4b73      	ldr	r3, [pc, #460]	; (8000c48 <All_mode+0x500>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f040 8184 	bne.w	8000d8a <All_mode+0x642>
						M_state = 6;
 8000a82:	4b72      	ldr	r3, [pc, #456]	; (8000c4c <All_mode+0x504>)
 8000a84:	2206      	movs	r2, #6
 8000a86:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000a88:	2202      	movs	r2, #2
 8000a8a:	4971      	ldr	r1, [pc, #452]	; (8000c50 <All_mode+0x508>)
 8000a8c:	4871      	ldr	r0, [pc, #452]	; (8000c54 <All_mode+0x50c>)
 8000a8e:	f001 ff93 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000a92:	4b71      	ldr	r3, [pc, #452]	; (8000c58 <All_mode+0x510>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000a98:	4b65      	ldr	r3, [pc, #404]	; (8000c30 <All_mode+0x4e8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
					break;
 8000a9e:	e174      	b.n	8000d8a <All_mode+0x642>
					if (dataFN == 2){
 8000aa0:	4b63      	ldr	r3, [pc, #396]	; (8000c30 <All_mode+0x4e8>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d104      	bne.n	8000ab2 <All_mode+0x36a>
						Nstation = DataIn;
 8000aa8:	4b62      	ldr	r3, [pc, #392]	; (8000c34 <All_mode+0x4ec>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b6b      	ldr	r3, [pc, #428]	; (8000c5c <All_mode+0x514>)
 8000ab0:	701a      	strb	r2, [r3, #0]
					if (dataFN < Nstation + 3){
 8000ab2:	4b6a      	ldr	r3, [pc, #424]	; (8000c5c <All_mode+0x514>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	4a5d      	ldr	r2, [pc, #372]	; (8000c30 <All_mode+0x4e8>)
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	4293      	cmp	r3, r2
 8000abe:	db16      	blt.n	8000aee <All_mode+0x3a6>
						if (dataFN == countN + 3){
 8000ac0:	4b5b      	ldr	r3, [pc, #364]	; (8000c30 <All_mode+0x4e8>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b66      	ldr	r3, [pc, #408]	; (8000c60 <All_mode+0x518>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	3303      	adds	r3, #3
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d10e      	bne.n	8000aee <All_mode+0x3a6>
							dataFSum += DataIn;
 8000ad0:	4b58      	ldr	r3, [pc, #352]	; (8000c34 <All_mode+0x4ec>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b63      	ldr	r3, [pc, #396]	; (8000c64 <All_mode+0x51c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <All_mode+0x51c>)
 8000ae0:	701a      	strb	r2, [r3, #0]
							countN += 1;
 8000ae2:	4b5f      	ldr	r3, [pc, #380]	; (8000c60 <All_mode+0x518>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b5d      	ldr	r3, [pc, #372]	; (8000c60 <All_mode+0x518>)
 8000aec:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000aee:	4b51      	ldr	r3, [pc, #324]	; (8000c34 <All_mode+0x4ec>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b52      	ldr	r3, [pc, #328]	; (8000c40 <All_mode+0x4f8>)
 8000af6:	701a      	strb	r2, [r3, #0]
					chksum3 = ~(StartM + Nstation + dataFSum);
 8000af8:	4b52      	ldr	r3, [pc, #328]	; (8000c44 <All_mode+0x4fc>)
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b57      	ldr	r3, [pc, #348]	; (8000c5c <All_mode+0x514>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b57      	ldr	r3, [pc, #348]	; (8000c64 <All_mode+0x51c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b55      	ldr	r3, [pc, #340]	; (8000c68 <All_mode+0x520>)
 8000b12:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum3){
 8000b14:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <All_mode+0x4f8>)
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	4b53      	ldr	r3, [pc, #332]	; (8000c68 <All_mode+0x520>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f040 8136 	bne.w	8000d8e <All_mode+0x646>
						M_state = 7;
 8000b22:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <All_mode+0x504>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000b28:	2202      	movs	r2, #2
 8000b2a:	4949      	ldr	r1, [pc, #292]	; (8000c50 <All_mode+0x508>)
 8000b2c:	4849      	ldr	r0, [pc, #292]	; (8000c54 <All_mode+0x50c>)
 8000b2e:	f001 ff43 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000b32:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <All_mode+0x510>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000b38:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <All_mode+0x4e8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
						countN = 0;
 8000b3e:	4b48      	ldr	r3, [pc, #288]	; (8000c60 <All_mode+0x518>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
					break;
 8000b44:	e123      	b.n	8000d8e <All_mode+0x646>
					chksum = DataIn;
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <All_mode+0x4ec>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <All_mode+0x4f8>)
 8000b4e:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000b50:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <All_mode+0x4fc>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <All_mode+0x524>)
 8000b5a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000b5c:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <All_mode+0x4f8>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <All_mode+0x524>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 8114 	bne.w	8000d92 <All_mode+0x64a>
						M_state = 8;
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <All_mode+0x504>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000b70:	2202      	movs	r2, #2
 8000b72:	4937      	ldr	r1, [pc, #220]	; (8000c50 <All_mode+0x508>)
 8000b74:	4837      	ldr	r0, [pc, #220]	; (8000c54 <All_mode+0x50c>)
 8000b76:	f001 ff1f 	bl	80029b8 <HAL_UART_Transmit_DMA>
						HAL_Delay(1000);
 8000b7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b7e:	f000 fb53 	bl	8001228 <HAL_Delay>
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_f, 2);//Fn
 8000b82:	2202      	movs	r2, #2
 8000b84:	493a      	ldr	r1, [pc, #232]	; (8000c70 <All_mode+0x528>)
 8000b86:	4833      	ldr	r0, [pc, #204]	; (8000c54 <All_mode+0x50c>)
 8000b88:	f001 ff16 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000b8c:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <All_mode+0x510>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <All_mode+0x4e8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
					break;
 8000b98:	e0fb      	b.n	8000d92 <All_mode+0x64a>
					chksum = DataIn;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <All_mode+0x4ec>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <All_mode+0x4f8>)
 8000ba2:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <All_mode+0x4fc>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <All_mode+0x524>)
 8000bae:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <All_mode+0x4f8>)
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <All_mode+0x524>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f040 80ec 	bne.w	8000d96 <All_mode+0x64e>
						M_state = 9;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <All_mode+0x504>)
 8000bc0:	2209      	movs	r2, #9
 8000bc2:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	4922      	ldr	r1, [pc, #136]	; (8000c50 <All_mode+0x508>)
 8000bc8:	4822      	ldr	r0, [pc, #136]	; (8000c54 <All_mode+0x50c>)
 8000bca:	f001 fef5 	bl	80029b8 <HAL_UART_Transmit_DMA>
						HAL_Delay(1000);
 8000bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd2:	f000 fb29 	bl	8001228 <HAL_Delay>
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)DataTran, 4);
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4926      	ldr	r1, [pc, #152]	; (8000c74 <All_mode+0x52c>)
 8000bda:	481e      	ldr	r0, [pc, #120]	; (8000c54 <All_mode+0x50c>)
 8000bdc:	f001 feec 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <All_mode+0x510>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <All_mode+0x4e8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
					break;
 8000bec:	e0d3      	b.n	8000d96 <All_mode+0x64e>
					chksum = DataIn;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <All_mode+0x4ec>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <All_mode+0x4f8>)
 8000bf6:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <All_mode+0x4fc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <All_mode+0x524>)
 8000c02:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <All_mode+0x4f8>)
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <All_mode+0x524>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	f040 80c4 	bne.w	8000d9a <All_mode+0x652>
						M_state = 10;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <All_mode+0x504>)
 8000c14:	220a      	movs	r2, #10
 8000c16:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000c18:	2202      	movs	r2, #2
 8000c1a:	490d      	ldr	r1, [pc, #52]	; (8000c50 <All_mode+0x508>)
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <All_mode+0x50c>)
 8000c1e:	f001 fecb 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <All_mode+0x510>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000c28:	4b01      	ldr	r3, [pc, #4]	; (8000c30 <All_mode+0x4e8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
					break;
 8000c2e:	e0b4      	b.n	8000d9a <All_mode+0x652>
 8000c30:	20000056 	.word	0x20000056
 8000c34:	200000c4 	.word	0x200000c4
 8000c38:	2000012f 	.word	0x2000012f
 8000c3c:	20000178 	.word	0x20000178
 8000c40:	20000132 	.word	0x20000132
 8000c44:	200000c0 	.word	0x200000c0
 8000c48:	2000012d 	.word	0x2000012d
 8000c4c:	20000054 	.word	0x20000054
 8000c50:	20000004 	.word	0x20000004
 8000c54:	20000134 	.word	0x20000134
 8000c58:	20000055 	.word	0x20000055
 8000c5c:	2000012c 	.word	0x2000012c
 8000c60:	20000057 	.word	0x20000057
 8000c64:	20000131 	.word	0x20000131
 8000c68:	200000c8 	.word	0x200000c8
 8000c6c:	20000130 	.word	0x20000130
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000000 	.word	0x20000000
					chksum = DataIn;
 8000c78:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <All_mode+0x664>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <All_mode+0x668>)
 8000c80:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000c82:	4b4c      	ldr	r3, [pc, #304]	; (8000db4 <All_mode+0x66c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <All_mode+0x670>)
 8000c8c:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000c8e:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <All_mode+0x668>)
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <All_mode+0x670>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d10d      	bne.n	8000cb6 <All_mode+0x56e>
						M_state = 11;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <All_mode+0x674>)
 8000c9c:	220b      	movs	r2, #11
 8000c9e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	4947      	ldr	r1, [pc, #284]	; (8000dc0 <All_mode+0x678>)
 8000ca4:	4847      	ldr	r0, [pc, #284]	; (8000dc4 <All_mode+0x67c>)
 8000ca6:	f001 fe87 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000caa:	4b47      	ldr	r3, [pc, #284]	; (8000dc8 <All_mode+0x680>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000cb0:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <All_mode+0x684>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
					chksum = DataIn;
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <All_mode+0x664>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <All_mode+0x668>)
 8000cbe:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000cc0:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <All_mode+0x66c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <All_mode+0x670>)
 8000cca:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000ccc:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <All_mode+0x668>)
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <All_mode+0x670>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d162      	bne.n	8000d9e <All_mode+0x656>
						M_state = 12;
 8000cd8:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <All_mode+0x674>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4937      	ldr	r1, [pc, #220]	; (8000dc0 <All_mode+0x678>)
 8000ce2:	4838      	ldr	r0, [pc, #224]	; (8000dc4 <All_mode+0x67c>)
 8000ce4:	f001 fe68 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000ce8:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <All_mode+0x680>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000cee:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <All_mode+0x684>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
					break;
 8000cf4:	e053      	b.n	8000d9e <All_mode+0x656>
					chksum = DataIn;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <All_mode+0x664>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <All_mode+0x668>)
 8000cfe:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000d00:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <All_mode+0x66c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <All_mode+0x670>)
 8000d0a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <All_mode+0x668>)
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <All_mode+0x670>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d144      	bne.n	8000da2 <All_mode+0x65a>
						M_state = 13;
 8000d18:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <All_mode+0x674>)
 8000d1a:	220d      	movs	r2, #13
 8000d1c:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000d1e:	2202      	movs	r2, #2
 8000d20:	4927      	ldr	r1, [pc, #156]	; (8000dc0 <All_mode+0x678>)
 8000d22:	4828      	ldr	r0, [pc, #160]	; (8000dc4 <All_mode+0x67c>)
 8000d24:	f001 fe48 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <All_mode+0x680>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <All_mode+0x684>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
					break;
 8000d34:	e035      	b.n	8000da2 <All_mode+0x65a>
					chksum = DataIn;
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <All_mode+0x664>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <All_mode+0x668>)
 8000d3e:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <All_mode+0x66c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <All_mode+0x670>)
 8000d4a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <All_mode+0x668>)
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <All_mode+0x670>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d126      	bne.n	8000da6 <All_mode+0x65e>
						M_state = 14;
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <All_mode+0x674>)
 8000d5a:	220e      	movs	r2, #14
 8000d5c:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
 8000d5e:	2202      	movs	r2, #2
 8000d60:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <All_mode+0x678>)
 8000d62:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <All_mode+0x67c>)
 8000d64:	f001 fe28 	bl	80029b8 <HAL_UART_Transmit_DMA>
						chkM = 0;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <All_mode+0x680>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <All_mode+0x684>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
					break;
 8000d74:	e017      	b.n	8000da6 <All_mode+0x65e>
					break;
 8000d76:	bf00      	nop
 8000d78:	e016      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d7a:	bf00      	nop
 8000d7c:	e014      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d7e:	bf00      	nop
 8000d80:	e012      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d82:	bf00      	nop
 8000d84:	e010      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d86:	bf00      	nop
 8000d88:	e00e      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d8a:	bf00      	nop
 8000d8c:	e00c      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d8e:	bf00      	nop
 8000d90:	e00a      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d92:	bf00      	nop
 8000d94:	e008      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d96:	bf00      	nop
 8000d98:	e006      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d9a:	bf00      	nop
 8000d9c:	e004      	b.n	8000da8 <All_mode+0x660>
					break;
 8000d9e:	bf00      	nop
 8000da0:	e002      	b.n	8000da8 <All_mode+0x660>
					break;
 8000da2:	bf00      	nop
 8000da4:	e000      	b.n	8000da8 <All_mode+0x660>
					break;
 8000da6:	bf00      	nop
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200000c4 	.word	0x200000c4
 8000db0:	20000132 	.word	0x20000132
 8000db4:	200000c0 	.word	0x200000c0
 8000db8:	20000130 	.word	0x20000130
 8000dbc:	20000054 	.word	0x20000054
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000134 	.word	0x20000134
 8000dc8:	20000055 	.word	0x20000055
 8000dcc:	20000056 	.word	0x20000056

08000dd0 <UARTRecieveIT>:
void UARTRecieveIT()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8000dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dda:	80fb      	strh	r3, [r7, #6]
	//HAL_UART_Receive_DMA(&huart2,RxDataBuffer,32);
	HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000ddc:	2220      	movs	r2, #32
 8000dde:	491a      	ldr	r1, [pc, #104]	; (8000e48 <UARTRecieveIT+0x78>)
 8000de0:	481a      	ldr	r0, [pc, #104]	; (8000e4c <UARTRecieveIT+0x7c>)
 8000de2:	f001 fdb8 	bl	8002956 <HAL_UART_Receive_IT>
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <UARTRecieveIT+0x7c>)
 8000de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <UARTRecieveIT+0x7c>)
 8000dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <UARTRecieveIT+0x80>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d01f      	beq.n	8000e3c <UARTRecieveIT+0x6c>
	{
		data=RxDataBuffer[dataPos];
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <UARTRecieveIT+0x80>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <UARTRecieveIT+0x78>)
 8000e02:	5cd3      	ldrb	r3, [r2, r3]
 8000e04:	80fb      	strh	r3, [r7, #6]
		DataIn = data;
 8000e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <UARTRecieveIT+0x84>)
 8000e0c:	6013      	str	r3, [r2, #0]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <UARTRecieveIT+0x80>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <UARTRecieveIT+0x7c>)
 8000e16:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000e18:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e1c:	fb02 f201 	mul.w	r2, r2, r1
 8000e20:	1a9b      	subs	r3, r3, r2
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <UARTRecieveIT+0x80>)
 8000e24:	6013      	str	r3, [r2, #0]
		Posdata = dataPos;
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <UARTRecieveIT+0x80>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <UARTRecieveIT+0x88>)
 8000e2e:	701a      	strb	r2, [r3, #0]
		dataFN += 1;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <UARTRecieveIT+0x8c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <UARTRecieveIT+0x8c>)
 8000e3a:	701a      	strb	r2, [r3, #0]
//		dataPos = 0;
//	}
//	DataIn=RxDataBuffer[dataPos];
//	dataPos += 1;

	All_mode();
 8000e3c:	f7ff fc84 	bl	8000748 <All_mode>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000034 	.word	0x20000034
 8000e4c:	20000134 	.word	0x20000134
 8000e50:	20000058 	.word	0x20000058
 8000e54:	200000c4 	.word	0x200000c4
 8000e58:	2000012e 	.word	0x2000012e
 8000e5c:	20000056 	.word	0x20000056

08000e60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);//s
	//HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f000 faa6 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <HAL_UART_MspInit+0x150>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	f040 8091 	bne.w	8001016 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <HAL_UART_MspInit+0x154>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a49      	ldr	r2, [pc, #292]	; (8001024 <HAL_UART_MspInit+0x154>)
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b47      	ldr	r3, [pc, #284]	; (8001024 <HAL_UART_MspInit+0x154>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b43      	ldr	r3, [pc, #268]	; (8001024 <HAL_UART_MspInit+0x154>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a42      	ldr	r2, [pc, #264]	; (8001024 <HAL_UART_MspInit+0x154>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <HAL_UART_MspInit+0x154>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4838      	ldr	r0, [pc, #224]	; (8001028 <HAL_UART_MspInit+0x158>)
 8000f48:	f000 fea6 	bl	8001c98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f4e:	4a38      	ldr	r2, [pc, #224]	; (8001030 <HAL_UART_MspInit+0x160>)
 8000f50:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f58:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f5c:	2240      	movs	r2, #64	; 0x40
 8000f5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f8c:	4827      	ldr	r0, [pc, #156]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f8e:	f000 fa81 	bl	8001494 <HAL_DMA_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000f98:	f7ff ff6c 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa2:	4a22      	ldr	r2, [pc, #136]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <HAL_UART_MspInit+0x168>)
 8000fac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fdc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000fec:	f000 fa52 	bl	8001494 <HAL_DMA_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000ff6:	f7ff ff3d 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <HAL_UART_MspInit+0x164>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2026      	movs	r0, #38	; 0x26
 800100c:	f000 fa0b 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001010:	2026      	movs	r0, #38	; 0x26
 8001012:	f000 fa24 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40004400 	.word	0x40004400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000
 800102c:	200000cc 	.word	0x200000cc
 8001030:	400260a0 	.word	0x400260a0
 8001034:	20000060 	.word	0x20000060
 8001038:	40026088 	.word	0x40026088

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f8ae 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <DMA1_Stream5_IRQHandler+0x10>)
 8001096:	f000 fb95 	bl	80017c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000060 	.word	0x20000060

080010a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Stream6_IRQHandler+0x10>)
 80010aa:	f000 fb8b 	bl	80017c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000cc 	.word	0x200000cc

080010b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <USART2_IRQHandler+0x10>)
 80010be:	f001 fcf9 	bl	8002ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000134 	.word	0x20000134

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f6:	490e      	ldr	r1, [pc, #56]	; (8001130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800110c:	4c0b      	ldr	r4, [pc, #44]	; (800113c <LoopFillZerobss+0x26>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800111a:	f7ff ffd7 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f002 fbeb 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff f9d5 	bl	80004d0 <main>
  bx  lr    
 8001126:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001134:	08003998 	.word	0x08003998
  ldr r2, =_sbss
 8001138:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800113c:	20000180 	.word	0x20000180

08001140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_Init+0x40>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_Init+0x40>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x40>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f94f 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fe82 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f967 	bl	800147a <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f92f 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000000c 	.word	0x2000000c
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000010 	.word	0x20000010

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000014 	.word	0x20000014
 800120c:	2000017c 	.word	0x2000017c

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	2000017c 	.word	0x2000017c

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000014 	.word	0x20000014

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff29 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff3e 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff31 	bl	80012d4 <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff feb6 	bl	8001210 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e099      	b.n	80015e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d0:	e00f      	b.n	80014f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d2:	f7ff fe9d 	bl	8001210 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d908      	bls.n	80014f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e078      	b.n	80015e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1e8      	bne.n	80014d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <HAL_DMA_Init+0x158>)
 800150c:	4013      	ands	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	2b04      	cmp	r3, #4
 800154a:	d107      	bne.n	800155c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	4313      	orrs	r3, r2
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4313      	orrs	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f023 0307 	bic.w	r3, r3, #7
 8001572:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	4313      	orrs	r3, r2
 800157c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	2b04      	cmp	r3, #4
 8001584:	d117      	bne.n	80015b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4313      	orrs	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00e      	beq.n	80015b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fb01 	bl	8001ba0 <DMA_CheckFifoParam>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2240      	movs	r2, #64	; 0x40
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015b2:	2301      	movs	r3, #1
 80015b4:	e016      	b.n	80015e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fab8 	bl	8001b34 <DMA_CalcBaseAndBitshift>
 80015c4:	4603      	mov	r3, r0
 80015c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	223f      	movs	r2, #63	; 0x3f
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f010803f 	.word	0xf010803f

080015f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_DMA_Start_IT+0x26>
 8001612:	2302      	movs	r3, #2
 8001614:	e040      	b.n	8001698 <HAL_DMA_Start_IT+0xa8>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d12f      	bne.n	800168a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2202      	movs	r2, #2
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fa4a 	bl	8001ad8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	223f      	movs	r2, #63	; 0x3f
 800164a:	409a      	lsls	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0216 	orr.w	r2, r2, #22
 800165e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0208 	orr.w	r2, r2, #8
 8001676:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e005      	b.n	8001696 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001692:	2302      	movs	r3, #2
 8001694:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001696:	7dfb      	ldrb	r3, [r7, #23]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016ae:	f7ff fdaf 	bl	8001210 <HAL_GetTick>
 80016b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d008      	beq.n	80016d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e052      	b.n	8001778 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0216 	bic.w	r2, r2, #22
 80016e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695a      	ldr	r2, [r3, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d103      	bne.n	8001702 <HAL_DMA_Abort+0x62>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0208 	bic.w	r2, r2, #8
 8001710:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0201 	bic.w	r2, r2, #1
 8001720:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001722:	e013      	b.n	800174c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001724:	f7ff fd74 	bl	8001210 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b05      	cmp	r3, #5
 8001730:	d90c      	bls.n	800174c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2220      	movs	r2, #32
 8001736:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e015      	b.n	8001778 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e4      	bne.n	8001724 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	223f      	movs	r2, #63	; 0x3f
 8001760:	409a      	lsls	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d004      	beq.n	800179e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00c      	b.n	80017b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2205      	movs	r2, #5
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017d0:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <HAL_DMA_IRQHandler+0x258>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a92      	ldr	r2, [pc, #584]	; (8001a20 <HAL_DMA_IRQHandler+0x25c>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0a9b      	lsrs	r3, r3, #10
 80017dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2208      	movs	r2, #8
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01a      	beq.n	8001830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d013      	beq.n	8001830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0204 	bic.w	r2, r2, #4
 8001816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181c:	2208      	movs	r2, #8
 800181e:	409a      	lsls	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	2201      	movs	r2, #1
 8001836:	409a      	lsls	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d012      	beq.n	8001866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001852:	2201      	movs	r2, #1
 8001854:	409a      	lsls	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	f043 0202 	orr.w	r2, r3, #2
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	2204      	movs	r2, #4
 800186c:	409a      	lsls	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d012      	beq.n	800189c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00b      	beq.n	800189c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	2204      	movs	r2, #4
 800188a:	409a      	lsls	r2, r3
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	f043 0204 	orr.w	r2, r3, #4
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	2210      	movs	r2, #16
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d043      	beq.n	8001934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d03c      	beq.n	8001934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2210      	movs	r2, #16
 80018c0:	409a      	lsls	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d018      	beq.n	8001906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d024      	beq.n	8001934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
 80018f2:	e01f      	b.n	8001934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01b      	beq.n	8001934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4798      	blx	r3
 8001904:	e016      	b.n	8001934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d107      	bne.n	8001924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0208 	bic.w	r2, r2, #8
 8001922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2220      	movs	r2, #32
 800193a:	409a      	lsls	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 808e 	beq.w	8001a62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 8086 	beq.w	8001a62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	2220      	movs	r2, #32
 800195c:	409a      	lsls	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b05      	cmp	r3, #5
 800196c:	d136      	bne.n	80019dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0216 	bic.w	r2, r2, #22
 800197c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d103      	bne.n	800199e <HAL_DMA_IRQHandler+0x1da>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0208 	bic.w	r2, r2, #8
 80019ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	223f      	movs	r2, #63	; 0x3f
 80019b4:	409a      	lsls	r2, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d07d      	beq.n	8001ace <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
        }
        return;
 80019da:	e078      	b.n	8001ace <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01c      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d108      	bne.n	8001a0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d030      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
 8001a08:	e02b      	b.n	8001a62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d027      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
 8001a1a:	e022      	b.n	8001a62 <HAL_DMA_IRQHandler+0x29e>
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10f      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0210 	bic.w	r2, r2, #16
 8001a40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d032      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d022      	beq.n	8001abc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d307      	bcc.n	8001aaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f2      	bne.n	8001a8e <HAL_DMA_IRQHandler+0x2ca>
 8001aa8:	e000      	b.n	8001aac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001aaa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
 8001acc:	e000      	b.n	8001ad0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ace:	bf00      	nop
    }
  }
}
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop

08001ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001af4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b40      	cmp	r3, #64	; 0x40
 8001b04:	d108      	bne.n	8001b18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b16:	e007      	b.n	8001b28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3b10      	subs	r3, #16
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <DMA_CalcBaseAndBitshift+0x64>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <DMA_CalcBaseAndBitshift+0x68>)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d909      	bls.n	8001b76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	1d1a      	adds	r2, r3, #4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	659a      	str	r2, [r3, #88]	; 0x58
 8001b74:	e007      	b.n	8001b86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	aaaaaaab 	.word	0xaaaaaaab
 8001b9c:	08003980 	.word	0x08003980

08001ba0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11f      	bne.n	8001bfa <DMA_CheckFifoParam+0x5a>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d856      	bhi.n	8001c6e <DMA_CheckFifoParam+0xce>
 8001bc0:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <DMA_CheckFifoParam+0x28>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001beb 	.word	0x08001beb
 8001bd0:	08001bd9 	.word	0x08001bd9
 8001bd4:	08001c6f 	.word	0x08001c6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d046      	beq.n	8001c72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be8:	e043      	b.n	8001c72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bf2:	d140      	bne.n	8001c76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf8:	e03d      	b.n	8001c76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c02:	d121      	bne.n	8001c48 <DMA_CheckFifoParam+0xa8>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d837      	bhi.n	8001c7a <DMA_CheckFifoParam+0xda>
 8001c0a:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <DMA_CheckFifoParam+0x70>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c27 	.word	0x08001c27
 8001c18:	08001c21 	.word	0x08001c21
 8001c1c:	08001c39 	.word	0x08001c39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
      break;
 8001c24:	e030      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d025      	beq.n	8001c7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c36:	e022      	b.n	8001c7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c40:	d11f      	bne.n	8001c82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c46:	e01c      	b.n	8001c82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d903      	bls.n	8001c56 <DMA_CheckFifoParam+0xb6>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d003      	beq.n	8001c5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c54:	e018      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
      break;
 8001c5a:	e015      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00e      	beq.n	8001c86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6c:	e00b      	b.n	8001c86 <DMA_CheckFifoParam+0xe6>
      break;
 8001c6e:	bf00      	nop
 8001c70:	e00a      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
      break;
 8001c72:	bf00      	nop
 8001c74:	e008      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
      break;
 8001c76:	bf00      	nop
 8001c78:	e006      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
      break;
 8001c7a:	bf00      	nop
 8001c7c:	e004      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
      break;
 8001c7e:	bf00      	nop
 8001c80:	e002      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c82:	bf00      	nop
 8001c84:	e000      	b.n	8001c88 <DMA_CheckFifoParam+0xe8>
      break;
 8001c86:	bf00      	nop
    }
  } 
  
  return status; 
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e159      	b.n	8001f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 8148 	bne.w	8001f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d005      	beq.n	8001cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d130      	bne.n	8001d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d017      	beq.n	8001d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d123      	bne.n	8001ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	69b9      	ldr	r1, [r7, #24]
 8001dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0203 	and.w	r2, r3, #3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a2 	beq.w	8001f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <HAL_GPIO_Init+0x2e8>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a56      	ldr	r2, [pc, #344]	; (8001f80 <HAL_GPIO_Init+0x2e8>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b54      	ldr	r3, [pc, #336]	; (8001f80 <HAL_GPIO_Init+0x2e8>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3a:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_GPIO_Init+0x2ec>)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a49      	ldr	r2, [pc, #292]	; (8001f88 <HAL_GPIO_Init+0x2f0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d019      	beq.n	8001e9a <HAL_GPIO_Init+0x202>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a48      	ldr	r2, [pc, #288]	; (8001f8c <HAL_GPIO_Init+0x2f4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0x1fe>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <HAL_GPIO_Init+0x2f8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x1fa>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a46      	ldr	r2, [pc, #280]	; (8001f94 <HAL_GPIO_Init+0x2fc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x1f6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a45      	ldr	r2, [pc, #276]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x1f2>
 8001e86:	2304      	movs	r3, #4
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eac:	4935      	ldr	r1, [pc, #212]	; (8001f84 <HAL_GPIO_Init+0x2ec>)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f08:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f32:	4a1a      	ldr	r2, [pc, #104]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f67f aea2 	bls.w	8001cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40013800 	.word	0x40013800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e264      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d075      	beq.n	80020de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff2:	4ba3      	ldr	r3, [pc, #652]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d00c      	beq.n	8002018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffe:	4ba0      	ldr	r3, [pc, #640]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	2b08      	cmp	r3, #8
 8002008:	d112      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4b9d      	ldr	r3, [pc, #628]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002016:	d10b      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	4b99      	ldr	r3, [pc, #612]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d05b      	beq.n	80020dc <HAL_RCC_OscConfig+0x108>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d157      	bne.n	80020dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e23f      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x74>
 800203a:	4b91      	ldr	r3, [pc, #580]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a90      	ldr	r2, [pc, #576]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a8a      	ldr	r2, [pc, #552]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 800206c:	4b84      	ldr	r3, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a83      	ldr	r2, [pc, #524]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b81      	ldr	r3, [pc, #516]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a80      	ldr	r2, [pc, #512]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff f8c0 	bl	8001210 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff f8bc 	bl	8001210 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e204      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xc0>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff f8ac 	bl	8001210 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff f8a8 	bl	8001210 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1f0      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0xe8>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c4      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4952      	ldr	r1, [pc, #328]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_RCC_OscConfig+0x2b0>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff f861 	bl	8001210 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff f85d 	bl	8001210 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a5      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b43      	ldr	r3, [pc, #268]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4940      	ldr	r1, [pc, #256]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCC_OscConfig+0x2b0>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f840 	bl	8001210 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff f83c 	bl	8001210 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e184      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d030      	beq.n	8002220 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_RCC_OscConfig+0x2b4>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff f820 	bl	8001210 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff f81c 	bl	8001210 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e164      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x200>
 80021f2:	e015      	b.n	8002220 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCC_OscConfig+0x2b4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff f809 	bl	8001210 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002202:	f7ff f805 	bl	8001210 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e14d      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a0 	beq.w	800236e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	2301      	movs	r3, #1
 800225c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d121      	bne.n	80022ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a07      	ldr	r2, [pc, #28]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002276:	f7fe ffcb 	bl	8001210 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	e011      	b.n	80022a2 <HAL_RCC_OscConfig+0x2ce>
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	42470000 	.word	0x42470000
 8002288:	42470e80 	.word	0x42470e80
 800228c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7fe ffbe 	bl	8001210 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e106      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b85      	ldr	r3, [pc, #532]	; (80024b8 <HAL_RCC_OscConfig+0x4e4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a80      	ldr	r2, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e01c      	b.n	80022fe <HAL_RCC_OscConfig+0x32a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x312>
 80022cc:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
 80022d8:	4b78      	ldr	r3, [pc, #480]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0x32a>
 80022e6:	4b75      	ldr	r3, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a74      	ldr	r2, [pc, #464]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
 80022f2:	4b72      	ldr	r3, [pc, #456]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d015      	beq.n	8002332 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe ff83 	bl	8001210 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe ff7f 	bl	8001210 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0c5      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ee      	beq.n	800230e <HAL_RCC_OscConfig+0x33a>
 8002330:	e014      	b.n	800235c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe ff6d 	bl	8001210 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe ff69 	bl	8001210 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0af      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 809b 	beq.w	80024ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d05c      	beq.n	800243e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d141      	bne.n	8002410 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe ff3d 	bl	8001210 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe ff39 	bl	8001210 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e081      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	019b      	lsls	r3, r3, #6
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	4937      	ldr	r1, [pc, #220]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e2:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe ff12 	bl	8001210 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe ff0e 	bl	8001210 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e056      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x41c>
 800240e:	e04e      	b.n	80024ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fefb 	bl	8001210 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fef7 	bl	8001210 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e03f      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x44a>
 800243c:	e037      	b.n	80024ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e032      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d028      	beq.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d121      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d11a      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002480:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002482:	4293      	cmp	r3, r2
 8002484:	d111      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	3b01      	subs	r3, #1
 8002494:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40007000 	.word	0x40007000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470060 	.word	0x42470060

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0cc      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d044      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e067      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7fe fe2c 	bl	8001210 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe fe28 	bl	8001210 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20c      	bcs.n	800260c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fd8c 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	08003968 	.word	0x08003968
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000010 	.word	0x20000010

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	2300      	movs	r3, #0
 80026a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d00d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x40>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f200 80bd 	bhi.w	8002834 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x3a>
 80026c2:	e0b7      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026c6:	60bb      	str	r3, [r7, #8]
       break;
 80026c8:	e0b7      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026cc:	60bb      	str	r3, [r7, #8]
      break;
 80026ce:	e0b4      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04d      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	461a      	mov	r2, r3
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	ea02 0800 	and.w	r8, r2, r0
 80026fe:	ea03 0901 	and.w	r9, r3, r1
 8002702:	4640      	mov	r0, r8
 8002704:	4649      	mov	r1, r9
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	014b      	lsls	r3, r1, #5
 8002710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002714:	0142      	lsls	r2, r0, #5
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	ebb0 0008 	subs.w	r0, r0, r8
 800271e:	eb61 0109 	sbc.w	r1, r1, r9
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	018b      	lsls	r3, r1, #6
 800272c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002730:	0182      	lsls	r2, r0, #6
 8002732:	1a12      	subs	r2, r2, r0
 8002734:	eb63 0301 	sbc.w	r3, r3, r1
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	00d9      	lsls	r1, r3, #3
 8002742:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002746:	00d0      	lsls	r0, r2, #3
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	eb12 0208 	adds.w	r2, r2, r8
 8002750:	eb43 0309 	adc.w	r3, r3, r9
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	0259      	lsls	r1, r3, #9
 800275e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002762:	0250      	lsls	r0, r2, #9
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f7fd fd30 	bl	80001d8 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e04a      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	099b      	lsrs	r3, r3, #6
 8002788:	461a      	mov	r2, r3
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	ea02 0400 	and.w	r4, r2, r0
 800279a:	ea03 0501 	and.w	r5, r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	014b      	lsls	r3, r1, #5
 80027ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b0:	0142      	lsls	r2, r0, #5
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	1b00      	subs	r0, r0, r4
 80027b8:	eb61 0105 	sbc.w	r1, r1, r5
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	018b      	lsls	r3, r1, #6
 80027c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027ca:	0182      	lsls	r2, r0, #6
 80027cc:	1a12      	subs	r2, r2, r0
 80027ce:	eb63 0301 	sbc.w	r3, r3, r1
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	00d9      	lsls	r1, r3, #3
 80027dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e0:	00d0      	lsls	r0, r2, #3
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	1912      	adds	r2, r2, r4
 80027e8:	eb45 0303 	adc.w	r3, r5, r3
 80027ec:	f04f 0000 	mov.w	r0, #0
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	0299      	lsls	r1, r3, #10
 80027f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027fa:	0290      	lsls	r0, r2, #10
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	f7fd fce4 	bl	80001d8 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4613      	mov	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	3301      	adds	r3, #1
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	60bb      	str	r3, [r7, #8]
      break;
 8002832:	e002      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002836:	60bb      	str	r3, [r7, #8]
      break;
 8002838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283a:	68bb      	ldr	r3, [r7, #8]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	00f42400 	.word	0x00f42400
 8002850:	007a1200 	.word	0x007a1200

08002854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_RCC_GetHCLKFreq+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	2000000c 	.word	0x2000000c

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002870:	f7ff fff0 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0a9b      	lsrs	r3, r3, #10
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	08003978 	.word	0x08003978

08002894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002898:	f7ff ffdc 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	0b5b      	lsrs	r3, r3, #13
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4903      	ldr	r1, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	08003978 	.word	0x08003978

080028bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e03f      	b.n	800294e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe faf4 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	; 0x24
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fe31 	bl	8003568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	d11d      	bne.n	80029ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_UART_Receive_IT+0x26>
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e016      	b.n	80029ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_UART_Receive_IT+0x38>
 800298a:	2302      	movs	r3, #2
 800298c:	e00f      	b.n	80029ae <HAL_UART_Receive_IT+0x58>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	461a      	mov	r2, r3
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fbe3 	bl	800316e <UART_Start_Receive_IT>
 80029a8:	4603      	mov	r3, r0
 80029aa:	e000      	b.n	80029ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d165      	bne.n	8002a9e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_UART_Transmit_DMA+0x26>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e05e      	b.n	8002aa0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Transmit_DMA+0x38>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e057      	b.n	8002aa0 <HAL_UART_Transmit_DMA+0xe8>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_UART_Transmit_DMA+0xf0>)
 8002a1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a24:	4a21      	ldr	r2, [pc, #132]	; (8002aac <HAL_UART_Transmit_DMA+0xf4>)
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2c:	4a20      	ldr	r2, [pc, #128]	; (8002ab0 <HAL_UART_Transmit_DMA+0xf8>)
 8002a2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	2200      	movs	r2, #0
 8002a36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	f7fe fdce 	bl	80015f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a5c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	617b      	str	r3, [r7, #20]
   return(result);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3314      	adds	r3, #20
 8002a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a86:	627a      	str	r2, [r7, #36]	; 0x24
 8002a88:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	6a39      	ldr	r1, [r7, #32]
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e5      	bne.n	8002a66 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3730      	adds	r7, #48	; 0x30
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	08003025 	.word	0x08003025
 8002aac:	080030bf 	.word	0x080030bf
 8002ab0:	080030db 	.word	0x080030db

08002ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0ba      	sub	sp, #232	; 0xe8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_UART_IRQHandler+0x66>
 8002b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fc6c 	bl	80033f0 <UART_Receive_IT>
      return;
 8002b18:	e256      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80de 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x22c>
 8002b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80d1 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_UART_IRQHandler+0xae>
 8002b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_UART_IRQHandler+0xd2>
 8002b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_UART_IRQHandler+0xf6>
 8002b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d011      	beq.n	8002bda <HAL_UART_IRQHandler+0x126>
 8002bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f043 0208 	orr.w	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 81ed 	beq.w	8002fbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_UART_IRQHandler+0x14e>
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fbf7 	bl	80033f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_UART_IRQHandler+0x17a>
 8002c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04f      	beq.n	8002cce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 faff 	bl	8003232 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d141      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3314      	adds	r3, #20
 8002c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1d9      	bne.n	8002c42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d013      	beq.n	8002cbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	4a7d      	ldr	r2, [pc, #500]	; (8002e90 <HAL_UART_IRQHandler+0x3dc>)
 8002c9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fd6c 	bl	8001780 <HAL_DMA_Abort_IT>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	e00e      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f99a 	bl	8002ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	e00a      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f996 	bl	8002ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	e006      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f992 	bl	8002ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002cda:	e170      	b.n	8002fbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	bf00      	nop
    return;
 8002cde:	e16e      	b.n	8002fbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 814a 	bne.w	8002f7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8143 	beq.w	8002f7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 813c 	beq.w	8002f7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b40      	cmp	r3, #64	; 0x40
 8002d28:	f040 80b4 	bne.w	8002e94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8140 	beq.w	8002fc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	f080 8139 	bcs.w	8002fc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d62:	f000 8088 	beq.w	8002e76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1d9      	bne.n	8002d66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3314      	adds	r3, #20
 8002db8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e1      	bne.n	8002db2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e3      	bne.n	8002dee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e46:	f023 0310 	bic.w	r3, r3, #16
 8002e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e58:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e3      	bne.n	8002e34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe fc15 	bl	80016a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f8c0 	bl	800300c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e8c:	e099      	b.n	8002fc2 <HAL_UART_IRQHandler+0x50e>
 8002e8e:	bf00      	nop
 8002e90:	080032f9 	.word	0x080032f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 808b 	beq.w	8002fc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8086 	beq.w	8002fc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ede:	647a      	str	r2, [r7, #68]	; 0x44
 8002ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e3      	bne.n	8002eba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3314      	adds	r3, #20
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	623b      	str	r3, [r7, #32]
   return(result);
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3314      	adds	r3, #20
 8002f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f16:	633a      	str	r2, [r7, #48]	; 0x30
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e3      	bne.n	8002ef2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0310 	bic.w	r3, r3, #16
 8002f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f5c:	61fa      	str	r2, [r7, #28]
 8002f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	69b9      	ldr	r1, [r7, #24]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	617b      	str	r3, [r7, #20]
   return(result);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e3      	bne.n	8002f38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f848 	bl	800300c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f7c:	e023      	b.n	8002fc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_UART_IRQHandler+0x4ea>
 8002f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f9c2 	bl	8003320 <UART_Transmit_IT>
    return;
 8002f9c:	e014      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x514>
 8002faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa02 	bl	80033c0 <UART_EndTransmit_IT>
    return;
 8002fbc:	e004      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
    return;
 8002fbe:	bf00      	nop
 8002fc0:	e002      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
      return;
 8002fc2:	bf00      	nop
 8002fc4:	e000      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
      return;
 8002fc6:	bf00      	nop
  }
}
 8002fc8:	37e8      	adds	r7, #232	; 0xe8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop

08002fd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b090      	sub	sp, #64	; 0x40
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d137      	bne.n	80030b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003042:	2200      	movs	r2, #0
 8003044:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3314      	adds	r3, #20
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	623b      	str	r3, [r7, #32]
   return(result);
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305c:	63bb      	str	r3, [r7, #56]	; 0x38
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3314      	adds	r3, #20
 8003064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003066:	633a      	str	r2, [r7, #48]	; 0x30
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800306c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e5      	bne.n	8003046 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	60fb      	str	r3, [r7, #12]
   return(result);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	330c      	adds	r3, #12
 8003098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800309a:	61fa      	str	r2, [r7, #28]
 800309c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	617b      	str	r3, [r7, #20]
   return(result);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e5      	bne.n	800307a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030ae:	e002      	b.n	80030b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80030b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030b2:	f7ff ff8d 	bl	8002fd0 <HAL_UART_TxCpltCallback>
}
 80030b6:	bf00      	nop
 80030b8:	3740      	adds	r7, #64	; 0x40
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff89 	bl	8002fe4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b80      	cmp	r3, #128	; 0x80
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b21      	cmp	r3, #33	; 0x21
 800310c:	d108      	bne.n	8003120 <UART_DMAError+0x46>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800311a:	68b8      	ldr	r0, [r7, #8]
 800311c:	f000 f861 	bl	80031e2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b22      	cmp	r3, #34	; 0x22
 8003140:	d108      	bne.n	8003154 <UART_DMAError+0x7a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800314e:	68b8      	ldr	r0, [r7, #8]
 8003150:	f000 f86f 	bl	8003232 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0210 	orr.w	r2, r3, #16
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003160:	68b8      	ldr	r0, [r7, #8]
 8003162:	f7ff ff49 	bl	8002ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	4613      	mov	r3, r2
 800317a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2222      	movs	r2, #34	; 0x22
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0220 	orr.w	r2, r2, #32
 80031d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b089      	sub	sp, #36	; 0x24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	61ba      	str	r2, [r7, #24]
 800320c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	613b      	str	r3, [r7, #16]
   return(result);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e5      	bne.n	80031ea <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003226:	bf00      	nop
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003232:	b480      	push	{r7}
 8003234:	b095      	sub	sp, #84	; 0x54
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800325a:	643a      	str	r2, [r7, #64]	; 0x40
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	61fb      	str	r3, [r7, #28]
   return(result);
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	64bb      	str	r3, [r7, #72]	; 0x48
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800328e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e5      	bne.n	800326e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d119      	bne.n	80032de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f023 0310 	bic.w	r3, r3, #16
 80032c0:	647b      	str	r3, [r7, #68]	; 0x44
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ca:	61ba      	str	r2, [r7, #24]
 80032cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	6979      	ldr	r1, [r7, #20]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	613b      	str	r3, [r7, #16]
   return(result);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e5      	bne.n	80032aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032ec:	bf00      	nop
 80032ee:	3754      	adds	r7, #84	; 0x54
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fe70 	bl	8002ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b21      	cmp	r3, #33	; 0x21
 8003332:	d13e      	bne.n	80033b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d114      	bne.n	8003368 <UART_Transmit_IT+0x48>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d110      	bne.n	8003368 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800335a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	621a      	str	r2, [r3, #32]
 8003366:	e008      	b.n	800337a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6211      	str	r1, [r2, #32]
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29b      	uxth	r3, r3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4619      	mov	r1, r3
 8003388:	84d1      	strh	r1, [r2, #38]	; 0x26
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10f      	bne.n	80033ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800339c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fdf5 	bl	8002fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	; 0x30
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b22      	cmp	r3, #34	; 0x22
 8003402:	f040 80ab 	bne.w	800355c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	d117      	bne.n	8003440 <UART_Receive_IT+0x50>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d113      	bne.n	8003440 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342e:	b29a      	uxth	r2, r3
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	1c9a      	adds	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
 800343e:	e026      	b.n	800348e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	d007      	beq.n	8003464 <UART_Receive_IT+0x74>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <UART_Receive_IT+0x82>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d106      	bne.n	8003472 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e008      	b.n	8003484 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800347e:	b2da      	uxtb	r2, r3
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29b      	uxth	r3, r3
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4619      	mov	r1, r3
 800349c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d15a      	bne.n	8003558 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0220 	bic.w	r2, r2, #32
 80034b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d135      	bne.n	800354e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	613b      	str	r3, [r7, #16]
   return(result);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f023 0310 	bic.w	r3, r3, #16
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	623a      	str	r2, [r7, #32]
 800350a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	69f9      	ldr	r1, [r7, #28]
 800350e:	6a3a      	ldr	r2, [r7, #32]
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	61bb      	str	r3, [r7, #24]
   return(result);
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e5      	bne.n	80034e8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b10      	cmp	r3, #16
 8003528:	d10a      	bne.n	8003540 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fd60 	bl	800300c <HAL_UARTEx_RxEventCallback>
 800354c:	e002      	b.n	8003554 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fc86 	bl	8000e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e002      	b.n	800355e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3730      	adds	r7, #48	; 0x30
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356c:	b09f      	sub	sp, #124	; 0x7c
 800356e:	af00      	add	r7, sp, #0
 8003570:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800357c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357e:	68d9      	ldr	r1, [r3, #12]
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	ea40 0301 	orr.w	r3, r0, r1
 8003588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	431a      	orrs	r2, r3
 8003594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	431a      	orrs	r2, r3
 800359a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4313      	orrs	r3, r2
 80035a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035ac:	f021 010c 	bic.w	r1, r1, #12
 80035b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b6:	430b      	orrs	r3, r1
 80035b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c6:	6999      	ldr	r1, [r3, #24]
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	ea40 0301 	orr.w	r3, r0, r1
 80035d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4bc5      	ldr	r3, [pc, #788]	; (80038ec <UART_SetConfig+0x384>)
 80035d8:	429a      	cmp	r2, r3
 80035da:	d004      	beq.n	80035e6 <UART_SetConfig+0x7e>
 80035dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4bc3      	ldr	r3, [pc, #780]	; (80038f0 <UART_SetConfig+0x388>)
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d103      	bne.n	80035ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035e6:	f7ff f955 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 80035ea:	6778      	str	r0, [r7, #116]	; 0x74
 80035ec:	e002      	b.n	80035f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ee:	f7ff f93d 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 80035f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fc:	f040 80b6 	bne.w	800376c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003602:	461c      	mov	r4, r3
 8003604:	f04f 0500 	mov.w	r5, #0
 8003608:	4622      	mov	r2, r4
 800360a:	462b      	mov	r3, r5
 800360c:	1891      	adds	r1, r2, r2
 800360e:	6439      	str	r1, [r7, #64]	; 0x40
 8003610:	415b      	adcs	r3, r3
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
 8003614:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003618:	1912      	adds	r2, r2, r4
 800361a:	eb45 0303 	adc.w	r3, r5, r3
 800361e:	f04f 0000 	mov.w	r0, #0
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	00d9      	lsls	r1, r3, #3
 8003628:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800362c:	00d0      	lsls	r0, r2, #3
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	1911      	adds	r1, r2, r4
 8003634:	6639      	str	r1, [r7, #96]	; 0x60
 8003636:	416b      	adcs	r3, r5
 8003638:	667b      	str	r3, [r7, #100]	; 0x64
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	461a      	mov	r2, r3
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	1891      	adds	r1, r2, r2
 8003646:	63b9      	str	r1, [r7, #56]	; 0x38
 8003648:	415b      	adcs	r3, r3
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003650:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003654:	f7fc fdc0 	bl	80001d8 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4ba5      	ldr	r3, [pc, #660]	; (80038f4 <UART_SetConfig+0x38c>)
 800365e:	fba3 2302 	umull	r2, r3, r3, r2
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	011e      	lsls	r6, r3, #4
 8003666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003668:	461c      	mov	r4, r3
 800366a:	f04f 0500 	mov.w	r5, #0
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	1891      	adds	r1, r2, r2
 8003674:	6339      	str	r1, [r7, #48]	; 0x30
 8003676:	415b      	adcs	r3, r3
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
 800367a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800367e:	1912      	adds	r2, r2, r4
 8003680:	eb45 0303 	adc.w	r3, r5, r3
 8003684:	f04f 0000 	mov.w	r0, #0
 8003688:	f04f 0100 	mov.w	r1, #0
 800368c:	00d9      	lsls	r1, r3, #3
 800368e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003692:	00d0      	lsls	r0, r2, #3
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	1911      	adds	r1, r2, r4
 800369a:	65b9      	str	r1, [r7, #88]	; 0x58
 800369c:	416b      	adcs	r3, r5
 800369e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	1891      	adds	r1, r2, r2
 80036ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80036ae:	415b      	adcs	r3, r3
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80036ba:	f7fc fd8d 	bl	80001d8 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4b8c      	ldr	r3, [pc, #560]	; (80038f4 <UART_SetConfig+0x38c>)
 80036c4:	fba3 1302 	umull	r1, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	3332      	adds	r3, #50	; 0x32
 80036d6:	4a87      	ldr	r2, [pc, #540]	; (80038f4 <UART_SetConfig+0x38c>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036e4:	441e      	add	r6, r3
 80036e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e8:	4618      	mov	r0, r3
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	1894      	adds	r4, r2, r2
 80036f4:	623c      	str	r4, [r7, #32]
 80036f6:	415b      	adcs	r3, r3
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036fe:	1812      	adds	r2, r2, r0
 8003700:	eb41 0303 	adc.w	r3, r1, r3
 8003704:	f04f 0400 	mov.w	r4, #0
 8003708:	f04f 0500 	mov.w	r5, #0
 800370c:	00dd      	lsls	r5, r3, #3
 800370e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003712:	00d4      	lsls	r4, r2, #3
 8003714:	4622      	mov	r2, r4
 8003716:	462b      	mov	r3, r5
 8003718:	1814      	adds	r4, r2, r0
 800371a:	653c      	str	r4, [r7, #80]	; 0x50
 800371c:	414b      	adcs	r3, r1
 800371e:	657b      	str	r3, [r7, #84]	; 0x54
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	461a      	mov	r2, r3
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	1891      	adds	r1, r2, r2
 800372c:	61b9      	str	r1, [r7, #24]
 800372e:	415b      	adcs	r3, r3
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003736:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800373a:	f7fc fd4d 	bl	80001d8 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4b6c      	ldr	r3, [pc, #432]	; (80038f4 <UART_SetConfig+0x38c>)
 8003744:	fba3 1302 	umull	r1, r3, r3, r2
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	2164      	movs	r1, #100	; 0x64
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	3332      	adds	r3, #50	; 0x32
 8003756:	4a67      	ldr	r2, [pc, #412]	; (80038f4 <UART_SetConfig+0x38c>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	f003 0207 	and.w	r2, r3, #7
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4432      	add	r2, r6
 8003768:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800376a:	e0b9      	b.n	80038e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800376c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800376e:	461c      	mov	r4, r3
 8003770:	f04f 0500 	mov.w	r5, #0
 8003774:	4622      	mov	r2, r4
 8003776:	462b      	mov	r3, r5
 8003778:	1891      	adds	r1, r2, r2
 800377a:	6139      	str	r1, [r7, #16]
 800377c:	415b      	adcs	r3, r3
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003784:	1912      	adds	r2, r2, r4
 8003786:	eb45 0303 	adc.w	r3, r5, r3
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003798:	00d0      	lsls	r0, r2, #3
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	eb12 0804 	adds.w	r8, r2, r4
 80037a2:	eb43 0905 	adc.w	r9, r3, r5
 80037a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	008b      	lsls	r3, r1, #2
 80037ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037be:	0082      	lsls	r2, r0, #2
 80037c0:	4640      	mov	r0, r8
 80037c2:	4649      	mov	r1, r9
 80037c4:	f7fc fd08 	bl	80001d8 <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <UART_SetConfig+0x38c>)
 80037ce:	fba3 2302 	umull	r2, r3, r3, r2
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	011e      	lsls	r6, r3, #4
 80037d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d8:	4618      	mov	r0, r3
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	1894      	adds	r4, r2, r2
 80037e4:	60bc      	str	r4, [r7, #8]
 80037e6:	415b      	adcs	r3, r3
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ee:	1812      	adds	r2, r2, r0
 80037f0:	eb41 0303 	adc.w	r3, r1, r3
 80037f4:	f04f 0400 	mov.w	r4, #0
 80037f8:	f04f 0500 	mov.w	r5, #0
 80037fc:	00dd      	lsls	r5, r3, #3
 80037fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003802:	00d4      	lsls	r4, r2, #3
 8003804:	4622      	mov	r2, r4
 8003806:	462b      	mov	r3, r5
 8003808:	1814      	adds	r4, r2, r0
 800380a:	64bc      	str	r4, [r7, #72]	; 0x48
 800380c:	414b      	adcs	r3, r1
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	008b      	lsls	r3, r1, #2
 8003824:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003828:	0082      	lsls	r2, r0, #2
 800382a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800382e:	f7fc fcd3 	bl	80001d8 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <UART_SetConfig+0x38c>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	3332      	adds	r3, #50	; 0x32
 800384a:	4a2a      	ldr	r2, [pc, #168]	; (80038f4 <UART_SetConfig+0x38c>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003856:	441e      	add	r6, r3
 8003858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385a:	4618      	mov	r0, r3
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	1894      	adds	r4, r2, r2
 8003866:	603c      	str	r4, [r7, #0]
 8003868:	415b      	adcs	r3, r3
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003870:	1812      	adds	r2, r2, r0
 8003872:	eb41 0303 	adc.w	r3, r1, r3
 8003876:	f04f 0400 	mov.w	r4, #0
 800387a:	f04f 0500 	mov.w	r5, #0
 800387e:	00dd      	lsls	r5, r3, #3
 8003880:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003884:	00d4      	lsls	r4, r2, #3
 8003886:	4622      	mov	r2, r4
 8003888:	462b      	mov	r3, r5
 800388a:	eb12 0a00 	adds.w	sl, r2, r0
 800388e:	eb43 0b01 	adc.w	fp, r3, r1
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4618      	mov	r0, r3
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	008b      	lsls	r3, r1, #2
 80038a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038aa:	0082      	lsls	r2, r0, #2
 80038ac:	4650      	mov	r0, sl
 80038ae:	4659      	mov	r1, fp
 80038b0:	f7fc fc92 	bl	80001d8 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <UART_SetConfig+0x38c>)
 80038ba:	fba3 1302 	umull	r1, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	2164      	movs	r1, #100	; 0x64
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	3332      	adds	r3, #50	; 0x32
 80038cc:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <UART_SetConfig+0x38c>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	f003 020f 	and.w	r2, r3, #15
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4432      	add	r2, r6
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	bf00      	nop
 80038e2:	377c      	adds	r7, #124	; 0x7c
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	40011000 	.word	0x40011000
 80038f0:	40011400 	.word	0x40011400
 80038f4:	51eb851f 	.word	0x51eb851f

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4d0d      	ldr	r5, [pc, #52]	; (8003930 <__libc_init_array+0x38>)
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 80038fe:	1b64      	subs	r4, r4, r5
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	2600      	movs	r6, #0
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	4d0b      	ldr	r5, [pc, #44]	; (8003938 <__libc_init_array+0x40>)
 800390a:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x44>)
 800390c:	f000 f820 	bl	8003950 <_init>
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	2600      	movs	r6, #0
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08003990 	.word	0x08003990
 8003934:	08003990 	.word	0x08003990
 8003938:	08003990 	.word	0x08003990
 800393c:	08003994 	.word	0x08003994

08003940 <memset>:
 8003940:	4402      	add	r2, r0
 8003942:	4603      	mov	r3, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <_init>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr

0800395c <_fini>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr
